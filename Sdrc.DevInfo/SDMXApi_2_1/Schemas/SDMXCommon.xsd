<?xml version="1.0" encoding="UTF-8"?>
<!-- Copyright SDMX 2010 - http://www.sdmx.org -->
<xs:schema targetNamespace="http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common" elementFormDefault="qualified" xmlns="http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common" xmlns:xs="http://www.w3.org/2001/XMLSchema">
  <!-- Note: The following import statement sometimes causes problems with IE 6.* If you have this problem, comment it out. -->
  <xs:import namespace="http://www.w3.org/XML/1998/namespace" schemaLocation="xml.xsd"/>

  <xs:annotation>
    <xs:appinfo>SDMX Common Namespace Module</xs:appinfo>
    <xs:documentation>The common namespace module contains common constructs that are used by constructs in other namespaces.</xs:documentation>
  </xs:annotation>

  <xs:complexType name="TextType">
    <xs:annotation>
      <xs:documentation>TextType provides for a set of language-specific alternates to be provided for any human-readable constructs in the instance.</xs:documentation>
    </xs:annotation>
    <xs:simpleContent>
      <xs:extension base="xs:string">
        <xs:attribute ref="xml:lang" default="en">
          <xs:annotation>
            <xs:documentation>The xml:lang attribute specifies a language code for the text. If not supplied, the default language is assumed to be English.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>

  <xs:element name="Name" type="TextType">
    <xs:annotation>
      <xs:documentation>Name is a reusable element, used for providing a human-readable name for an object.</xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:element name="Description" type="TextType">
    <xs:annotation>
      <xs:documentation>Description is a reusable element, used for providing a longer human-readable description of an object.</xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:element name="Text" type="TextType">
    <xs:annotation>
      <xs:documentation>Text is a reusable element, used for providing a language specific text value for general purposes (i.e. not for a name or description).</xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:element name="StructuredText" type="XHTMLType">
    <xs:annotation>
      <xs:documentation>StructuredText is a reusable element, used for providing a language specific text value structured as XHTML.</xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:complexType name="StatusMessageType">
    <xs:annotation>
      <xs:documentation>StatusMessageType describes the structure of an error or warning message. A message contains the text of the message, as well as an optional language indicator and an optional code.</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="Text" type="TextType" maxOccurs="unbounded">
        <xs:annotation>
          <xs:documentation>Text contains the text of the message, in parallel language values.</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
    <xs:attribute name="code" type="xs:string" use="optional">
      <xs:annotation>
        <xs:documentation>The code attribute holds an optional code identifying the underlying error that generated the message. This should be used if parallel language descriptions of the error are supplied, to distinguish which of the multiple error messages are for the same underlying error.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>

  <xs:complexType name="CodedStatusMessageType">
    <xs:annotation>
      <xs:documentation>CodedStatusMessageType describes the structure of an error or warning message which required a code.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="StatusMessageType">
        <xs:sequence>
          <xs:element name="Text" type="TextType" maxOccurs="unbounded"/>
        </xs:sequence>
        <xs:attribute name="code" type="xs:string" use="required"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="AnnotableType" abstract="true">
    <xs:annotation>
      <xs:documentation>AnnotableType is an abstract base type used for all annotable artefacts. Any type that provides for annotations should extend this type.</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element ref="Annotations" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>

  <xs:element name="Annotations" type="AnnotationsType">
    <xs:annotation>
      <xs:documentation>Annotations is a reusable element the provides for a collection of annotations. It has been made global so that restrictions of types that extend AnnotatableType my reference it.</xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:complexType name="AnnotationsType">
    <xs:annotation>
      <xs:documentation>AnnotationsType provides for a list of annotations to be attached to data and structure messages.</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="Annotation" type="AnnotationType" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="AnnotationType">
    <xs:annotation>
      <xs:documentation>AnnotationType provides for non-documentation notes and annotations to be embedded in data and structure messages. It provides optional fields for providing a title, a type description, a URI, and the text of the annotation.</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="AnnotationTitle" type="xs:string" minOccurs="0">
        <xs:annotation>
          <xs:documentation>AnnotationTitle provides a title for the annotation.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="AnnotationType" type="xs:string" minOccurs="0">
        <xs:annotation>
          <xs:documentation>AnnotationType is used to distinguish between annotations designed to support various uses. The types are not enumerated, as these can be specified by the user or creator of the annotations. The definitions and use of annotation types should be documented by their creator.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="AnnotationURL" type="xs:anyURI" minOccurs="0">
        <xs:annotation>
          <xs:documentation>AnnotationURL is a URI - typically a URL - which points to an external resource which may contain or supplement the annotation. If a specific behavior is desired, an annotation type should be defined which specifies the use of this field more exactly.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="AnnotationText" type="TextType" minOccurs="0" maxOccurs="unbounded">
        <xs:annotation>
          <xs:documentation>AnnotationText holds a language-specific string containing the text of the annotation.</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
    <xs:attribute name="id" type="xs:string" use="optional">
      <xs:annotation>
        <xs:documentation>The id attribute provides a non-standard identification of an annotation. It can be used to disambiguate annotations.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>

  <xs:attributeGroup name="SetAttributeGroup">
    <xs:annotation>
      <xs:documentation>The SetAttributeGroup defines a common set of attributes for use in data and reference metadata sets.</xs:documentation>
    </xs:annotation>
    <xs:attribute name="structureRef" type="xs:IDREF" use="required">
      <xs:annotation>
        <xs:documentation>The structureRef contains a reference to a structural specification in the header of a data or reference metadata message. The structural specification details which structure the data or reference metadata conforms to, as well as providing additional information such as how the data is structure (e.g. which dimension occurs at the observation level for a data set).</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="setID" type="IDType" use="optional">
      <xs:annotation>
        <xs:documentation>The setID provides an identification of the data or metadata set.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="action" type="ActionType" use="optional">
      <xs:annotation>
        <xs:documentation>The action attribute indicates whether the file is appending, replacing, or deleting.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="reportingBeginDate" type="BasicTimePeriodType" use="optional">
      <xs:annotation>
        <xs:documentation>The reportingBeginDate indicates the inclusive start time of the data reported in the data or metadata set.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="reportingEndDate" type="BasicTimePeriodType" use="optional">
      <xs:annotation>
        <xs:documentation>The reportingEndDate indicates the inclusive end time of the data reported in the data or metadata set.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="validFromDate" type="xs:dateTime" use="optional">
      <xs:annotation>
        <xs:documentation>The validFromDate indicates the inclusive start time indicating the validity of the information in the data or metadata set.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="validToDate" type="xs:dateTime" use="optional">
      <xs:annotation>
        <xs:documentation>The validToDate indicates the inclusive end time indicating the validity of the information in the data or metadata set.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="publicationYear" type="xs:gYear" use="optional">
      <xs:annotation>
        <xs:documentation>The publicationYear holds the ISO 8601 four-digit year.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="publicationPeriod" type="ObservationalTimePeriodType" use="optional">
      <xs:annotation>
        <xs:documentation>The publicationPeriod specifies the period of publication of the data or metadata in terms of whatever provisioning agreements might be in force (i.e., "Q1 2005" if that is the time of publication for a data set published on a quarterly basis).</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>

  <xs:attributeGroup name="ExternalReferenceAttributeGroup">
    <xs:attribute name="serviceURL" type="xs:anyURI" use="optional">
      <xs:annotation>
        <xs:documentation>The serviceURL attribute indicates the URL of an SDMX SOAP web service from which the details of the object can be retrieved. Note that this can be a registry or and SDMX structural metadata repository, as they both implement that same web service interface.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="structureURL" type="xs:anyURI" use="optional">
      <xs:annotation>
        <xs:documentation>The structureURL attribute indicates the URL of a SDMX-ML structure message (in the same version as the source document) in which the externally referenced object is contained. Note that this may be a URL of an SDMX RESTful web service which will return the referenced object.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>

  <xs:simpleType name="AlphaNumericType">
    <xs:annotation>
      <xs:documentation>AlphaNumericType is a reusable simple type that allows for only mixed-case alphabetical and numeric characters.</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:pattern value="[A-z0-9]+"/>
    </xs:restriction>
  </xs:simpleType>

  <xs:simpleType name="AlphaType">
    <xs:annotation>
      <xs:documentation>AlphaType is a reusable simple type that allows for only mixed-case alphabetical characters. This is derived from the AlphaNumericType.</xs:documentation>
    </xs:annotation>
    <xs:restriction base="AlphaNumericType">
      <xs:pattern value="[A-z]+"/>
    </xs:restriction>
  </xs:simpleType>

  <xs:simpleType name="NumericType">
    <xs:annotation>
      <xs:documentation>NumericType is a reusable simple type that allows for only numeric characters. This is not to be confused with an integer, as this may be used to numeric strings which have leading zeros. These leading zeros are not ignored. This is derived from the AlphaNumericType.</xs:documentation>
    </xs:annotation>
    <xs:restriction base="AlphaNumericType">
      <xs:pattern value="[0-9]+"/>
    </xs:restriction>
  </xs:simpleType>

  <xs:simpleType name="ObservationalTimePeriodType">
    <xs:annotation>
      <xs:documentation>ObservationalTimePeriodType specifies a distinct time period or point in time in SDMX. The time period can either be a Gregorian calendar period, a standard reporting period, a distinct point in time, or a time range with a specific date and duration.</xs:documentation>
    </xs:annotation>
    <xs:union memberTypes="StandardTimePeriodType TimeRangeType"/>
  </xs:simpleType>

  <xs:simpleType name="StandardTimePeriodType">
    <xs:annotation>
      <xs:documentation>StandardTimePeriodType defines the set of standard time periods in SDMX. This includes the reporting time periods and the basic date type (i.e. the calendar time periods and the dateTime format).</xs:documentation>
    </xs:annotation>
    <xs:union memberTypes="BasicTimePeriodType ReportingTimePeriodType"/>
  </xs:simpleType>

  <xs:simpleType name="BasicTimePeriodType">
    <xs:annotation>
      <xs:documentation>BasicTimePeriodType contains the basic dates and calendar periods. It is a combination of the Gregorian time periods and the date time type..</xs:documentation>
    </xs:annotation>
    <xs:union memberTypes="GregorianTimePeriodType xs:dateTime"/>
  </xs:simpleType>

  <xs:simpleType name="GregorianTimePeriodType">
    <xs:annotation>
      <xs:documentation>GregorianTimePeriodType defines the set of standard calendar periods in SDMX.</xs:documentation>
    </xs:annotation>
    <xs:union memberTypes="xs:gYear xs:gYearMonth xs:date"/>
  </xs:simpleType>

  <xs:simpleType name="ReportingTimePeriodType">
    <xs:annotation>
      <xs:documentation>ReportingTimePeriodType defines standard reporting periods in SDMX, which are all in relation to the start day (day-month) of a reporting year which is specified in the specialized reporting year start day attribute. If the reporting year start day is not defined, a day of January 1 is assumed. The reporting year must be epxressed as the year at the beginning of the period. Therfore, if the reproting year runs from April to March, any given reporting year is expressed as the year for April. The general format of a report period can be described as  [year]-[period][time zone]?, where the type of period is designated with a single character followed by a number representing the period. Note that all periods allow for an optional time zone offset. See the details of each member type for the specifics of its format.</xs:documentation>
    </xs:annotation>
    <xs:union memberTypes="ReportingYearType ReportingSemesterType ReportingTrimesterType ReportingQuarterType ReportingMonthType ReportingWeekType ReportingDayType"/>
  </xs:simpleType>

  <xs:simpleType name="BaseReportPeriodType">
    <xs:annotation>
      <xs:documentation>BaseReportPeriodType is a simple type which frames the general pattern of a reporting period for validation purposes. This regular expression is only a general validation which is meant to validate the following structure [year]-[period][time zone]?. This type is meant to be derived from for further validation.</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:pattern value="\d{4}\-([ASTQ]\d{1}|[MW]\d{2}|[D]\d{3})(Z|((\+|\-)\d{2}:\d{2}))?"/>
    </xs:restriction>
  </xs:simpleType>

  <xs:simpleType name="ReportPeriodValidTimeZoneType">
    <xs:annotation>
      <xs:documentation>ReportPeriodValidTimeZoneType is a derivation of the BaseReportPeriodType which validates that the time zone provided in the base type is valid. The base type will have provided basic validation already. The patterns below validate that the time zone is "Z" or that it is between -14:00 and +14:00, or that there is no time zone provided. This type is meant to be derived from for further validation.</xs:documentation>
    </xs:annotation>
    <xs:restriction base="BaseReportPeriodType">
      <xs:pattern value=".+Z"/>
      <xs:pattern value=".{5}.*(\+|\-)(14:00|((0[0-9]|1[0-3]):[0-5][0-9]))"/>
      <xs:pattern value=".{5}[^\+\-Z]+"/>
    </xs:restriction>
  </xs:simpleType>

  <xs:simpleType name="ReportingYearType">
    <xs:annotation>
      <xs:documentation>ReportingYearType defines a time period of 1 year (P1Y) in relation to a reporting year which has a start day (day-month) specified in the specialized reporting year start day attribute. In the absence of a start day for the reporting year, a day of January 1 is assumed. In this case a reporting year will coincide with a calendar year. The format of a reporting year is YYYY-A1 (e.g. 2000-A1). Note that the period value of 1 is fixed.</xs:documentation>
    </xs:annotation>
    <xs:restriction base="ReportPeriodValidTimeZoneType">
      <xs:pattern value=".{5}A1.*"/>
    </xs:restriction>
  </xs:simpleType>

  <xs:simpleType name="ReportingSemesterType">
    <xs:annotation>
      <xs:documentation>ReportingSemesterType defines a time period of 6 months (P6M) in relation to a reporting year which has a start day (day-month) specified in the specialized reporting year start day attribute. In the absence of a start day for the reporting year, a day of January 1 is assumed. The format of a reporting semester is YYYY-Ss (e.g. 2000-S1), where s is either 1 or 2.</xs:documentation>
    </xs:annotation>
    <xs:restriction base="ReportPeriodValidTimeZoneType">
      <xs:pattern value=".{5}S[1-2].*"/>
    </xs:restriction>
  </xs:simpleType>

  <xs:simpleType name="ReportingTrimesterType">
    <xs:annotation>
      <xs:documentation>ReportingTrimesterType defines a time period of 4 months (P4M) in relation to a reporting year which has a start day (day-month) specified in the specialized reporting year start day attribute. In the absence of a start day for the reporting year, a day of January 1 is assumed. The format of a reporting trimester is YYYY-Tt (e.g. 2000-T1), where s is either 1, 2, or 3.</xs:documentation>
    </xs:annotation>
    <xs:restriction base="ReportPeriodValidTimeZoneType">
      <xs:pattern value=".{5}T[1-3].*"/>
    </xs:restriction>
  </xs:simpleType>

  <xs:simpleType name="ReportingQuarterType">
    <xs:annotation>
      <xs:documentation>ReportingQuarterType defines a time period of 3 months (P3M) in relation to a reporting year which has a start day (day-month) specified in the specialized reporting year start day attribute. In the absence of a start day for the reporting year, a day of January 1 is assumed. The format of a reporting quarter is YYYY-Qq (e.g. 2000-Q1), where q is a value between 1 and 4.</xs:documentation>
    </xs:annotation>
    <xs:restriction base="ReportPeriodValidTimeZoneType">
      <xs:pattern value=".{5}Q[1-4].*"/>
    </xs:restriction>
  </xs:simpleType>

  <xs:simpleType name="ReportingMonthType">
    <xs:annotation>
      <xs:documentation>ReportingMonthType defines a time period of 1 month (P1M) in relation to a reporting year which has a start day (day-month) specified in the specialized reporting year start day attribute. In the absence of a start day for the reporting year, a day of January 1 is assumed. In this case a reporting month will coincide with a calendar month. The format of a reporting month is YYYY-Mmm (e.g. 2000-M01), where mm is a two digit month (i.e. 01-12).</xs:documentation>
    </xs:annotation>
    <xs:restriction base="ReportPeriodValidTimeZoneType">
      <xs:pattern value=".{5}M(0[1-9]|1[0-2]).*"/>
    </xs:restriction>
  </xs:simpleType>

  <xs:simpleType name="ReportingWeekType">
    <xs:annotation>
      <xs:documentation>ReportingWeekType defines a time period of 7 days (P7D) in relation to a reporting year which has a start day (day-month) specified in the specialized reporting year start day attribute. A standard reporting week is based on the ISO 8601 defintion of a week date, in relation to the reporting period start day. The first week is defined as the week with the first Thursday on or after the reporting year start day. An equivalent definition is the week starting with the Monday nearest in time to the reporting year start day. There are other equivalent defintions, all of which should be adjusted based on the reporting year start day. In the absence of a start day for the reporting year, a day of January 1 is assumed. The format of a reporting week is YYYY-Www (e.g. 2000-W01), where mm is a two digit week (i.e. 01-53).</xs:documentation>
    </xs:annotation>
    <xs:restriction base="ReportPeriodValidTimeZoneType">
      <xs:pattern value=".{5}W(0[1-9]|[1-4][0-9]|5[0-3]).*"/>
    </xs:restriction>
  </xs:simpleType>

  <xs:simpleType name="ReportingDayType">
    <xs:annotation>
      <xs:documentation>ReportingDayType defines a time period of 1 day (P1D) in relation to a reporting year which has a start day (day-month) specified in the specialized reporting year start day attribute. In the absence of a start day for the reporting year, a day of January 1 is assumed. The format of a reporting day is YYYY-Dddd (e.g. 2000-D001), where ddd is a three digit day (i.e. 001-366).</xs:documentation>
    </xs:annotation>
    <xs:restriction base="ReportPeriodValidTimeZoneType">
      <xs:pattern value=".{5}D(0[0-9][1-9]|[1-2][0-9][0-9]|3[0-5][0-9]|36[0-6]).*"/>
    </xs:restriction>
  </xs:simpleType>

  <xs:simpleType name="BaseTimeRangeType">
    <xs:annotation>
      <xs:documentation>BaseTimeRangeType is a simple type which frames the general pattern for a time range in SDMX. A time range pattern is generally described as [xs:date or xs:dateTime]\[xs:duration], where the referenced types are defined by XML Schema. This type is meant to be derived from for further validation.</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:pattern value="\d{4}\-\d{2}\-\d{2}(T\d{2}:\d{2}:\d{2}(\.\d+)?)?(Z|((\+|\-)\d{2}:\d{2}))?/P.+"/>
    </xs:restriction>
  </xs:simpleType>

  <xs:simpleType name="RangeValidMonthDayType">
    <xs:annotation>
      <xs:documentation>RangeValidMonthDayType is a derivation of the BaseTimeRangeType which validates that the day provided is valid for the month, without regard to leap years. The base type will have provided basic validation already. The patterns below validate that there are up to 29 days in February, up to 30 days in April, June, September, and November and up to 31 days in January, March, May, July, August, October, and December. This type is meant to be derived from for further validation.</xs:documentation>
    </xs:annotation>
    <xs:restriction base="BaseTimeRangeType">
      <xs:pattern value=".{5}02\-(0[1-9]|[1-2][0-9]).+"/>
      <xs:pattern value=".{5}(04|06|09|11)\-(0[1-9]|[1-2][0-9]|30).+"/>
      <xs:pattern value=".{5}(01|03|05|07|08|10|12)\-(0[1-9]|[1-2][0-9]|3[0-1]).+"/>
    </xs:restriction>
  </xs:simpleType>

  <xs:simpleType name="RangeValidLeapYearType">
    <xs:annotation>
      <xs:documentation>RangeValidLeapYearType is a derivation of the RangeValidMonthDayType which validates that a date of February 29 occurs in a valid leap year (i.e. if the year is divisible 4 and not by 100, unless it is also divisible by 400). This type is meant to be derived from for further validation.</xs:documentation>
    </xs:annotation>
    <xs:restriction base="RangeValidMonthDayType">
      <xs:pattern value="((\d{2}(04|08|12|16|20|24|28|32|36|40|44|48|52|56|60|64|68|72|76|80|84|88|92|96))|((00|04|08|12|16|20|24|28|32|36|40|44|48|52|56|60|64|68|72|76|80|84|88|92|96)00))\-02\-29.+"/>
      <xs:pattern value=".{5}02\-(([0-1][0-9])|(2[^9])).+"/>
      <xs:pattern value=".{5}((0[1,3-9])|1[0-2]).+"/>
    </xs:restriction>
  </xs:simpleType>

  <xs:simpleType name="RangeValidTimeType">
    <xs:annotation>
      <xs:documentation>RangeValidTimeType is a derivation of the RangeValidLeapYearType which validates that the time (if provided) is validly formatted. The base type will have provided basic validation already. The patterns below validate that the time falls between 00:00:00 and 24:00:00. Note that as the XML dateTime type does, seconds are required. It is also permissible to have fractions of seconds, but only within the boundaries of the range specified. This type is meant to be derived from for further validation.</xs:documentation>
    </xs:annotation>
    <xs:restriction base="RangeValidLeapYearType">
      <xs:pattern value=".{10}T(24:00:00(\.[0]+)?|((([0-1][0-9])|(2[0-3])):[0-5][0-9]:[0-5][0-9](\.\d+)?))(/|Z|\+|\-).+"/>
      <xs:pattern value="[^T]+/.+"/>
    </xs:restriction>
  </xs:simpleType>

  <xs:simpleType name="RangeValidTimeZoneType">
    <xs:annotation>
      <xs:documentation>RangeValidMonthDayType is a derivation of the RangeValidTimeType which validates that the time zone provided in the base type is valid. The base type will have provided basic validation already. The patterns below validate that the time zone is "Z" or that it is between -14:00 and +14:00, or that there is no time zone provided. This type is meant to be derived from for further validation.</xs:documentation>
    </xs:annotation>
    <xs:restriction base="RangeValidTimeType">
      <xs:pattern value=".+Z/.+"/>
      <xs:pattern value=".{10}.*(\+|\-)(14:00|((0[0-9]|1[0-3]):[0-5][0-9]))/.+"/>
      <xs:pattern value=".{10}[^\+\-Z]+"/>
    </xs:restriction>
  </xs:simpleType>

  <xs:simpleType name="TimeRangeValidDateDurationType">
    <xs:annotation>
      <xs:documentation>TimeRangeValidDateDurationType is an abstract derivation of the RangeValidTimeType which validates that duration provided is generally valid, up to the time component.</xs:documentation>
    </xs:annotation>
    <xs:restriction base="RangeValidTimeZoneType">
      <xs:pattern value=".+/P(\d+Y)?(\d+M)?(\d+D)?(T.+)?"/>
    </xs:restriction>
  </xs:simpleType>

  <xs:simpleType name="TimeRangeType">
    <xs:annotation>
      <xs:documentation>TimeRangeType defines the structure of a time range in SDMX. The pattern of a time range can be generally described as [start date]\[duration], where start date is an date or dateTime type as defined in XML Schema and duration is a time duration as defined in XML Schema. Note that it is permissible for a time zone offset to be provided on the date or date time.</xs:documentation>
    </xs:annotation>
    <xs:restriction base="TimeRangeValidDateDurationType">
      <xs:pattern value=".+/P.*T(\d+H)?(\d+M)?(\d+(.\d+)?S)?"/>
      <xs:pattern value=".+/P[^T]+"/>
    </xs:restriction>
  </xs:simpleType>

  <xs:simpleType name="TimezoneType">
    <xs:annotation>
      <xs:documentation>TimezoneType defines the pattern for a time zone. An offset of -14:00 to +14:00 or Z can be specified.</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:pattern value="Z"/>
      <xs:pattern value="(\+|\-)(14:00|((0[0-9]|1[0-3]):[0-5][0-9]))"/>
    </xs:restriction>
  </xs:simpleType>

  <xs:complexType name="ReferencePeriodType">
    <xs:annotation>
      <xs:documentation>Specifies the inclusive start and end times.</xs:documentation>
    </xs:annotation>
    <xs:attribute name="startTime" type="xs:dateTime" use="required">
      <xs:annotation>
        <xs:documentation>The startTime attributes contains the inclusive start date for the reference period.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="endTime" type="xs:dateTime" use="required">
      <xs:annotation>
        <xs:documentation>The endTime attributes contains the inclusive end date for the reference period.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>

  <xs:simpleType name="OccurenceType">
    <xs:annotation>
      <xs:documentation>OccurenceType is used to express the maximum occurrence of an object. It combines an integer, greater than 1, and the literal text, "unbounded", for objects which have no upper limit on its occurrence.</xs:documentation>
    </xs:annotation>
    <xs:union memberTypes="MaxOccursNumberType UnboundedCodeType"/>
  </xs:simpleType>

  <xs:simpleType name="MaxOccursNumberType">
    <xs:annotation>
      <xs:documentation>MaxOccursNumberType is a base type used to restrict an integer to be greater than 1, for the purpose of expressing the maximum number of occurrences of an object.</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:nonNegativeInteger">
      <xs:minInclusive value="1"/>
    </xs:restriction>
  </xs:simpleType>

  <xs:simpleType name="UnboundedCodeType">
    <xs:annotation>
      <xs:documentation>UnboundedCodeType provides single textual value of "unbounded", for use in OccurentType.</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="unbounded">
        <xs:annotation>
          <xs:documentation>Object has no upper limit on occurrences.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>

  <xs:simpleType name="ActionType">
    <xs:annotation>
      <xs:documentation>ActionType provides a list of actions, describing the intention of the data transmission from the sender's side. Each action provided at the data or metadata set level applies to the entire data set for which it is given. Note that the actions indicated in the Message Header are optional, and used to summarize specific actions indicated with this data type for all registry interactions. The "Informational" value is used when the message contains information in response to a query, rather than being used to invoke a maintenance activity.</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:NMTOKEN">
      <xs:enumeration value="Append">
        <xs:annotation>
          <xs:documentation>Append - this is an incremental update for an existing data/metadata set or the provision of new data or documentation (attribute values) formerly absent. If any of the supplied data or metadata is already present, it will not replace that data or metadata. This corresponds to the "Update" value found in version 1.0 of the SDMX Technical Standards.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="Replace">
        <xs:annotation>
          <xs:documentation>Replace - data/metadata is to be replaced, and may also include additional data/metadata to be appended. The replacement occurs at the level of the observation - that is, it is not possible to replace an entire series.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="Delete">
        <xs:annotation>
          <xs:documentation>Delete - data/metadata is to be deleted. Deletion occurs at the lowest level object. For instance, if a delete data message contains a series with no observations, then the entire series will be deleted. If the series contains observations, then only those observations specified will be deleted. The same basic concept applies for attributes. If a series or observation in a delete message contains attributes, then only those attributes will be deleted.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="Information">
        <xs:annotation>
          <xs:documentation>Informational - data/metadata is being exchanged for informational purposes only, and not meant to update a system.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>

  <xs:simpleType name="WildCardValueType">
    <xs:annotation>
      <xs:documentation>WildCardValueType is a single value code list, used to include the '%' character - indicating that an entire field is wild carded.</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="%">
        <xs:annotation>
          <xs:documentation>Indicates a wild card value.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>

  <xs:complexType name="QueryableDataSourceType">
    <xs:annotation>
      <xs:documentation>QueryableDataSourceType describes a data source which is accepts an standard SDMX Query message and responds appropriately.</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="DataURL" type="xs:anyURI">
        <xs:annotation>
          <xs:documentation>DataURL contains the URL of the data source.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="WSDLURL" type="xs:anyURI" minOccurs="0">
        <xs:annotation>
          <xs:documentation>WSDLURL provides the location of a WSDL instance on the internet which describes the queryable data source.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="WADLURL" type="xs:anyURI" minOccurs="0">
        <xs:annotation>
          <xs:documentation>WADLURL provides the location of a WADL instance on the internet which describes the REST protocol of the queryable data source.</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
    <xs:attribute name="isRESTDatasource" type="xs:boolean" use="required">
      <xs:annotation>
        <xs:documentation>The isRESTDatasource attribute indicates, if true, that the queryable data source is accessible via the REST protocol.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="isWebServiceDatasource" type="xs:boolean" use="required">
      <xs:annotation>
        <xs:documentation>The isWebServiceDatasource attribute indicates, if true, that the queryable data source is accessible via Web Services protocols.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>

  <xs:simpleType name="DimensionTypeType">
    <xs:annotation>
      <xs:documentation>DimensionTypeType enumerates the sub-classes of a dimension.</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="Dimension">
        <xs:annotation>
          <xs:documentation>An ordinary dimension.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="MeasureDimension">
        <xs:annotation>
          <xs:documentation>A measure dimension.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="TimeDimension">
        <xs:annotation>
          <xs:documentation>The time dimension.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>

  <xs:complexType name="XHTMLType" mixed="true">
    <xs:annotation>
      <xs:documentation>XHTMLType allows for mixed content of text and XHTML tags. When using this type, one will have to provide a reference to the XHTML schema, since the processing of the tags within this type is strict, meaning that they are validated against the XHTML schema provided.</xs:documentation>
    </xs:annotation>
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
      <xs:any namespace="http://www.w3.org/1999/xhtml" processContents="strict"/>
    </xs:sequence>
    <xs:attribute ref="xml:lang" default="en"/>
  </xs:complexType>

  <xs:simpleType name="ContentConstraintTypeCodeType">
    <xs:annotation>
      <xs:documentation>ContentConstraintTypeCodeType defines a list of types for a content constraint. A content constraint can state which data is present or which content is allowed for the constraint attachment.</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="Allowed">
        <xs:annotation>
          <xs:documentation>The constraint contains the allowed values for attachable object.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="Actual">
        <xs:annotation>
          <xs:documentation>The constraints contains the actual data present for the attachable object.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>

  <xs:complexType name="RegionType" abstract="true">
    <xs:annotation>
      <xs:documentation>RegionType is an abstract type which defines a generic constraint region. This type can be refined to define regions for data or metadata sets. A region is defined by a collection of key values - each of which a collection of values for a component which disambiguates data or metadata (i.e. dimensions or the target objects of a metadata target). For each region, as collection of attribute values can be provided. Taken together, the key values and attributes serve to identify or describe a subset of a data or metadata set. Finally, the region can flagged as being included or excluded, although this flag only makes sense when the region is used in a particular context.</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="KeyValue" type="ComponentValueSetType" minOccurs="0" maxOccurs="unbounded">
        <xs:annotation>
          <xs:documentation>KeyValue contains a reference to a component which disambiguates the data or metadata (i.e. a dimension or target object) and provides a collection of values for the component. The collection of values can be flagged as being inclusive or exclusive to the region being defined. Any key component that is not included is assumed to be wild carded, which is to say that the cube includes all possible values for the un-referenced key components. Further, this assumption applies to the values of the components as well. The values for any given component can only be sub-setted in the region by explicit inclusion or exclusion. For example, a dimension X which has the possible values of 1, 2, 3 is assumed to have all of these values if a key value is not defined. If a key value is defined with an inclusion attribute of true and the values of 1 and 2, the only the values of 1 and 2 for dimension X are included in the definition of the region. If the key value is defined with an inclusion attribute of false and the value of 1, then the values of 2 and 3 for dimension X are included in the definition of the region. Note that any given key component must only be referenced once in the region.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="Attribute" type="ComponentValueSetType" minOccurs="0" maxOccurs="unbounded">
        <xs:annotation>
          <xs:documentation>Attributes contains a reference to an attribute component (data or metadata) and provides a collection of values for the referenced attribute. This serves to state that for the key which defines the region, the attributes that are specified here have or do not have (depending to the include attribute of the value set) the values provided. It is possible to provide and attribute reference without specifying values, for the purpose of stating the attribute is absent (include = false) or present with an unbounded set of values. As opposed to key components, which are assumed to be wild carded if absent, no assumptions are made about the absence of an attribute. Only attributes which are explicitly stated to be present or absent from the region will be know. All unstated attributes for the set cannot be assumed to absent or present.</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
    <xs:attribute name="include" type="xs:boolean" use="optional" default="true">
      <xs:annotation>
        <xs:documentation>The include attribute indicates that the region is to be included or excluded within the context in which it is defined. For example, if the regions is defined as part of a content constraint, the exclude flag would mean the data identified by the region is not present.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:anyAttribute namespace="##local"/>
  </xs:complexType>

  <xs:complexType name="ComponentValueSetType" abstract="true">
    <xs:annotation>
      <xs:documentation>ComponentValueSetType is an abstract base type which is used to provide a set of value for a referenced component. Implementations of this type will be based on a particular component type and refine the allowed values to reflect the types of values that are possible for that type of component.</xs:documentation>
    </xs:annotation>
    <xs:choice minOccurs="0">
      <xs:element name="Value" type="SimpleValueType" maxOccurs="unbounded">
        <xs:annotation>
          <xs:documentation>Value provides a simple value for the component, such as a coded, numeric, or simple text value. This type of component value is applicable for dimensions and attributes.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="DataSet" type="SetReferenceType" maxOccurs="unbounded">
        <xs:annotation>
          <xs:documentation>DataSet provides a reference to a data set and is used to state a value for the data set target component in a metadata target.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="DataKey" type="DataKeyType" maxOccurs="unbounded">
        <xs:annotation>
          <xs:documentation>DataKey provides a set of dimension references and value, which form a full or partial data key. This is used to state a value for the key descriptor values target component in a metadata target.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="Object" type="ObjectReferenceType" maxOccurs="unbounded">
        <xs:annotation>
          <xs:documentation>Object provides a reference to an Identifiable object in the SDMX Information Model. This is used to state a value for an identifiable target component in a metadata target.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="TimeRange" type="TimeRangeValueType">
        <xs:annotation>
          <xs:documentation>TimeValue provides a value for a component which has a time representation. This is repeatable to allow for a range to be specified, although a single value can also be provided. An operator is available on this to indicate whether the specified value indicates an exact value or the beginning/end of a range (inclusive or exclusive).</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:choice>
    <xs:attribute name="id" type="NestedNCNameIDType" use="required">
      <xs:annotation>
        <xs:documentation>The id attribute provides the identifier for the component for which values are being provided. This base type allows for a nested identifier to be provided, for the purpose of referencing a nested component (i.e. a metadata attribute). However, specific implementations will restrict this representation to only allow single level identifiers where appropriate.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="include" type="xs:boolean" use="optional" default="true">
      <xs:annotation>
        <xs:documentation>The include attribute indicates whether the values provided for the referenced component are to be included are excluded from the region in which they are defined.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>

  <xs:complexType name="DistinctKeyType" abstract="true">
    <xs:annotation>
      <xs:documentation>DistinctKeyType is an abstract base type which is a special type of region that only defines a distinct region of data or metadata. For each component defined in the region, only a single values is provided. However, the same rules that apply to the general region about unstated components being wild carded apply here as well. Thus, this type can define a distinct full or partial key for data or metadata.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="RegionType">
        <xs:sequence>
          <xs:element name="KeyValue" type="DinstinctKeyValueType"  maxOccurs="unbounded"/>
        </xs:sequence>
        <xs:attribute name="include" type="xs:boolean" use="optional" fixed="true">
          <xs:annotation>
            <xs:documentation>The include attribute has a fixed value of true for a distinct key, since such a key is always assumed to identify existing data or metadata.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:anyAttribute namespace="##local"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="DinstinctKeyValueType" abstract="true">
    <xs:annotation>
      <xs:documentation>DinstinctKeyValueType is an abstract base type which defines a singular, required value for a key component.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="ComponentValueSetType">
        <xs:choice>
          <xs:element name="Value" type="SimpleKeyValueType"/>
          <xs:element name="DataSet" type="SetReferenceType"/>
          <xs:element name="DataKey" type="DataKeyType"/>
          <xs:element name="Object" type="ObjectReferenceType"/>
        </xs:choice>
        <xs:attribute name="id" type="SingleNCNameIDType" use="required"/>
        <xs:attribute name="include" type="xs:boolean" use="optional" fixed="true"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="DataKeyType">
    <xs:annotation>
      <xs:documentation>DataKeyType is a region which defines a distinct full or partial data key. The key consists of a set of values, each referencing a dimension and providing a single value for that dimension. The purpose of the key is to define a subset of a data set (i.e. the observed value and data attribute) which have the dimension values provided in this definition. Any dimension not stated explicitly in this key is assumed to be wild carded, thus allowing for the definition of partial data keys.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="DistinctKeyType">
        <xs:sequence>
          <xs:element name="KeyValue" type="DataKeyValueType" maxOccurs="unbounded"/>
        </xs:sequence>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="DataKeyValueType">
    <xs:annotation>
      <xs:documentation>DataKeyValueType is a type for providing a dimension value for the purpose of defining a distinct data key. Only a single value can be provided for the dimension.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="DinstinctKeyValueType">
        <xs:sequence>
          <xs:element name="Value" type="SimpleKeyValueType"/>
        </xs:sequence>
        <xs:attribute name="id" type="SingleNCNameIDType" use="required"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="MetadataKeyType">
    <xs:annotation>
      <xs:documentation>MetadataKeyType is a region which defines a distinct full or partial metadata key. The key consists of a set of values, each referencing a target object for the metadata target referenced in the metadataTarget attribute, which must be defined in the report structure referenced in the report attribute. Each target object can be assigned a single value. If an target object from the reference metadata target is not included in this key, the value of that is assumed to be all known objects for a reference target object, all possible keys for a key descriptor values target object, or all dates for report period target object. The purpose of this key reference a metadata conforming to a particular report structure for given object or set of objects.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="DistinctKeyType">
        <xs:sequence>
          <xs:element name="KeyValue" type="MetadataKeyValueType" maxOccurs="unbounded"/>
        </xs:sequence>
        <xs:attribute name="report" type="IDType" use="required">
          <xs:annotation>
            <xs:documentation>The report attribute is required and holds the identifier of the report structure which the reference metadata being defined by this key is based on.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="metadataTarget" type="IDType" use="required">
          <xs:annotation>
            <xs:documentation>The metadataTarget attribute is required and identifies the metadata target for the report structure which this key is based upon. Note that a report structure can have multiple metadata targets, so to properly determine the object or objects for which the key applies, the proper metadata target must be identified.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="MetadataKeyValueType">
    <xs:annotation>
      <xs:documentation>MetadataKeyValueType is a type for providing a target object value for the purpose of defining a distinct metadata key. Only a single value can be provided for the target object.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="DinstinctKeyValueType">
        <xs:choice>
          <xs:element name="Value" type="SimpleKeyValueType"/>
          <xs:element name="DataSet" type="SetReferenceType"/>
          <xs:element name="DataKey" type="DataKeyType"/>
          <xs:element name="Object" type="ObjectReferenceType"/>
        </xs:choice>
        <xs:attribute name="id" type="SingleNCNameIDType" use="required"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="CubeRegionType">
    <xs:annotation>
      <xs:documentation>CubeRegionType defines the structure of a data cube region. This is based on the abstract RegionType and simply refines the key and attribute values to conform with what is applicable for dimensions and attributes, respectively. See the documentation of the base type for more details on how a region is defined.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="RegionType">
        <xs:sequence>
          <xs:element name="KeyValue" type="CubeRegionKeyType" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element name="Attribute" type="AttributeValueSetType" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="MetadataTargetRegionType">
    <xs:annotation>
      <xs:documentation>MetadataTargetRegionType defines the structure of a metadata target region. A metadata target region must define the report structure and the metadata target from that structure on which the region is based. This type is based on the abstract RegionType and simply refines the key and attribute values to conform with what is applicable for target objects and metadata attributes, respectively. See the documentation of the base type for more details on how a region is defined.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="RegionType">
        <xs:sequence>
          <xs:element name="KeyValue" type="MetadataTargetRegionKeyType" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element name="Attribute" type="MetadataAttributeValueSetType" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
        <xs:attribute name="report" type="IDType" use="required">
          <xs:annotation>
            <xs:documentation>The report attribute is required and holds the identifier of the report structure which the reference metadata being defined by this region is based on.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="metadataTarget" type="IDType" use="required">
          <xs:annotation>
            <xs:documentation>The metadataTarget attribute is required and identifies the metadata target for the report structure which this region is based upon. Note that a report structure can have multiple metadata targets, so to properly determine the object or objects for which the region applies, the proper metadata target must be identified.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="CubeRegionKeyType">
    <xs:annotation>
      <xs:documentation>CubeRegionKeyType is a type for providing a set of values for a dimension for the purpose of defining a data cube region. A set of distinct value can be provided, or if this dimension is represented as time, and time range can be specified.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="ComponentValueSetType">
        <xs:choice>
          <xs:element name="Value" type="SimpleValueType" maxOccurs="unbounded"/>
          <xs:element name="TimeRange" type="TimeRangeValueType"/>
        </xs:choice>
        <xs:attribute name="id" type="SingleNCNameIDType" use="required"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="MetadataTargetRegionKeyType">
    <xs:annotation>
      <xs:documentation>MetadataTargetRegionKeyType is a type for providing a set of values for a target object in a metadata target of a re fence metadata report. A set of values or a time range can be provided for a report period target object. A collection of the respective types of references can be provided for data set reference and identifiable object reference target objects. For a key descriptor values target object, a collection of data keys can be provided.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="ComponentValueSetType">
        <xs:choice>
          <xs:element name="Value" type="SimpleKeyValueType" maxOccurs="unbounded"/>
          <xs:element name="DataSet" type="SetReferenceType" maxOccurs="unbounded"/>
          <xs:element name="DataKey" type="DataKeyType" maxOccurs="unbounded"/>
          <xs:element name="Object" type="ObjectReferenceType" maxOccurs="unbounded"/>
          <xs:element name="TimeRange" type="TimeRangeValueType"/>
        </xs:choice>
        <xs:attribute name="id" type="SingleNCNameIDType" use="required"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="AttributeValueSetType">
    <xs:annotation>
      <xs:documentation>AttributeValueSetType defines the structure for providing values for a data attribute. If no values are provided, the attribute is implied to include/excluded from the region in which it is defined, with no regard to the value of the data attribute. Note that for metadata attributes which occur within other metadata attributes, a nested identifier can be provided. For example, a value of CONTACT.ADDRESS.STREET refers to the metadata attribute with the identifier STREET which exists in the ADDRESS metadata attribute in the CONTACT metadata attribute, which is defined at the root of the report structure.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="ComponentValueSetType">
        <xs:choice minOccurs="0">
          <xs:element name="Value" type="SimpleValueType" maxOccurs="unbounded"/>
          <xs:element name="TimeRange" type="TimeRangeValueType"/>
        </xs:choice>
        <xs:attribute name="id" type="SingleNCNameIDType" use="required"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="MetadataAttributeValueSetType">
    <xs:annotation>
      <xs:documentation>MetadataAttributeValueSetType defines the structure for providing values for a metadata attribute. If no values are provided, the attribute is implied to include/excluded from the region in which it is defined, with no regard to the value of the metadata attribute.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="ComponentValueSetType">
        <xs:choice minOccurs="0">
          <xs:element name="Value" type="SimpleValueType" maxOccurs="unbounded"/>
          <xs:element name="TimeRange" type="TimeRangeValueType"/>
        </xs:choice>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="SimpleValueType">
    <xs:annotation>
      <xs:documentation>SimpleValueType contains a simple value for a component, and if that value is from a code list, the ability to indicate that child codes in a simple hierarchy are part of the value set of the component for the region.</xs:documentation>
    </xs:annotation>
    <xs:simpleContent>
      <xs:extension base="xs:string">
        <xs:attribute name="cascadeValues" type="xs:boolean" use="optional" default="false">
          <xs:annotation>
            <xs:documentation>The cascadeValues attribute, if true, indicates that if the value is taken from a code all child codes in a simple hierarchy are understood be included in the region.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>

  <xs:complexType name="SimpleKeyValueType">
    <xs:annotation>
      <xs:documentation>SimpleKeyValueType derives from the SimpleValueType, but does not allow for the cascading of value in the hierarchy, as keys are meant to describe a distinct full or partial key.</xs:documentation>
    </xs:annotation>
    <xs:simpleContent>
      <xs:restriction base="SimpleValueType">
        <xs:attribute name="cascadeValues" type="xs:boolean" use="prohibited"/>
      </xs:restriction>
    </xs:simpleContent>
  </xs:complexType>

  <xs:complexType name="TimeRangeValueType">
    <xs:annotation>
      <xs:documentation>TimeRangeValueType allows a time period value to be expressed as a range. It can be expressed as the period before a period, after a period, or between two periods. Each of these properties can specify their inclusion in regards to the range.</xs:documentation>
    </xs:annotation>
    <xs:choice>
      <xs:element name="BeforePeriod" type="TimePeriodRangeType">
        <xs:annotation>
          <xs:documentation>BeforePeriod is the period before which the period is meant to cover. This date may be inclusive or exclusive in the range.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="AfterPeriod" type="TimePeriodRangeType">
        <xs:annotation>
          <xs:documentation>AfterPeriod is the period after which the period is meant to cover. This date may be inclusive or exclusive in the range.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:sequence>
        <xs:element name="StartPeriod" type="TimePeriodRangeType">
          <xs:annotation>
            <xs:documentation>StartPeriod is the start date or the range that the queried date must occur within. This date may be inclusive or exclusive in the range.</xs:documentation>
          </xs:annotation>
        </xs:element>
        <xs:element name="EndPeriod" type="TimePeriodRangeType">
          <xs:annotation>
            <xs:documentation>EndPeriod is the end period of the range. This date may be inclusive or exclusive in the range.</xs:documentation>
          </xs:annotation>
        </xs:element>
      </xs:sequence>
    </xs:choice>
  </xs:complexType>

  <xs:complexType name="TimePeriodRangeType">
    <xs:annotation>
      <xs:documentation>TimePeriodRangeType defines a time period, and indicates whether it is inclusive in a range.</xs:documentation>
    </xs:annotation>
    <xs:simpleContent>
      <xs:extension base="ObservationalTimePeriodType">
        <xs:attribute name="isInclusive" type="xs:boolean" default="true">
          <xs:annotation>
            <xs:documentation>The isInclusive attribute, when true, indicates that the time period specified is included in the range.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>

  <xs:simpleType name="SimpleOperatorType">
    <xs:annotation>
      <xs:documentation>SimpleOperatorType provides an enumeration of simple operators to be applied to any value.</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="notEqual">
        <xs:annotation>
          <xs:documentation>(!=) - value must not be equal to the value supplied.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="equal">
        <xs:annotation>
          <xs:documentation>(=) - value must be exactly equal to the value supplied.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>

  <xs:simpleType name="RangeOperatorType">
    <xs:annotation>
      <xs:documentation>RangeOperatorType provides an enumeration of range operators to be applied to an ordered value.</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="greaterThanOrEqual">
        <xs:annotation>
          <xs:documentation>(>=) - value must be greater than or equal to the value supplied.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="lessThanOrEqual">
        <xs:annotation>
          <xs:documentation>(&lt;=) - value must be less than or equal to the value supplied.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="greaterThan">
        <xs:annotation>
          <xs:documentation>(>) - value must be greater than the value supplied.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="lessThan">
        <xs:annotation>
          <xs:documentation>(&lt;) - value must be less than the value supplied.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>

  <xs:simpleType name="TextSearchOperatorType">
    <xs:annotation>
      <xs:documentation>TextSearchOperatorType provides an enumeration of text search operators.</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="contains">
        <xs:annotation>
          <xs:documentation>The text being searched must contain the supplied text.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="startsWith">
        <xs:annotation>
          <xs:documentation>The text being searched must start with the supplied text.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="endsWith">
        <xs:annotation>
          <xs:documentation>The text being searched must end with the supplied text.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="doesNotContain">
        <xs:annotation>
          <xs:documentation>The text being searched cannot contain the supplied text.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="doesNotStartWith">
        <xs:annotation>
          <xs:documentation>The text being searched cannot start with the supplied text.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="doesNotEndWith">
        <xs:annotation>
          <xs:documentation>The text being searched cannot end with the supplied text.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>

  <xs:simpleType name="OrderedOperatorType">
    <xs:annotation>
      <xs:documentation>OrderedOperatorType combines the SimpleOperatorType and the RangeOperatorType to provide a full range or operators for any ordered value.</xs:documentation>
    </xs:annotation>
    <xs:union memberTypes="SimpleOperatorType RangeOperatorType"/>
  </xs:simpleType>

  <xs:simpleType name="TextOperatorType">
    <xs:annotation>
      <xs:documentation></xs:documentation>
    </xs:annotation>
    <xs:union memberTypes="SimpleOperatorType TextSearchOperatorType"/>
  </xs:simpleType>

  <xs:simpleType name="TimeOperatorType">
    <xs:annotation>
      <xs:documentation>TimeOperatorType derives from the OrderedOperatorType to remove the notEqual operator.</xs:documentation>
    </xs:annotation>
    <xs:restriction base="OrderedOperatorType">
      <xs:enumeration value="equal"/>
      <xs:enumeration value="greaterThanOrEqual"/>
      <xs:enumeration value="lessThanOrEqual"/>
      <xs:enumeration value="greaterThan"/>
      <xs:enumeration value="lessThan"/>
    </xs:restriction>
  </xs:simpleType>

  <!-- Structure Specifications for Data/Metadata Messages -->

  <xs:complexType name="PayloadStructureType" abstract="true">
    <xs:annotation>
      <xs:documentation>PayloadStructureType is an abstract base type used to define the structural information for data or metadata sets. A reference to the structure is provided (either explicitly or through a reference to a structure usage).</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:choice>
        <xs:element name="ProvisionAgrement" type="ProvisionAgreementReferenceType">
          <xs:annotation>
            <xs:documentation>ProvisionAgreement references a provision agreement which the data or metadata is reported against.</xs:documentation>
          </xs:annotation>
        </xs:element>
        <xs:element name="StructureUsage" type="StructureUsageReferenceBaseType">
          <xs:annotation>
            <xs:documentation>StructureUsage references a flow which the data or metadata is reported against.</xs:documentation>
          </xs:annotation>
        </xs:element>
        <xs:element name="Structure" type="StructureReferenceBaseType">
          <xs:annotation>
            <xs:documentation>Structure references the structure which defines the structure of the data or metadata set.</xs:documentation>
          </xs:annotation>
        </xs:element>
      </xs:choice>
    </xs:sequence>
    <xs:attribute name="structureID" type="xs:ID" use="required">
      <xs:annotation>
        <xs:documentation>The structureID attribute uniquely identifies the structure for the purpose of referencing it from the payload. This is only used in structure specific formats. Although it is required, it is only useful when more than one data set is present in the message.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="schemaURL" type="xs:anyURI" use="optional">
      <xs:annotation>
        <xs:documentation>The schemaURL attribute provides a location from which the structure specific schema can be located.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="namespace" type="xs:anyURI" use="optional">
      <xs:annotation>
        <xs:documentation>The namespace attribute is used to provide the namespace for structure-specific formats. By communicating this information in the header, it is possible to generate the structure specific schema while processing the message.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="dimensionAtObservation" type="ObservationDimensionType" use="optional">
      <xs:annotation>
        <xs:documentation>The dimensionAtObservation is used to reference the dimension at the observation level for data messages. This can also be given the explicit value of "AllDimensions" which denotes that the cross sectional data is in the flat format.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="explicitMeasures" type="xs:boolean" use="optional">
      <xs:annotation>
        <xs:documentation>The explicitMeasures indicates whether explicit measures are used in the cross sectional format. This is only applicable for the measure dimension as the dimension at the observation level or the flat structure.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attributeGroup ref="ExternalReferenceAttributeGroup"/>
  </xs:complexType>

  <xs:complexType name="DataStructureType" abstract="true">
    <xs:annotation>
      <xs:documentation>DataStructureType is an abstract base type the forms the basis for the structural information for a data set.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="PayloadStructureType">
        <xs:sequence>
          <xs:choice>
            <xs:element name="ProvisionAgrement" type="ProvisionAgreementReferenceType">
              <xs:annotation>
                <xs:documentation>ProvisionAgreement references a provision agreement which the data is reported against.</xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="StructureUsage" type="DataflowReferenceType">
              <xs:annotation>
                <xs:documentation>StructureUsage references a dataflow which the data is reported against.</xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="Structure" type="DataStructureReferenceType">
              <xs:annotation>
                <xs:documentation>Structure references the data structure definition which defines the structure of the data.</xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:choice>
        </xs:sequence>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="DataStructureRequestType">
    <xs:annotation>
      <xs:documentation>DataStructureRequestType is a variation of a the DataStructureType for querying purposes. Only the observation dimension and the explicit measures flag are allowed.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="DataStructureType">
        <xs:sequence>
          <xs:choice>
            <xs:element name="ProvisionAgrement" type="ProvisionAgreementReferenceType"/>
            <xs:element name="StructureUsage" type="DataflowReferenceType"/>
            <xs:element name="Structure" type="DataStructureReferenceType"/>
          </xs:choice>
        </xs:sequence>
        <xs:attribute name="schemaURL" type="xs:anyURI" use="prohibited"/>
        <xs:attribute name="namespace" type="xs:anyURI" use="prohibited"/>
        <xs:attribute name="dimensionAtObservation" type="ObservationDimensionType" use="required"/>
        <xs:attribute name="explicitMeasures" type="xs:boolean" use="optional" default="false"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="GenericDataStructureRequestType">
    <xs:annotation>
      <xs:documentation>GenericDataStructureRequestType is a variation of a the DataStructureRequestType for querying purposes. The explicit measure flag in not allowed.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="DataStructureRequestType">
        <xs:sequence>
          <xs:choice>
            <xs:element name="ProvisionAgrement" type="ProvisionAgreementReferenceType"/>
            <xs:element name="StructureUsage" type="DataflowReferenceType"/>
            <xs:element name="Structure" type="DataStructureReferenceType"/>
          </xs:choice>
        </xs:sequence>
        <xs:attribute name="dimensionAtObservation" type="ObservationDimensionType" use="required"/>
        <xs:attribute name="explicitMeasures" type="xs:boolean" use="prohibited"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="TimeSeriesDataStructureRequestType">
    <xs:annotation>
      <xs:documentation>TimeSeriesDataStructureRequestType is a variation of a the DataStructureRequestType for querying purposes. The observation dimension is fixed to TIME_PERIOD</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="DataStructureRequestType">
        <xs:sequence>
          <xs:choice>
            <xs:element name="ProvisionAgrement" type="ProvisionAgreementReferenceType"/>
            <xs:element name="StructureUsage" type="DataflowReferenceType"/>
            <xs:element name="Structure" type="DataStructureReferenceType"/>
          </xs:choice>
        </xs:sequence>
        <xs:attribute name="dimensionAtObservation" type="ObservationDimensionType" use="required" fixed="TIME_PERIOD"/>
        <xs:attribute name="explicitMeasures" type="xs:boolean" use="optional" default="false"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="TimeSeriesGenericDataStructureRequestType">
    <xs:annotation>
      <xs:documentation>TimeSeriesGenericDataStructureRequestType is a variation of a the GenericDataStructureRequestType for querying purposes. The observation dimension is fixed to TIME_PERIOD.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="GenericDataStructureRequestType">
        <xs:sequence>
          <xs:choice>
            <xs:element name="ProvisionAgrement" type="ProvisionAgreementReferenceType"/>
            <xs:element name="StructureUsage" type="DataflowReferenceType"/>
            <xs:element name="Structure" type="DataStructureReferenceType"/>
          </xs:choice>
        </xs:sequence>
        <xs:attribute name="dimensionAtObservation" type="ObservationDimensionType" use="required" fixed="TIME_PERIOD"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="GenericDataStructureType">
    <xs:annotation>
      <xs:documentation>GenericDataStructureType defines the structural information for a generic data set. A reference to the structure, either explicitly or through a dataflow or provision agreement is required as well as the dimension which occurs at the observation level.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="DataStructureType">
        <xs:sequence>
          <xs:choice>
            <xs:element name="ProvisionAgrement" type="ProvisionAgreementReferenceType"/>
            <xs:element name="StructureUsage" type="DataflowReferenceType"/>
            <xs:element name="Structure" type="DataStructureReferenceType"/>
          </xs:choice>
        </xs:sequence>
        <xs:attribute name="schemaURL" type="xs:anyURI" use="prohibited"/>
        <xs:attribute name="namespace" type="xs:anyURI" use="prohibited"/>
        <xs:attribute name="dimensionAtObservation" type="ObservationDimensionType" use="required"/>
        <xs:attribute name="explicitMeasures" type="xs:boolean" use="prohibited"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="GenericTimeSeriesDataStructureType">
    <xs:annotation>
      <xs:documentation>GenericTimeSeriesDataStructureType defines the structural information for a generic time series based data set. The dimension at the observation level is fixed to be TIME_PERIOD.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="GenericDataStructureType">
        <xs:sequence>
          <xs:choice>
            <xs:element name="ProvisionAgrement" type="ProvisionAgreementReferenceType"/>
            <xs:element name="StructureUsage" type="DataflowReferenceType"/>
            <xs:element name="Structure" type="DataStructureReferenceType"/>
          </xs:choice>
        </xs:sequence>
        <xs:attribute name="dimensionAtObservation" type="ObservationDimensionType" use="required" fixed="TIME_PERIOD"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="StructureSpecificDataStructureType">
    <xs:annotation>
      <xs:documentation>StructureSpecificDataStructureType defines the structural information for a structured data set. In addition to referencing the data structure or dataflow which defines the structure of the data, the namespace for the data structure specific schema as well as which dimension is used at the observation level must be provided. It is also necessary to state whether the format uses explicit measures, although this is technically only applicable is the dimension at the observation level is the measure dimension or the flat data format is used.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="DataStructureType">
        <xs:sequence>
          <xs:choice>
            <xs:element name="ProvisionAgrement" type="ProvisionAgreementReferenceType"/>
            <xs:element name="StructureUsage" type="DataflowReferenceType"/>
            <xs:element name="Structure" type="DataStructureReferenceType"/>
          </xs:choice>
        </xs:sequence>
        <xs:attribute name="namespace" type="xs:anyURI" use="required"/>
        <xs:attribute name="dimensionAtObservation" type="ObservationDimensionType" use="required"/>
        <xs:attribute name="explicitMeasures" type="xs:boolean" default="false"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="StructureSpecificDataTimeSeriesStructureType">
    <xs:annotation>
      <xs:documentation>StructureSpecificDataTimeSeriesStructureType defines the structural information for a structure definition specific time series data set. The dimension at the observation level is fixed to be TIME_PERIOD.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="StructureSpecificDataStructureType">
        <xs:sequence>
          <xs:choice>
            <xs:element name="ProvisionAgrement" type="ProvisionAgreementReferenceType"/>
            <xs:element name="StructureUsage" type="DataflowReferenceType"/>
            <xs:element name="Structure" type="DataStructureReferenceType"/>
          </xs:choice>
        </xs:sequence>
        <xs:attribute name="namespace" type="xs:anyURI" use="required"/>
        <xs:attribute name="dimensionAtObservation" type="ObservationDimensionType" use="required" fixed="TIME_PERIOD"/>
        <xs:attribute name="explicitMeasures" type="xs:boolean" use="prohibited"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="MetadataStructureType" abstract="true">
    <xs:annotation>
      <xs:documentation>MetadataStructureType is an abstract base type the forms the basis of the structural information for any metadata message. A reference to the metadata structure definition or a metadataflow must be provided. This can be used to determine the structure of the message.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="PayloadStructureType">
        <xs:sequence>
          <xs:choice>
            <xs:element name="ProvisionAgrement" type="ProvisionAgreementReferenceType">
              <xs:annotation>
                <xs:documentation>ProvisionAgreement references a provision agreement which the metadata is reported against.</xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="StructureUsage" type="MetadataflowReferenceType">
              <xs:annotation>
                <xs:documentation>StructureUsage references a metadataflow which the metadata is reported against.</xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="Structure" type="MetadataStructureReferenceType">
              <xs:annotation>
                <xs:documentation>Structure references the metadata structure definition which defines the structure of the metadata.</xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:choice>
        </xs:sequence>
        <xs:attribute name="dimensionAtObservation" type="ObservationDimensionType" use="prohibited"/>
        <xs:attribute name="explicitMeasures" type="xs:boolean" use="prohibited"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="StructureSpecificMetadataStructureType">
    <xs:annotation>
      <xs:documentation>StructureSpecificMetadataStructureType defines the structural information for a structured metadata message.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="MetadataStructureType">
        <xs:sequence>
          <xs:choice>
            <xs:element name="ProvisionAgrement" type="ProvisionAgreementReferenceType"/>
            <xs:element name="StructureUsage" type="MetadataflowReferenceType"/>
            <xs:element name="Structure" type="MetadataStructureReferenceType"/>
          </xs:choice>
        </xs:sequence>
        <xs:attribute name="namespace" type="xs:anyURI" use="required"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>


  <xs:complexType name="GenericMetadataStructureType">
    <xs:annotation>
      <xs:documentation>GenericMetadataStructureType defines the structural information for a generic metadata message.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="MetadataStructureType">
        <xs:sequence>
          <xs:choice>
            <xs:element name="ProvisionAgrement" type="ProvisionAgreementReferenceType"/>
            <xs:element name="StructureUsage" type="MetadataflowReferenceType"/>
            <xs:element name="Structure" type="MetadataStructureReferenceType"/>
          </xs:choice>
        </xs:sequence>
        <xs:attribute name="namespace" type="xs:anyURI" use="prohibited"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:simpleType name="ObservationDimensionType">
    <xs:annotation>
      <xs:documentation>ObservationDimensionType allows for the dimension at the observation level to be specified by either providing the dimension identifier or using the explicit value "AllDimensions".</xs:documentation>
    </xs:annotation>
    <xs:union memberTypes="NCNameIDType ObsDimensionsCodeType"/>
  </xs:simpleType>

  <xs:simpleType name="ObsDimensionsCodeType">
    <xs:annotation>
      <xs:documentation>ObsDimensionsCodeType is an enumeration containing the values "TimeDimension" and "AllDimensions"</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="AllDimensions">
        <xs:annotation>
          <xs:documentation>AllDimensions notes that the cross sectional format shall be flat; that is all dimensions should be contained at the observation level.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="TIME_PERIOD">
        <xs:annotation>
          <xs:documentation>TIME_PERIOD refers to the fixed identifier for the time dimension.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>

  <xs:simpleType name="DataType">
    <xs:annotation>
      <xs:documentation>DataTypeType provides an enumerated list of the types of data formats allowed as the for the representation of an object.</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:NMTOKEN">
      <xs:enumeration value="String">
        <xs:annotation>
          <xs:documentation>A string datatype corresponding to W3C XML Schema's xs:string datatype.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="Alpha">
        <xs:annotation>
          <xs:documentation>A string datatype which only allows for the simple aplhabetic charcter set of A-z.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="AlphaNumeric">
        <xs:annotation>
          <xs:documentation>A string datatype which only allows for the simple alphabetic character set of A-z plus the simple numeric character set of 0-9.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="Numeric">
        <xs:annotation>
          <xs:documentation>A string datatype which only allows for the simple numeric character set of 0-9. This format is not treated as an integer, and therefore can having leading zeros.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="BigInteger">
        <xs:annotation>
          <xs:documentation>An integer datatype corresponding to W3C XML Schema's xs:integer datatype.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="Integer">
        <xs:annotation>
          <xs:documentation>An integer datatype corresponding to W3C XML Schema's xs:int datatype.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="Long">
        <xs:annotation>
          <xs:documentation>A numeric datatype corresponding to W3C XML Schema's xs:long datatype.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="Short">
        <xs:annotation>
          <xs:documentation>A numeric datatype corresponding to W3C XML Schema's xs:short datatype.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="Decimal">
        <xs:annotation>
          <xs:documentation>A numeric datatype corresponding to W3C XML Schema's xs:decimal datatype.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="Float">
        <xs:annotation>
          <xs:documentation>A numeric datatype corresponding to W3C XML Schema's xs:float datatype.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="Double">
        <xs:annotation>
          <xs:documentation>A numeric datatype corresponding to W3C XML Schema's xs:double datatype.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="Boolean">
        <xs:annotation>
          <xs:documentation>A datatype corresponding to W3C XML Schema's xs:boolean datatype.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="URI">
        <xs:annotation>
          <xs:documentation>A datatype corresponding to W3C XML Schema's xs:anyURI datatype.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="Count">
        <xs:annotation>
          <xs:documentation>A simple incrementing Integer type. The isSequence facet must be set to true, and the interval facet must be set to "1".</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="InclusiveValueRange">
        <xs:annotation>
          <xs:documentation>This value indicates that the startValue and endValue attributes provide the inclusive boundaries of a numeric range of type xs:decimal.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="ExclusiveValueRange">
        <xs:annotation>
          <xs:documentation>This value indicates that the startValue and endValue attributes provide the exclusive boundaries of a numeric range, of type xs:decimal.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="Incremental">
        <xs:annotation>
          <xs:documentation>This value indicates that the value increments according to the value provided in the interval facet, and has a true value for the isSequence facet.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="ObservationalTimePeriod">
        <xs:annotation>
          <xs:documentation>Observational time periods are the superset of all time periods in SDMX. It is the union of the standard time periods (i.e. Gregorian time periods, the reporting time periods, and date time) and a time range.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="StandardTimePeriod">
        <xs:annotation>
          <xs:documentation>Standard time periods is a superset of distinct time period in SDMX. It is the union of the basic time periods (i.e. the Gregorian time periods and date time) and the reporting time periods.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="BasicTimePeriod">
        <xs:annotation>
          <xs:documentation>BasicTimePeriod time periods is a superset of the Gregorian time periods and a date time.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="GregorianTimePeriod">
        <xs:annotation>
          <xs:documentation>Gregorian time periods correspond to calendar periods and are represented in ISO-8601 formats. This is the union of the year, year month, and date formats.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="GregorianYear">
        <xs:annotation>
          <xs:documentation>A Gregorian time period corresponding to W3C XML Schema's xs:gYear datatype, which is based on ISO-8601.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="GregorianYearMonth">
        <xs:annotation>
          <xs:documentation>A time datatype corresponding to W3C XML Schema's xs:gYearMonth datatype, which is based on ISO-8601.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="GregorianDay">
        <xs:annotation>
          <xs:documentation>A time datatype corresponding to W3C XML Schema's xs:date datatype, which is based on ISO-8601.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="ReportingTimePeriod">
        <xs:annotation>
          <xs:documentation>Reporting time periods represent periods of a standard length within a reporting year, where to start of the year (defined as a month and day) must be defined elsewhere or it is assumed to be January 1. This is the union of the reporting year, semester, trimester, quarter, month, week, and day.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="ReportingYear">
        <xs:annotation>
          <xs:documentation>A reporting year represents a period of 1 year (P1Y) from the start date of the reporting year. This is expressed as using the SDMX specific ReportingYearType.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="ReportingSemester">
        <xs:annotation>
          <xs:documentation>A reporting semester represents a period of 6 months (P6M) from the start date of the reporting year. This is expressed as using the SDMX specific ReportingSemesterType.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="ReportingTrimester">
        <xs:annotation>
          <xs:documentation>A reporting trimester represents a period of 4 months (P4M) from the start date of the reporting year. This is expressed as using the SDMX specific ReportingTrimesterType.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="ReportingQuarter">
        <xs:annotation>
          <xs:documentation>A reporting quarter represents a period of 3 months (P3M) from the start date of the reporting year. This is expressed as using the SDMX specific ReportingQuarterType.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="ReportingMonth">
        <xs:annotation>
          <xs:documentation>A reporting month represents a period of 1 month (P1M) from the start date of the reporting year. This is expressed as using the SDMX specific ReportingMonthType.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="ReportingWeek">
        <xs:annotation>
          <xs:documentation>A reporting week represents a period of 7 days (P7D) from the start date of the reporting year. This is expressed as using the SDMX specific ReportingWeekType.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="ReportingDay">
        <xs:annotation>
          <xs:documentation>A reporting day represents a period of 1 day (P1D) from the start date of the reporting year. This is expressed as using the SDMX specific ReportingDayType.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="DateTime">
        <xs:annotation>
          <xs:documentation>A time datatype corresponding to W3C XML Schema's xs:dateTime datatype.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="TimeRange">
        <xs:annotation>
          <xs:documentation>TimeRange defines a time period by providing a distinct start (date or date time) and a duration.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="Month">
        <xs:annotation>
          <xs:documentation>A time datatype corresponding to W3C XML Schema's xs:gMonth datatype.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="MonthDay">
        <xs:annotation>
          <xs:documentation>A time datatype corresponding to W3C XML Schema's xs:gMonthDay datatype.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="Day">
        <xs:annotation>
          <xs:documentation>A time datatype corresponding to W3C XML Schema's xs:gDay datatype.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="Time">
        <xs:annotation>
          <xs:documentation>A time datatype corresponding to W3C XML Schema's xs:time datatype.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="Duration">
        <xs:annotation>
          <xs:documentation>A time datatype corresponding to W3C XML Schema's xs:duration datatype.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="XHTML">
        <xs:annotation>
          <xs:documentation>This value indicates that the content of the component can contain XHTML markup.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="KeyValues">
        <xs:annotation>
          <xs:documentation>This value indicates that the content of the component will be data key (a set of dimension references and values for the dimensions).</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="IdentifiableReference">
        <xs:annotation>
          <xs:documentation>This value indicates that the content of the component will be complete reference (either URN or full set of reference fields) to an Identifiable object in the SDMX Information Model.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="DataSetReference">
        <xs:annotation>
          <xs:documentation>This value indicates that the content of the component will be reference to a data provider, which is actually a formal reference to a data provider and a data set identifier value.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="AttachmentConstraintReference">
        <xs:annotation>
          <xs:documentation>This value indicates that the content of the component will be reference to an attachment constraint, which is actually a combination of a collection of full or partial key values and a reference to a data set or data structure, usage, or provision agreement.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>

  <xs:simpleType name="BasicComponentDataType">
    <xs:annotation>
      <xs:documentation>BasicComponentDataType provides an enumerated list of the types of characters allowed in the textType attribute for all non-target object components.</xs:documentation>
    </xs:annotation>
    <xs:restriction base="DataType">
      <xs:enumeration value="String"/>
      <xs:enumeration value="Alpha"/>
      <xs:enumeration value="AlphaNumeric"/>
      <xs:enumeration value="Numeric"/>
      <xs:enumeration value="BigInteger"/>
      <xs:enumeration value="Integer"/>
      <xs:enumeration value="Long"/>
      <xs:enumeration value="Short"/>
      <xs:enumeration value="Decimal"/>
      <xs:enumeration value="Float"/>
      <xs:enumeration value="Double"/>
      <xs:enumeration value="Boolean"/>
      <xs:enumeration value="URI"/>
      <xs:enumeration value="Count"/>
      <xs:enumeration value="InclusiveValueRange"/>
      <xs:enumeration value="ExclusiveValueRange"/>
      <xs:enumeration value="Incremental"/>
      <xs:enumeration value="ObservationalTimePeriod"/>
      <xs:enumeration value="StandardTimePeriod"/>
      <xs:enumeration value="BasicTimePeriod"/>
      <xs:enumeration value="GregorianTimePeriod"/>
      <xs:enumeration value="GregorianYear"/>
      <xs:enumeration value="GregorianYearMonth"/>
      <xs:enumeration value="GregorianDay"/>
      <xs:enumeration value="ReportingTimePeriod"/>
      <xs:enumeration value="ReportingYear"/>
      <xs:enumeration value="ReportingSemester"/>
      <xs:enumeration value="ReportingTrimester"/>
      <xs:enumeration value="ReportingQuarter"/>
      <xs:enumeration value="ReportingMonth"/>
      <xs:enumeration value="ReportingWeek"/>
      <xs:enumeration value="ReportingDay"/>
      <xs:enumeration value="DateTime"/>
      <xs:enumeration value="TimeRange"/>
      <xs:enumeration value="Month"/>
      <xs:enumeration value="MonthDay"/>
      <xs:enumeration value="Day"/>
      <xs:enumeration value="Time"/>
      <xs:enumeration value="Duration"/>
      <xs:enumeration value="XHTML"/>
    </xs:restriction>
  </xs:simpleType>

  <xs:simpleType name="SimpleDataType">
    <xs:annotation>
      <xs:documentation>SimpleDataType restricts BasicComponentDataType to specify the allowable data types for a data structure definition component. The XHTML representation is removed as a possible type.</xs:documentation>
    </xs:annotation>
    <xs:restriction base="BasicComponentDataType">
      <xs:enumeration value="String"/>
      <xs:enumeration value="Alpha"/>
      <xs:enumeration value="AlphaNumeric"/>
      <xs:enumeration value="Numeric"/>
      <xs:enumeration value="BigInteger"/>
      <xs:enumeration value="Integer"/>
      <xs:enumeration value="Long"/>
      <xs:enumeration value="Short"/>
      <xs:enumeration value="Decimal"/>
      <xs:enumeration value="Float"/>
      <xs:enumeration value="Double"/>
      <xs:enumeration value="Boolean"/>
      <xs:enumeration value="URI"/>
      <xs:enumeration value="Count"/>
      <xs:enumeration value="InclusiveValueRange"/>
      <xs:enumeration value="ExclusiveValueRange"/>
      <xs:enumeration value="Incremental"/>
      <xs:enumeration value="ObservationalTimePeriod"/>
      <xs:enumeration value="StandardTimePeriod"/>
      <xs:enumeration value="BasicTimePeriod"/>
      <xs:enumeration value="GregorianTimePeriod"/>
      <xs:enumeration value="GregorianYear"/>
      <xs:enumeration value="GregorianYearMonth"/>
      <xs:enumeration value="GregorianDay"/>
      <xs:enumeration value="ReportingTimePeriod"/>
      <xs:enumeration value="ReportingYear"/>
      <xs:enumeration value="ReportingSemester"/>
      <xs:enumeration value="ReportingTrimester"/>
      <xs:enumeration value="ReportingQuarter"/>
      <xs:enumeration value="ReportingMonth"/>
      <xs:enumeration value="ReportingWeek"/>
      <xs:enumeration value="ReportingDay"/>
      <xs:enumeration value="DateTime"/>
      <xs:enumeration value="TimeRange"/>
      <xs:enumeration value="Month"/>
      <xs:enumeration value="MonthDay"/>
      <xs:enumeration value="Day"/>
      <xs:enumeration value="Time"/>
      <xs:enumeration value="Duration"/>
    </xs:restriction>
  </xs:simpleType>

  <xs:simpleType name="TimeDataType">
    <xs:annotation>
      <xs:documentation>TimeDataType restricts SimpleDataType to specify the allowable data types for representing a time value.</xs:documentation>
    </xs:annotation>
    <xs:restriction base="SimpleDataType">
      <xs:enumeration value="ObservationalTimePeriod"/>
      <xs:enumeration value="StandardTimePeriod"/>
      <xs:enumeration value="BasicTimePeriod"/>
      <xs:enumeration value="GregorianTimePeriod"/>
      <xs:enumeration value="GregorianYear"/>
      <xs:enumeration value="GregorianYearMonth"/>
      <xs:enumeration value="GregorianDay"/>
      <xs:enumeration value="ReportingTimePeriod"/>
      <xs:enumeration value="ReportingYear"/>
      <xs:enumeration value="ReportingSemester"/>
      <xs:enumeration value="ReportingTrimester"/>
      <xs:enumeration value="ReportingQuarter"/>
      <xs:enumeration value="ReportingMonth"/>
      <xs:enumeration value="ReportingWeek"/>
      <xs:enumeration value="ReportingDay"/>
      <xs:enumeration value="DateTime"/>
      <xs:enumeration value="TimeRange"/>
    </xs:restriction>
  </xs:simpleType>

  <xs:annotation>
    <xs:appinfo>SDMX Common References Module</xs:appinfo>
    <xs:documentation>The common references module contains common constructs that are used to reference objects.</xs:documentation>
  </xs:annotation>

  <!-- Identification and Reference Field Types -->

  <xs:simpleType name="NestedIDType">
    <xs:annotation>
      <xs:documentation>NestedIDType is the least restrictive form of an identifier used throughout all SDMX-ML messages. It allows for a hierarchical identifier, with each portion separated by the '.' character. For the identifier portions, valid characters include A-Z, a-z, @, 0-9, _, -, $.</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:pattern value="[A-z0-9_@$\-]+(\.[A-z0-9_@$\-]+)*"/>
    </xs:restriction>
  </xs:simpleType>

  <xs:simpleType name="TwoLevelIDType">
    <xs:annotation>
      <xs:documentation>TwoLevelIDType defines an identifier with exactly two levels.</xs:documentation>
    </xs:annotation>
    <xs:restriction base="NestedIDType">
      <xs:pattern value="[A-z0-9_@$\-]+\.[A-z0-9_@$\-]+"/>
    </xs:restriction>
  </xs:simpleType>

  <xs:simpleType name="IDType">
    <xs:annotation>
      <xs:documentation>IDType provides a type which is used for restricting the characters in codes and IDs throughout all SDMX-ML messages. Valid characters include A-Z, a-z, @, 0-9, _, -, $.</xs:documentation>
    </xs:annotation>
    <xs:restriction base="NestedIDType">
      <xs:pattern value="[A-z0-9_@$\-]+"/>
    </xs:restriction>
  </xs:simpleType>

  <xs:simpleType name="NCNameIDType">
    <xs:annotation>
      <xs:documentation>NCNameIDType restricts the IDType, so that the id may be used to generate valid XML components. IDs created from this type conform to the W3C XML Schema NCNAME type, and therefore can be used as element or attribute names.</xs:documentation>
    </xs:annotation>
    <xs:restriction base="IDType">
      <xs:pattern value="[A-z][A-z0-9_\-]*"/>
    </xs:restriction>
  </xs:simpleType>

  <xs:simpleType name="NestedNCNameIDType">
    <xs:annotation>
      <xs:documentation>NestedNCNameIDType restricts the NestedIDType, so that the id may be used to generate valid XML components. IDs created from this type conform to the W3C XML Schema NCNAME type, and therefore can be used as element or attribute names.</xs:documentation>
    </xs:annotation>
    <xs:restriction base="NestedIDType">
      <xs:pattern value="[A-z][A-z0-9_\-]*(\.[A-z][A-z0-9_\-]*)*"/>
    </xs:restriction>
  </xs:simpleType>

  <xs:simpleType name="SingleNCNameIDType">
    <xs:annotation>
      <xs:documentation>SingleNCNameIDType restricts the NestedNCNameIDType to allow only one level. Note that this is the same pattern as the NCNameIDType, but can be used when the base type to be restricted is a nested NCNameIDType (where as the NCNameIDType could only restrict the IDType).</xs:documentation>
    </xs:annotation>
    <xs:restriction base="NestedNCNameIDType">
      <xs:pattern value="[A-z][A-z0-9_\-]*"/>
    </xs:restriction>
  </xs:simpleType>

  <xs:simpleType name="VersionType">
    <xs:annotation>
      <xs:documentation>VersionType is used to communicate version information. The format is restricted to allow for simple incrementing and sorting of version number. The version consists of an unlimited set of numeric components, separated by the '.' character. When processing version, each numeric component (the number preceding and following any '.' character) should be parsed as an integer. Thus, a version of 1.3 and 1.03 would be equivalent, as both the '3' component and the '03' component would parse to an integer value of 3.</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:pattern value="[0-9]+(\.[0-9]+)*"/>
    </xs:restriction>
  </xs:simpleType>

  <xs:simpleType name="VersionQueryType">
    <xs:annotation>
      <xs:documentation>VersionQueryType combines the VersionType and LateBoundVersionType to allow one to query for either a specific version of an object, or the latest version by specifying the '*' value.</xs:documentation>
    </xs:annotation>
    <xs:union memberTypes="VersionType LateBoundVersionType"/>
  </xs:simpleType>

  <xs:simpleType name="LateBoundVersionType">
    <xs:annotation>
      <xs:documentation>LateBoundVersionType is a single value code list, used to include the '*' character - indicating that the latest version of an object is required.</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="*">
        <xs:annotation>
          <xs:documentation>Indicates that the latest version of an object is requested.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>

  <xs:complexType name="EmptyType">
    <xs:annotation>
      <xs:documentation>EmptyType is an empty complex type for elements where the presence of the tag indicates all that is necessary.</xs:documentation>
    </xs:annotation>
  </xs:complexType>

  <!-- Abstract Base Reference Types -->

  <xs:complexType name="ReferenceType" abstract="true">
    <xs:annotation>
      <xs:documentation>ReferenceType is an abstract base type. It is used as the basis for all references, to all for a top level generic object reference that can be substituted with an explicit reference to any object. Any reference can consist of a Ref (which contains all required reference fields separately) and/or a URN. These must result in the identification of the same object. Note that the Ref and URN elements are local and unqualified in order to allow for refinement of this structure outside of the namespace. This allows any reference to further refined by a different namespace. For example, a metadata structure definition specific metadata set might wish to restrict the URN to only allow for a value from an enumerated list. The general URN structure, for the purpose of mapping the reference fields is as follows: urn:sdmx:org.package-name.class-name=agency-id:(maintainable-parent-object-id[maintainable-parent-object-version].)?(container-object-id.)?object-id([object-version])?.</xs:documentation>
    </xs:annotation>
    <xs:choice>
      <xs:sequence>
        <xs:element name="Ref" type="RefBaseType" form="unqualified">
          <xs:annotation>
            <xs:documentation>Ref is used to provide a complete set of reference fields. Derived reference types will restrict the RefType so that the content of the Ref element requires exactly what is needed for a complete reference.</xs:documentation>
          </xs:annotation>
        </xs:element>
        <xs:element name="URN" type="xs:anyURI" form="unqualified" minOccurs="0">
          <xs:annotation>
            <xs:documentation>URN is used to hold the URN of the referenced object. This must be the same URN that would be constructed from the individual fields in the Ref element.</xs:documentation>
          </xs:annotation>
        </xs:element>
      </xs:sequence>
      <xs:element name="URN" type="xs:anyURI" form="unqualified">
        <xs:annotation>
          <xs:documentation>URN is used to hold the URN of the referenced object.</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:choice>
  </xs:complexType>

  <xs:complexType name="RefBaseType" abstract="true">
    <xs:annotation>
      <xs:documentation>RefBaseType is an abstract base type the defines the basis for any set of complete reference fields. This should be refined by derived types so that only the necessary fields are available and required as necessary. This can be used for both full and local references (when some of the values are implied from another context). A local reference is indicated with the local attribute. The values in this type correspond directly to the components of the URN structure, and thus can be used to compose a URN when the local attribute value is false. As this is the case, any reference components which are not part of the URN structure should not be present in the derived types.</xs:documentation>
    </xs:annotation>
    <xs:attribute name="agencyID" type="NestedNCNameIDType" use="optional">
      <xs:annotation>
        <xs:documentation>The agencyID attribute identifies the maintenance agency for the object being referenced (agency-id in the URN structure). This is optional to allow for local references (where the other reference fields are inferred from another context), but all complete references will require this.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="maintainableParentID" type="IDType" use="optional">
      <xs:annotation>
        <xs:documentation>The maintainableParentID attribute identifies the maintainable object in which the referenced object is defined, if applicable (maintainable-parent-object-id in the URN structure). This is only used in references where the referenced object is not itself maintainable.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="maintainableParentVersion" type="VersionType" use="optional">
      <xs:annotation>
        <xs:documentation>The maintainableParentVersion attribute identifies the version of the maintainable object in which the referenced object is defined (maintainable-parent-object-version in the URN structure). This is only used in references where the referenced object is not itself maintainable. This should only be used when the maintainableParentID is present. If this is available, a default of 1.0 will always apply.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="containerID" type="NestedIDType" use="optional">
      <xs:annotation>
        <xs:documentation>The containerID attribute identifies the object within a maintainable object in which the referenced object is defined (container-object-id in the URN structure). This is only used in references where the referenced object is not contained directly within a maintainable object (e.g. a Component within a ComponentList, within a maintainable Structure). If the container has a fixed identifier, this attribute will not be present.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="id" type="NestedIDType" use="required">
      <xs:annotation>
        <xs:documentation>The id attribute identifies the object being referenced, and is therefore always required.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="version" type="VersionType" use="optional">
      <xs:annotation>
        <xs:documentation>The version attribute identifies the version of the object being reference, if applicable. If this is available, a default value of 1.0 will always apply.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="local" type="xs:boolean" use="optional">
      <xs:annotation>
        <xs:documentation>The local attribute indicates whether this set of reference fields is meant for local referencing, in which case some of the reference fields will be implied from another context. Concrete instances of this class will always fix this value to either true or false, depending on their intended usage. If the value is fixed to true, then the complete set of reference fields will be required and a URN can be fully composed from the values.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="class" type="ObjectTypeCodelistType" use="optional">
      <xs:annotation>
        <xs:documentation>The class attribute indicates the class name of the object being referenced. This attribute allows any reference to be processed generically from this definition. References derived from this should fix the value of this attribute to indicate the type of object that is being referenced, or in the case that a reference which allows specific types of fields, the representation should be sub-setted to the appropriate values.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="package" type="PackageTypeCodelistType" use="optional">
      <xs:annotation>
        <xs:documentation>The package attribute indicates the package name for the object being referenced. This attribute allows any reference to be processed generically from this definition. References derived from this should fix the value of this attribute to indicate the type of object that is being referenced, or in the case that a reference which allows specific types of fields, the representation should be sub-setted to the appropriate values.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>

  <xs:complexType name="ObjectReferenceType">
    <xs:annotation>
      <xs:documentation>ObjectReferenceType is a generic reference which allows for any object to be referenced. The type of object actually referenced can be determined from the URN or from the class attribute of the full set of reference fields.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="ReferenceType">
        <xs:choice>
          <xs:sequence>
            <xs:element name="Ref" type="ObjectRefType" form="unqualified"/>
            <xs:element name="URN" type="xs:anyURI" form="unqualified" minOccurs="0"/>
          </xs:sequence>
          <xs:element name="URN" type="xs:anyURI" form="unqualified"/>
        </xs:choice>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="ObjectRefType">
    <xs:annotation>
      <xs:documentation>ObjectRefType contains a set of reference fields for the purpose of referencing any object. This cannot be a local reference, therefore the agency identifier is required. It is also required that the class and package be supplied for the referenced object such that a complete URN reference can be built from the values provided. Note that this is not capable of fully validating that all necessary fields are supplied for a given object type.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="RefBaseType">
        <xs:attribute name="agencyID" type="NestedNCNameIDType" use="required"/>
        <xs:attribute name="local" type="xs:boolean" use="optional" fixed="false"/>
        <xs:attribute name="class" type="ObjectTypeCodelistType" use="required"/>
        <xs:attribute name="package" type="PackageTypeCodelistType" use="required"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="MaintainableRefBaseType" abstract="true">
    <xs:annotation>
      <xs:documentation>MaintainableRefBaseType is an abstract base type for referencing a maintainable object.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="RefBaseType">
        <xs:attribute name="agencyID" type="NestedNCNameIDType" use="required"/>
        <xs:attribute name="maintainableParentID" type="IDType" use="prohibited"/>
        <xs:attribute name="maintainableParentVersion" type="VersionType" use="prohibited"/>
        <xs:attribute name="containerID" type="NestedIDType" use="prohibited"/>
        <xs:attribute name="id" type="IDType" use="required"/>
        <xs:attribute name="version" type="VersionType" use="optional" default="1.0"/>
        <xs:attribute name="local" type="xs:boolean" use="optional" fixed="false"/>
        <xs:attribute name="class" type="MaintainableTypeCodelistType" use="optional"/>
        <xs:attribute name="package" type="PackageTypeCodelistType" use="optional"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="MaintainableRefType">
    <xs:annotation>
      <xs:documentation>MaintainableRefType contains a complete set of reference fields for referencing any maintainable object.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="MaintainableRefBaseType">
        <xs:attribute name="class" type="ConcreteMaintainableTypeCodelistType" use="required"/>
        <xs:attribute name="package" type="PackageTypeCodelistType" use="required"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="ItemSchemeRefBaseType" abstract="true">
    <xs:annotation>
      <xs:documentation>ItemSchemeRefBaseType is an abstract base type for referencing an item scheme.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="MaintainableRefBaseType">
        <xs:attribute name="agencyID" type="NestedNCNameIDType" use="required"/>
        <xs:attribute name="id" type="IDType" use="required"/>
        <xs:attribute name="version" type="VersionType" use="optional" default="1.0"/>
        <xs:attribute name="local" type="xs:boolean" use="optional" fixed="false"/>
        <xs:attribute name="class" type="ItemSchemeTypeCodelistType" use="optional"/>
        <xs:attribute name="package" type="ItemSchemePackageTypeCodelistType" use="optional"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="ItemSchemeRefType">
    <xs:annotation>
      <xs:documentation>ItemSchemeRefType contains a complete set of reference fields for referencing any item scheme. The class and package a required so that the reference is explicit as to the exact object being referenced.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="ItemSchemeRefBaseType">
        <xs:attribute name="class" type="ItemSchemeTypeCodelistType" use="required"/>
        <xs:attribute name="package" type="ItemSchemePackageTypeCodelistType" use="required"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="StructureOrUsageRefBaseType" abstract="true">
    <xs:annotation>
      <xs:documentation>StructureOrUsageRefBaseType is an abstract base type for referencing a structure or structure usage.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="MaintainableRefBaseType">
        <xs:attribute name="agencyID" type="NestedNCNameIDType" use="required"/>
        <xs:attribute name="id" type="IDType" use="required"/>
        <xs:attribute name="version" type="VersionType" use="optional" default="1.0"/>
        <xs:attribute name="local" type="xs:boolean" use="optional" fixed="false"/>
        <xs:attribute name="class" type="StructureOrUsageTypeCodelistType" use="optional"/>
        <xs:attribute name="package" type="StructurePackageTypeCodelistType" use="optional"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="StructureRefBaseType" abstract="true">
    <xs:annotation>
      <xs:documentation>StructureRefBaseType is an abstract base type for referencing a structure.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="StructureOrUsageRefBaseType">
        <xs:attribute name="agencyID" type="NestedNCNameIDType" use="required"/>
        <xs:attribute name="id" type="IDType" use="required"/>
        <xs:attribute name="version" type="VersionType" use="optional" default="1.0"/>
        <xs:attribute name="local" type="xs:boolean" use="optional" fixed="false"/>
        <xs:attribute name="class" type="StructureTypeCodelistType" use="optional"/>
        <xs:attribute name="package" type="StructurePackageTypeCodelistType" use="optional"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="StructureRefType">
    <xs:annotation>
      <xs:documentation>StructureRefType contains a set of reference fields for referencing any structure.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="StructureRefBaseType">
        <xs:attribute name="class" type="StructureTypeCodelistType" use="required"/>
        <xs:attribute name="package" type="StructurePackageTypeCodelistType" use="required"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="StructureUsageRefBaseType" abstract="true">
    <xs:annotation>
      <xs:documentation>StructureUsageRefBaseType is an abstract base type for referencing a structure usage.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="StructureOrUsageRefBaseType">
        <xs:attribute name="agencyID" type="NestedNCNameIDType" use="required"/>
        <xs:attribute name="id" type="IDType" use="required"/>
        <xs:attribute name="version" type="VersionType" use="optional" default="1.0"/>
        <xs:attribute name="local" type="xs:boolean" use="optional" fixed="false"/>
        <xs:attribute name="class" type="StructureUsageTypeCodelistType" use="optional"/>
        <xs:attribute name="package" type="StructurePackageTypeCodelistType" use="optional"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="StructureUsageRefType">
    <xs:annotation>
      <xs:documentation>StructureUsageRefType contains a set of reference fields for referencing any structure usage.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="StructureUsageRefBaseType">
        <xs:attribute name="class" type="StructureUsageTypeCodelistType" use="required"/>
        <xs:attribute name="package" type="StructurePackageTypeCodelistType" use="required"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="ChildObjectRefBaseType" abstract="true">
    <xs:annotation>
      <xs:documentation>ChildObjectRefBaseType is an abstract base type for referencing any child object defined directly within a maintainable object.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="RefBaseType">
        <xs:attribute name="agencyID" type="NestedNCNameIDType" use="required"/>
        <xs:attribute name="maintainableParentID" type="IDType" use="required"/>
        <xs:attribute name="maintainableParentVersion" type="VersionType" use="optional" default="1.0"/>
        <xs:attribute name="containerID" type="NestedIDType" use="prohibited"/>
        <xs:attribute name="id" type="NestedIDType" use="required"/>
        <xs:attribute name="version" type="VersionType" use="prohibited"/>
        <xs:attribute name="local" type="xs:boolean" use="optional" fixed="false"/>
        <xs:attribute name="class" type="ObjectTypeCodelistType" use="optional"/>
        <xs:attribute name="package" type="PackageTypeCodelistType" use="optional"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="ContainerChildObjectRefBaseType" abstract="true">
    <xs:annotation>
      <xs:documentation>ContainerChildObjectRefBaseType is an abstract base type for referencing any child object within container defined in a maintainable object.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="RefBaseType">
        <xs:attribute name="agencyID" type="NestedNCNameIDType" use="required"/>
        <xs:attribute name="maintainableParentID" type="IDType" use="required"/>
        <xs:attribute name="maintainableParentVersion" type="VersionType" use="optional" default="1.0"/>
        <xs:attribute name="containerID" type="NestedIDType" use="optional"/>
        <xs:attribute name="id" type="NestedIDType" use="required"/>
        <xs:attribute name="local" type="xs:boolean" use="optional" fixed="false"/>
        <xs:attribute name="class" type="ObjectTypeCodelistType" use="optional"/>
        <xs:attribute name="package" type="PackageTypeCodelistType" use="optional"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="ItemRefBaseType" abstract="true">
    <xs:annotation>
      <xs:documentation>ItemRefBaseType is an abstract base type for referencing an item within an item scheme.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="ChildObjectRefBaseType">
        <xs:attribute name="agencyID" type="NestedNCNameIDType" use="required"/>
        <xs:attribute name="maintainableParentID" type="IDType" use="required">
          <xs:annotation>
            <xs:documentation>The maintainableParentID references the item scheme in which the item being referenced is defined.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="maintainableParentVersion" type="VersionType" use="optional" default="1.0">
          <xs:annotation>
            <xs:documentation>The maintainableParentVersion attribute references the version of the item scheme in which the item being referenced is defined. If not supplied, a default value of 1.0 is assumed.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="id" type="NestedIDType" use="required"/>
        <xs:attribute name="local" type="xs:boolean" use="optional" fixed="false"/>
        <xs:attribute name="class" type="ItemTypeCodelistType" use="optional"/>
        <xs:attribute name="package" type="ItemSchemePackageTypeCodelistType" use="optional"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="ComponentListRefBaseType" abstract="true">
    <xs:annotation>
      <xs:documentation>ComponentListRefBaseType is an abstract base type for referencing a component list within a structure.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="ChildObjectRefBaseType">
        <xs:attribute name="agencyID" type="NestedNCNameIDType" use="required"/>
        <xs:attribute name="maintainableParentID" type="IDType" use="required">
          <xs:annotation>
            <xs:documentation>The maintainableParentID references the structure in which the component list being referenced is defined.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="maintainableParentVersion" type="VersionType" use="optional" default="1.0">
          <xs:annotation>
            <xs:documentation>The maintainableParentVersion attribute references the version of the structure in which the component list being referenced is defined. If not supplied, a default value of 1.0 is assumed.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="id" type="IDType" use="required"/>
        <xs:attribute name="local" type="xs:boolean" use="optional" fixed="false"/>
        <xs:attribute name="class" type="ComponentListTypeCodelistType" use="optional"/>
        <xs:attribute name="package" type="StructurePackageTypeCodelistType" use="optional"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="ComponentRefBaseType" abstract="true">
    <xs:annotation>
      <xs:documentation>ComponentRefBaseType is an abstract base type for referencing a component contained in a component list within a structure.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="ContainerChildObjectRefBaseType">
        <xs:attribute name="agencyID" type="NestedNCNameIDType" use="required"/>
        <xs:attribute name="maintainableParentID" type="IDType" use="required">
          <xs:annotation>
            <xs:documentation>The maintainableParentID references the structure in which the component being referenced is defined.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="maintainableParentVersion" type="VersionType" use="optional" default="1.0">
          <xs:annotation>
            <xs:documentation>The maintainableParentVersion attribute references the version of the structure in which the component being referenced is defined. If not supplied, a default value of 1.0 is assumed.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="containerID" type="NestedIDType" use="optional">
          <xs:annotation>
            <xs:documentation>The containerID attribute references the component list of that contains the component being referenced. It is optional for the cases where the component list has a fixed identifier. Specific implementations of this will prohibit or require this accordingly.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="id" type="NestedIDType" use="required"/>
        <xs:attribute name="local" type="xs:boolean" use="optional" fixed="false"/>
        <xs:attribute name="class" type="ComponentTypeCodelistType" use="optional"/>
        <xs:attribute name="package" type="StructurePackageTypeCodelistType" use="optional"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="AnyCodelistRefType">
    <xs:annotation>
      <xs:documentation>AnyCodelistRefType is a type for referencing any codelist object (either a codelist or a hierarchical codelist).</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="MaintainableRefBaseType">
        <xs:attribute name="class" type="CodelistTypeCodelistType" use="required"/>
        <xs:attribute name="package" type="PackageTypeCodelistType" use="optional" fixed="codelist"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="StructureOrUsageRefType">
    <xs:annotation>
      <xs:documentation>StructureOrUsageRefType is a type for referencing a structure or structure usage.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="StructureOrUsageRefBaseType">
        <xs:attribute name="class" type="StructureOrUsageTypeCodelistType" use="required"/>
        <xs:attribute name="package" type="StructurePackageTypeCodelistType" use="required"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="LocalIdentifiableRefBaseType" abstract="true">
    <xs:annotation>
      <xs:documentation>LocalIdentifiableRefBaseType is an abstract base type which provides a local reference to any identifiable object.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="RefBaseType">
        <xs:attribute name="agencyID" type="NestedNCNameIDType" use="prohibited"/>
        <xs:attribute name="maintainableParentID" type="IDType" use="prohibited"/>
        <xs:attribute name="maintainableParentVersion" type="VersionType" use="prohibited"/>
        <xs:attribute name="containerID" type="NestedIDType" use="optional"/>
        <xs:attribute name="id" type="NestedIDType" use="required"/>
        <xs:attribute name="version" type="VersionType" use="prohibited"/>
        <xs:attribute name="local" type="xs:boolean" use="optional" fixed="true"/>
        <xs:attribute name="class" type="ObjectTypeCodelistType" use="optional"/>
        <xs:attribute name="package" type="PackageTypeCodelistType" use="optional"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="LocalItemRefBaseType" abstract="true">
    <xs:annotation>
      <xs:documentation>LocalItemRefBaseType is an abstract base type which provides a local reference to a item object.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="LocalIdentifiableRefBaseType">
        <xs:attribute name="containerID" type="NestedIDType" use="prohibited"/>
        <xs:attribute name="id" type="NestedIDType" use="required"/>
        <xs:attribute name="class" type="ItemTypeCodelistType" use="optional"/>
        <xs:attribute name="package" type="ItemSchemePackageTypeCodelistType" use="optional"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="LocalComponentListRefBaseType" abstract="true">
    <xs:annotation>
      <xs:documentation>LocalComponentListRefBaseType is an abstract base type which provides a local reference to a component list object.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="LocalIdentifiableRefBaseType">
        <xs:attribute name="containerID" type="NestedIDType" use="prohibited"/>
        <xs:attribute name="class" type="ComponentListTypeCodelistType" use="optional"/>
        <xs:attribute name="package" type="StructurePackageTypeCodelistType" use="optional"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="LocalComponentListComponentRefBaseType" abstract="true">
    <xs:annotation>
      <xs:documentation>LocalComponentRefBaseType is an abstract base type which provides a local reference to a component object.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="LocalIdentifiableRefBaseType">
        <xs:attribute name="containerID" type="IDType" use="optional"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="LocalComponentListComponentRefType">
    <xs:annotation>
      <xs:documentation>LocalComponentListComponentRefType provides a local reference to any component object within a specific component list. References for both of these are required as well as an indication of which type of type of component is being referenced via the class attribute.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="LocalComponentListComponentRefBaseType">
        <xs:attribute name="containerID" type="IDType" use="required"/>
        <xs:attribute name="id" type="NestedIDType" use="required"/>
        <xs:attribute name="local" type="xs:boolean" use="optional" fixed="true"/>
        <xs:attribute name="class" type="ComponentTypeCodelistType" use="required"/>
        <xs:attribute name="package" type="StructurePackageTypeCodelistType" use="required"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="LocalComponentRefBaseType" abstract="true">
    <xs:annotation>
      <xs:documentation>LocalComponentRefBaseType is an abstract base type which provides a local reference to a component object.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="LocalComponentListComponentRefBaseType">
        <xs:attribute name="containerID" type="IDType" use="prohibited"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="LocalComponentRefType">
    <xs:annotation>
      <xs:documentation>LocalComponentRefType provides a local reference to any type component object.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="LocalComponentRefBaseType">
        <xs:attribute name="class" type="ComponentTypeCodelistType" use="required"/>
        <xs:attribute name="package" type="StructurePackageTypeCodelistType" use="required"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="AnyLocalCodeRefType">
    <xs:annotation>
      <xs:documentation>AnyLocalCodeRefType provides a local reference to any code object.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="RefBaseType">
        <xs:attribute name="agencyID" type="NestedNCNameIDType" use="prohibited"/>
        <xs:attribute name="maintainableParentID" type="IDType" use="prohibited"/>
        <xs:attribute name="maintainableParentVersion" type="VersionType" use="prohibited"/>
        <xs:attribute name="containerID" type="IDType" use="optional">
          <xs:annotation>
            <xs:documentation>The containerID attribute references the hierarchy which defines the hierarchical code in the case that this reference is for a hierarchical code.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="id" type="NestedIDType" use="required"/>
        <xs:attribute name="local" type="xs:boolean" use="optional" fixed="true"/>
        <xs:attribute name="class" type="CodeTypeCodelistType" use="optional"/>
        <xs:attribute name="package" type="PackageTypeCodelistType" use="optional" fixed="codelist"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <!-- Specific Reference Types -->

  <xs:complexType name="URNReferenceType">
    <xs:annotation>
      <xs:documentation>URNReferenceType is a type referencing any object via its URN. The exact type of object is not specified, although it can be determined from the URN value.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="ReferenceType">
        <xs:sequence>
          <xs:element name="URN" type="xs:anyURI" form="unqualified"/>
        </xs:sequence>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="MaintainableReferenceBaseType" abstract="true">
    <xs:annotation>
      <xs:documentation>MaintainableReferenceBaseType is an abstract base type for referencing a maintainable object. It consists of a URN and/or a complete set of reference fields; agency, id, and version.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="ReferenceType">
        <xs:choice>
          <xs:sequence>
            <xs:element name="Ref" type="MaintainableRefBaseType" form="unqualified"/>
            <xs:element name="URN" type="xs:anyURI" form="unqualified" minOccurs="0"/>
          </xs:sequence>
          <xs:element name="URN" type="xs:anyURI" form="unqualified"/>
        </xs:choice>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="MaintainableReferenceType">
    <xs:annotation>
      <xs:documentation>MaintainableReferenceType is a type for referencing any maintainable object. It consists of a URN and/or a complete set of reference fields; agency, id, and version.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="MaintainableReferenceBaseType">
        <xs:choice>
          <xs:sequence>
            <xs:element name="Ref" type="MaintainableRefType" form="unqualified"/>
            <xs:element name="URN" type="xs:anyURI" form="unqualified" minOccurs="0"/>
          </xs:sequence>
          <xs:element name="URN" type="xs:anyURI" form="unqualified"/>
        </xs:choice>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="LocalIdentifiableReferenceType" abstract="true">
    <xs:annotation>
      <xs:documentation>LocalIdentifiableReferenceType is an abstract base type for referencing an identifiable object locally, where the maintainable object in which it is defined is referenced in another context..</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="ReferenceType">
        <xs:sequence>
          <xs:element name="Ref" type="LocalIdentifiableRefBaseType" form="unqualified"/>
        </xs:sequence>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="StructureReferenceBaseType" abstract="true">
    <xs:annotation>
      <xs:documentation>StructureReferneceBaseType is a specific type of MaintainableReference that is used for referencing structure definitions. It consists of a URN and/or a complete set of reference fields; agency, id, and version.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="MaintainableReferenceBaseType">
        <xs:choice>
          <xs:sequence>
            <xs:element name="Ref" type="StructureRefBaseType" form="unqualified"/>
            <xs:element name="URN" type="xs:anyURI" form="unqualified" minOccurs="0"/>
          </xs:sequence>
          <xs:element name="URN" type="xs:anyURI" form="unqualified"/>
        </xs:choice>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="StructureReferenceType">
    <xs:annotation>
      <xs:documentation>StructureReferenceType is a specific type of MaintainableReference that is used for referencing any structure. It consists of a URN and/or a complete set of reference fields; agency, id, and version.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="StructureReferenceBaseType">
        <xs:choice>
          <xs:sequence>
            <xs:element name="Ref" type="StructureRefType" form="unqualified"/>
            <xs:element name="URN" type="xs:anyURI" form="unqualified" minOccurs="0"/>
          </xs:sequence>
          <xs:element name="URN" type="xs:anyURI" form="unqualified"/>
        </xs:choice>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="StructureUsageReferenceBaseType" abstract="true">
    <xs:annotation>
      <xs:documentation>StructureUsageReferenceBaseType is a specific type of MaintainableReference that is used for referencing structure usages. It consists of a URN and/or a complete set of reference fields; agency, id, and version.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="MaintainableReferenceBaseType">
        <xs:choice>
          <xs:sequence>
            <xs:element name="Ref" type="StructureUsageRefBaseType" form="unqualified"/>
            <xs:element name="URN" type="xs:anyURI" form="unqualified" minOccurs="0"/>
          </xs:sequence>
          <xs:element name="URN" type="xs:anyURI" form="unqualified"/>
        </xs:choice>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="StructureUsageReferenceType">
    <xs:annotation>
      <xs:documentation>StructureUsageReferenceType is a specific type of MaintainableReference that is used for referencing any structure usages. It consists of a URN and/or a complete set of reference fields; agency, id, and version.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="StructureUsageReferenceBaseType">
        <xs:choice>
          <xs:sequence>
            <xs:element name="Ref" type="StructureUsageRefType" form="unqualified"/>
            <xs:element name="URN" type="xs:anyURI" form="unqualified" minOccurs="0"/>
          </xs:sequence>
          <xs:element name="URN" type="xs:anyURI" form="unqualified"/>
        </xs:choice>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="ItemSchemeReferenceBaseType" abstract="true">
    <xs:annotation>
      <xs:documentation>ItemSchemeReferenceBaseType is a specific type of MaintainableReference that is used for referencing item schemes. It consists of a URN and/or a complete set of reference fields; agency, id, and version.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="MaintainableReferenceBaseType">
        <xs:choice>
          <xs:sequence>
            <xs:element name="Ref" type="ItemSchemeRefBaseType" form="unqualified"/>
            <xs:element name="URN" type="xs:anyURI" form="unqualified" minOccurs="0"/>
          </xs:sequence>
          <xs:element name="URN" type="xs:anyURI" form="unqualified"/>
        </xs:choice>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="ItemSchemeReferenceType">
    <xs:annotation>
      <xs:documentation>ItemSchemeReferenceType is a reference that is used for referencing any type of item scheme. It consists of a URN and/or a complete set of reference fields; agency, id, and version.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="ItemSchemeReferenceBaseType">
        <xs:choice>
          <xs:sequence>
            <xs:element name="Ref" type="ItemSchemeRefType" form="unqualified"/>
            <xs:element name="URN" type="xs:anyURI" form="unqualified" minOccurs="0"/>
          </xs:sequence>
          <xs:element name="URN" type="xs:anyURI" form="unqualified"/>
        </xs:choice>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="ChildObjectReferenceType" abstract="true">
    <xs:annotation>
      <xs:documentation>ChildObjectReferenceType is an abstract base type used for referencing a particular object defined directly within a maintainable object. It consists of a URN and/or a complete set of reference fields; agency, maintainable id (maintainableParentID), maintainable version (maintainableParentVersion), the object id (which can be nested), and optionally the object version (if applicable).</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="ReferenceType">
        <xs:choice>
          <xs:sequence>
            <xs:element name="Ref" type="ChildObjectRefBaseType" form="unqualified"/>
            <xs:element name="URN" type="xs:anyURI" form="unqualified" minOccurs="0"/>
          </xs:sequence>
          <xs:element name="URN" type="xs:anyURI" form="unqualified"/>
        </xs:choice>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="ContainerChildObjectReferenceType" abstract="true">
    <xs:annotation>
      <xs:documentation>ContainerChildObjectReferenceType is an abstract base type used for referencing a particular object defined in a container object within a maintainable object. It consists of a URN and/or a complete set of reference fields; agency, maintainable id (maintainableParentID), maintainable version (maintainableParentVersion), container id (which is optional in order to allow for containers with fixed values to be omitted), container version (if applicable), the object id (which can be nested), and optionally the object version (if applicable).</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="ReferenceType">
        <xs:choice>
          <xs:sequence>
            <xs:element name="Ref" type="ContainerChildObjectRefBaseType" form="unqualified"/>
            <xs:element name="URN" type="xs:anyURI" form="unqualified" minOccurs="0"/>
          </xs:sequence>
          <xs:element name="URN" type="xs:anyURI" form="unqualified"/>
        </xs:choice>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="ItemReferenceType" abstract="true">
    <xs:annotation>
      <xs:documentation>ItemReferenceType is an abstract base type used for referencing a particular item within an item scheme. Note that this reference also has the ability to reference items contained within other items inside of the item scheme. It consists of a URN and/or a complete set of reference fields; agency, scheme id (maintainableParentID), scheme version (maintainableParentVersion), and item id (which can be nested).</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="ChildObjectReferenceType">
        <xs:choice>
          <xs:sequence>
            <xs:element name="Ref" type="ItemRefBaseType" form="unqualified"/>
            <xs:element name="URN" type="xs:anyURI" form="unqualified" minOccurs="0"/>
          </xs:sequence>
          <xs:element name="URN" type="xs:anyURI" form="unqualified"/>
        </xs:choice>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="ComponentListReferenceType" abstract="true">
    <xs:annotation>
      <xs:documentation>ComponentListReferenceType is an abstract base type used for referencing component lists within a structure. It consists of a URN and/or a complete set of reference fields (structure agency, structure id, structure version, and component list id).</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="ChildObjectReferenceType">
        <xs:choice>
          <xs:sequence>
            <xs:element name="Ref" type="ComponentListRefBaseType" form="unqualified"/>
            <xs:element name="URN" type="xs:anyURI" form="unqualified" minOccurs="0"/>
          </xs:sequence>
          <xs:element name="URN" type="xs:anyURI" form="unqualified"/>
        </xs:choice>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="ComponentReferenceType" abstract="true">
    <xs:annotation>
      <xs:documentation>ComponentReferenceType is an abstract base type used for referencing components within a structure definition. It consists of a URN and/or a complete set of reference fields (structure agency, structure id, structure version, component list id, and component id).</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="ContainerChildObjectReferenceType">
        <xs:choice>
          <xs:sequence>
            <xs:element name="Ref" type="ComponentRefBaseType" form="unqualified"/>
            <xs:element name="URN" type="xs:anyURI" form="unqualified" minOccurs="0"/>
          </xs:sequence>
          <xs:element name="URN" type="xs:anyURI" form="unqualified"/>
        </xs:choice>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="LocalItemReferenceType" abstract="true">
    <xs:annotation>
      <xs:documentation>LocalItemReferenceType is an abstract base type which provides a simple reference to an item where the reference to the item scheme which defines it are provided in another context.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="ReferenceType">
        <xs:sequence>
          <xs:element name="Ref" type="LocalItemRefBaseType" form="unqualified"/>
        </xs:sequence>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="LocalComponentListReferenceType" abstract="true">
    <xs:annotation>
      <xs:documentation>LocalComponentListReferenceType is an abstract base type which provides a simple reference to a component list where the reference to the structure which defines it is provided in another context.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="ReferenceType">
        <xs:sequence>
          <xs:element name="Ref" type="LocalComponentListRefBaseType" form="unqualified"/>
        </xs:sequence>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="LocalComponentListComponentReferenceBaseType" abstract="true">
    <xs:annotation>
      <xs:documentation>LocalComponentListComponentReferenceBaseType is an abstract base type which provides a simple reference to any type of component in a specific component list where the reference to the structure which defines it are provided in another context, and the component list may or may not be defined in another context.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="ReferenceType">
        <xs:sequence>
          <xs:element name="Ref" type="LocalComponentListComponentRefBaseType" form="unqualified"/>
        </xs:sequence>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="LocalComponentListComponentReferenceType">
    <xs:annotation>
      <xs:documentation>LocalComponentListComponentReferenceType provides a simple reference to any type of component in a specific component list where the reference to the structure which defines it are provided in another context.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="LocalComponentListComponentReferenceBaseType">
        <xs:sequence>
          <xs:element name="Ref" type="LocalComponentListComponentRefType" form="unqualified"/>
        </xs:sequence>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="LocalComponentReferenceBaseType" abstract="true">
    <xs:annotation>
      <xs:documentation>LocalComponentReferenceBaseType is an abstract base type which provides a simple reference to a component where the references to the component list which contains it and the structure which defines it are provided in another context.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="LocalComponentListComponentReferenceBaseType">
        <xs:sequence>
          <xs:element name="Ref" type="LocalComponentRefBaseType" form="unqualified"/>
        </xs:sequence>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="LocalComponentReferenceType">
    <xs:annotation>
      <xs:documentation>LocalComponentReferenceType provides a simple reference to any type of component in a component list where the references to the component list and the structure which defines them are provided in another context.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="LocalComponentListComponentReferenceBaseType">
        <xs:sequence>
          <xs:element name="Ref" type="LocalComponentRefType" form="unqualified"/>
        </xs:sequence>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="StructureOrUsageReferenceType">
    <xs:annotation>
      <xs:documentation>StructureOrUsageReferenceType is a specific type of a reference for referencing either a structure or a structure usage. It consists of a URN and/or a complete set of reference fields; agency, id and version. If the complete set of reference fields is used, it is required that a class and package be provided so that the type of object referenced is clear.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="MaintainableReferenceBaseType">
        <xs:choice>
          <xs:sequence>
            <xs:element name="Ref" type="StructureOrUsageRefType" form="unqualified"/>
            <xs:element name="URN" type="xs:anyURI" form="unqualified" minOccurs="0"/>
          </xs:sequence>
          <xs:element name="URN" type="xs:anyURI" form="unqualified"/>
        </xs:choice>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <!-- Specific Object Reference Types -->

  <xs:complexType name="CategorisationReferenceType">
    <xs:annotation>
      <xs:documentation>CategorisationReferenceType is a type for referencing a categorisation object. It consists of a URN and/or a complete set of reference fields.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="MaintainableReferenceBaseType">
        <xs:choice>
          <xs:sequence>
            <xs:element name="Ref" type="CategorisationRefType" form="unqualified"/>
            <xs:element name="URN" type="xs:anyURI" form="unqualified" minOccurs="0"/>
          </xs:sequence>
          <xs:element name="URN" type="xs:anyURI" form="unqualified"/>
        </xs:choice>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="CategorisationRefType">
    <xs:annotation>
      <xs:documentation>CategorisationRefType provides a reference to a categorisation via a complete set of reference fields.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="MaintainableRefBaseType">
        <xs:attribute name="class" type="MaintainableTypeCodelistType" use="optional" fixed="Categorisation"/>
        <xs:attribute name="package" type="PackageTypeCodelistType" use="optional" fixed="categoryscheme"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="CategorySchemeReferenceType">
    <xs:annotation>
      <xs:documentation>CategorySchemeReferenceType is a type for referencing a category scheme object. It consists of a URN and/or a complete set of reference fields.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="ItemSchemeReferenceBaseType">
        <xs:choice>
          <xs:sequence>
            <xs:element name="Ref" type="CategorySchemeRefType" form="unqualified"/>
            <xs:element name="URN" type="xs:anyURI" form="unqualified" minOccurs="0"/>
          </xs:sequence>
          <xs:element name="URN" type="xs:anyURI" form="unqualified"/>
        </xs:choice>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="CategorySchemeRefType">
    <xs:annotation>
      <xs:documentation>CategorySchemeRefType provides a reference to a category scheme via a complete set of reference fields.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="ItemSchemeRefBaseType">
        <xs:attribute name="class" type="ItemSchemeTypeCodelistType" use="optional" fixed="CategoryScheme"/>
        <xs:attribute name="package" type="ItemSchemePackageTypeCodelistType" use="optional" fixed="categoryscheme"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="CategoryReferenceType">
    <xs:annotation>
      <xs:documentation>CategoryReferenceType is a type for referencing a category object. It consists of a URN and/or a complete set of reference fields.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="ItemReferenceType">
        <xs:choice>
          <xs:sequence>
            <xs:element name="Ref" type="CategoryRefType" form="unqualified"/>
            <xs:element name="URN" type="xs:anyURI" form="unqualified" minOccurs="0"/>
          </xs:sequence>
          <xs:element name="URN" type="xs:anyURI" form="unqualified"/>
        </xs:choice>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="CategoryRefType">
    <xs:annotation>
      <xs:documentation>CategoryRefType references a category from within a category scheme. Reference fields are required for both the scheme and the item.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="ItemRefBaseType">
        <xs:attribute name="maintainableParentID" type="IDType" use="required">
          <xs:annotation>
            <xs:documentation>The maintainableParentID references the category scheme in which the category being referenced is defined.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="maintainableParentVersion" type="VersionType" use="optional" default="1.0">
          <xs:annotation>
            <xs:documentation>The maintainableParentVersion attribute references the version of the category scheme in which the category being referenced is defined. If not supplied, a default value of 1.0 is assumed.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="class" type="ItemTypeCodelistType" use="optional" fixed="Category"/>
        <xs:attribute name="package" type="ItemSchemePackageTypeCodelistType" use="optional" fixed="categoryscheme"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="LocalCategoryReferenceType">
    <xs:annotation>
      <xs:documentation>LocalCategoryReferenceType provides a simple references to a category where the identification of the category scheme which defines it is contained in another context.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="LocalItemReferenceType">
        <xs:sequence>
          <xs:element name="Ref" type="LocalCategoryRefType" form="unqualified"/>
        </xs:sequence>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="LocalCategoryRefType">
    <xs:annotation>
      <xs:documentation>LocalCategoryRefType references a category locally where the references to the category scheme which defines it is provided elsewhere.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="LocalItemRefBaseType">
        <xs:attribute name="class" type="ItemTypeCodelistType" use="optional" fixed="Category"/>
        <xs:attribute name="package" type="ItemSchemePackageTypeCodelistType" use="optional" fixed="categoryscheme"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="CodelistReferenceType">
    <xs:annotation>
      <xs:documentation>CodelistReferenceType is a type for referencing a codelist object. It consists of a URN and/or a complete set of reference fields.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="ItemSchemeReferenceBaseType">
        <xs:choice>
          <xs:sequence>
            <xs:element name="Ref" type="CodelistRefType" form="unqualified"/>
            <xs:element name="URN" type="xs:anyURI" form="unqualified" minOccurs="0"/>
          </xs:sequence>
          <xs:element name="URN" type="xs:anyURI" form="unqualified"/>
        </xs:choice>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="CodelistRefType">
    <xs:annotation>
      <xs:documentation>CodelistRefType provides a reference to a codelist via a complete set of reference fields.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="ItemSchemeRefBaseType">
        <xs:attribute name="class" type="ItemSchemeTypeCodelistType" use="optional" fixed="Codelist"/>
        <xs:attribute name="package" type="ItemSchemePackageTypeCodelistType" use="optional" fixed="codelist"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="CodeReferenceType">
    <xs:annotation>
      <xs:documentation>CodeReferenceType is a type for referencing a code object. It consists of a URN and/or a complete set of reference fields.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="ItemReferenceType">
        <xs:choice>
          <xs:sequence>
            <xs:element name="Ref" type="CodeRefType" form="unqualified"/>
            <xs:element name="URN" type="xs:anyURI" form="unqualified" minOccurs="0"/>
          </xs:sequence>
          <xs:element name="URN" type="xs:anyURI" form="unqualified"/>
        </xs:choice>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="CodeRefType">
    <xs:annotation>
      <xs:documentation>CodeRefType references a code from within a codelist. Reference fields are required for both the scheme and the item.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="ItemRefBaseType">
        <xs:attribute name="maintainableParentID" type="IDType" use="required">
          <xs:annotation>
            <xs:documentation>The maintainableParentID references the codelist in which the code being referenced is defined.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="maintainableParentVersion" type="VersionType" use="optional" default="1.0">
          <xs:annotation>
            <xs:documentation>The maintainableParentVersion attribute references the version of the codelist in which the code being referenced is defined. If not supplied, a default value of 1.0 is assumed.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="id" type="IDType" use="required"/>
        <xs:attribute name="class" type="ItemTypeCodelistType" use="optional" fixed="Code"/>
        <xs:attribute name="package" type="ItemSchemePackageTypeCodelistType" use="optional" fixed="codelist"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="LocalCodeReferenceType">
    <xs:annotation>
      <xs:documentation>LocalCodeReferenceType provides a simple references to a code where the identification of the codelist which defines it is contained in another context.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="LocalItemReferenceType">
        <xs:sequence>
          <xs:element name="Ref" type="LocalCodeRefType" form="unqualified"/>
        </xs:sequence>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="LocalCodeRefType">
    <xs:annotation>
      <xs:documentation>LocalCodeRefType references a code locally where the references to the codelist which defines it is provided elsewhere.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="LocalItemRefBaseType">
        <xs:attribute name="id" type="IDType" use="required"/>
        <xs:attribute name="class" type="ItemTypeCodelistType" use="optional" fixed="Code"/>
        <xs:attribute name="package" type="ItemSchemePackageTypeCodelistType" use="optional" fixed="codelist"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="AnyCodelistReferenceType">
    <xs:annotation>
      <xs:documentation>AnyCodelistReferenceType is a specific type of a reference for referencing either a codelist or a hierarchical codelist usage. It consists of a URN and/or a complete set of reference fields; agency, id and version. If the complete set of reference fields is used, it is required that a class be provided so that the type of object referenced is clear.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="MaintainableReferenceBaseType">
        <xs:choice>
          <xs:sequence>
            <xs:element name="Ref" type="AnyCodelistRefType" form="unqualified"/>
            <xs:element name="URN" type="xs:anyURI" form="unqualified" minOccurs="0"/>
          </xs:sequence>
          <xs:element name="URN" type="xs:anyURI" form="unqualified"/>
        </xs:choice>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="AnyLocalCodeReferenceType">
    <xs:annotation>
      <xs:documentation>AnyLocalCodeReferenceType provides a simple references to any code or hierarchical code where the identification of the codelist or hierarchical codelist which defines it is contained in another context.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="ReferenceType">
        <xs:choice>
          <xs:sequence>
            <xs:element name="Ref" type="AnyLocalCodeRefType" form="unqualified"/>
            <xs:element name="URN" type="xs:anyURI" form="unqualified" minOccurs="0"/>
          </xs:sequence>
          <xs:element name="URN" type="xs:anyURI" form="unqualified"/>
        </xs:choice>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="ConceptSchemeReferenceType">
    <xs:annotation>
      <xs:documentation>ConceptSchemeReferenceType is a type for referencing a concept scheme object. It consists of a URN and/or a complete set of reference fields.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="ItemSchemeReferenceBaseType">
        <xs:choice>
          <xs:sequence>
            <xs:element name="Ref" type="ConceptSchemeRefType" form="unqualified"/>
            <xs:element name="URN" type="xs:anyURI" form="unqualified" minOccurs="0"/>
          </xs:sequence>
          <xs:element name="URN" type="xs:anyURI" form="unqualified"/>
        </xs:choice>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="ConceptSchemeRefType">
    <xs:annotation>
      <xs:documentation>ConceptSchemeRefType provides a reference to a concept scheme via a complete set of reference fields.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="ItemSchemeRefBaseType">
        <xs:attribute name="class" type="ItemSchemeTypeCodelistType" use="optional" fixed="ConceptScheme"/>
        <xs:attribute name="package" type="ItemSchemePackageTypeCodelistType" use="optional" fixed="conceptscheme"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="ConceptReferenceType">
    <xs:annotation>
      <xs:documentation>ConceptReferenceType is a type for referencing a concept object. It consists of a URN and/or a complete set of reference fields.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="ItemReferenceType">
        <xs:choice>
          <xs:sequence>
            <xs:element name="Ref" type="ConceptRefType" form="unqualified"/>
            <xs:element name="URN" type="xs:anyURI" form="unqualified" minOccurs="0"/>
          </xs:sequence>
          <xs:element name="URN" type="xs:anyURI" form="unqualified"/>
        </xs:choice>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="ConceptRefType">
    <xs:annotation>
      <xs:documentation>ConceptRefType references a concept from within a concept scheme. Reference fields are required for both the scheme and the item.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="ItemRefBaseType">
        <xs:attribute name="maintainableParentID" type="IDType" use="required">
          <xs:annotation>
            <xs:documentation>The maintainableParentID references the concept scheme in which the concept being referenced is defined.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="maintainableParentVersion" type="VersionType" use="optional" default="1.0">
          <xs:annotation>
            <xs:documentation>The maintainableParentVersion attribute references the version of the concept scheme in which the concept being referenced is defined. If not supplied, a default value of 1.0 is assumed.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="id" type="IDType" use="required"/>
        <xs:attribute name="class" type="ItemTypeCodelistType" use="optional" fixed="Concept"/>
        <xs:attribute name="package" type="ItemSchemePackageTypeCodelistType" use="optional" fixed="conceptscheme"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="LocalConceptReferenceType">
    <xs:annotation>
      <xs:documentation>LocalConceptReferenceType provides a simple references to a concept where the identification of the concept scheme which defines it is contained in another context.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="LocalItemReferenceType">
        <xs:sequence>
          <xs:element name="Ref" type="LocalConceptRefType" form="unqualified"/>
        </xs:sequence>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="LocalConceptRefType">
    <xs:annotation>
      <xs:documentation>LocalConceptRefType references a concept locally where the references to the concept scheme which defines it is provided elsewhere.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="LocalItemRefBaseType">
        <xs:attribute name="id" type="IDType" use="required"/>
        <xs:attribute name="class" type="ItemTypeCodelistType" use="optional" fixed="Concept"/>
        <xs:attribute name="package" type="ItemSchemePackageTypeCodelistType" use="optional" fixed="conceptscheme"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="OrganisationSchemeReferenceBaseType" abstract="true">
    <xs:annotation>
      <xs:documentation>OrganisationSchemeReferenceBaseType is a type for referencing a organisation scheme object. It consists of a URN and/or a complete set of reference fields.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="ItemSchemeReferenceBaseType">
        <xs:choice>
          <xs:sequence>
            <xs:element name="Ref" type="OrganisationSchemeRefBaseType" form="unqualified"/>
            <xs:element name="URN" type="xs:anyURI" form="unqualified" minOccurs="0"/>
          </xs:sequence>
          <xs:element name="URN" type="xs:anyURI" form="unqualified"/>
        </xs:choice>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="OrganisationSchemeRefBaseType" abstract="true">
    <xs:annotation>
      <xs:documentation>OrganisationSchemeRefBaseType contains a set of reference fields for an organisation scheme.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="ItemSchemeRefBaseType">
        <xs:attribute name="class" type="OrganisationSchemeTypeCodelistType" use="optional"/>
        <xs:attribute name="package" type="ItemSchemePackageTypeCodelistType" use="optional" fixed="base"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="OrganisationSchemeReferenceType">
    <xs:annotation>
      <xs:documentation>OrganisationSchemeReferenceType references an organisation scheme regardless of the specific type. It consists of a URN and/or a complete set of reference fields.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="OrganisationSchemeReferenceBaseType">
        <xs:choice>
          <xs:sequence>
            <xs:element name="Ref" type="OrganisationSchemeRefType" form="unqualified"/>
            <xs:element name="URN" type="xs:anyURI" form="unqualified" minOccurs="0"/>
          </xs:sequence>
          <xs:element name="URN" type="xs:anyURI" form="unqualified"/>
        </xs:choice>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="OrganisationSchemeRefType">
    <xs:annotation>
      <xs:documentation>OrganisationSchemeRefType provides a reference to an organisation scheme via a complete set of reference fields. It is required that the class (i.e. the type) of organisation scheme being referenced be specified.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="OrganisationSchemeRefBaseType">
        <xs:attribute name="class" type="OrganisationSchemeTypeCodelistType" use="required"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="OrganisationReferenceBaseType" abstract="true">
    <xs:annotation>
      <xs:documentation>OrganisationReferenceBaseType is a type for referencing any organisation object, regardless of its type. It consists of a URN and/or a complete set of reference fields.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="ItemReferenceType">
        <xs:choice>
          <xs:sequence>
            <xs:element name="Ref" type="OrganisationRefBaseType" form="unqualified"/>
            <xs:element name="URN" type="xs:anyURI" form="unqualified" minOccurs="0"/>
          </xs:sequence>
          <xs:element name="URN" type="xs:anyURI" form="unqualified"/>
        </xs:choice>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="OrganisationRefBaseType" abstract="true">
    <xs:annotation>
      <xs:documentation>OrganisationRefBaseType is an abstract base type which references an organisation from within a organisation scheme. Reference fields are required for both the scheme and the organisation.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="ItemRefBaseType">
        <xs:attribute name="maintainableParentID" type="IDType" use="required">
          <xs:annotation>
            <xs:documentation>The maintainableParentID references the organisation scheme in which the organisation being referenced is defined.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="maintainableParentVersion" type="VersionType" use="optional" default="1.0">
          <xs:annotation>
            <xs:documentation>The maintainableParentVersion attribute references the version of the organisation scheme in which the organisation being referenced is defined. If not supplied, a default value of 1.0 is assumed.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="id" type="IDType" use="required"/>
        <xs:attribute name="class" type="OrganisationTypeCodelistType" use="optional"/>
        <xs:attribute name="package" type="ItemSchemePackageTypeCodelistType" use="optional" fixed="base"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="OrganisationReferenceType">
    <xs:annotation>
      <xs:documentation>OrganisationReferenceType references an organisation regardless of the specific type. It consists of a URN and/or a complete set of reference fields.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="OrganisationReferenceBaseType">
        <xs:choice>
          <xs:sequence>
            <xs:element name="Ref" type="OrganisationRefBaseType" form="unqualified"/>
            <xs:element name="URN" type="xs:anyURI" form="unqualified" minOccurs="0"/>
          </xs:sequence>
          <xs:element name="URN" type="xs:anyURI" form="unqualified"/>
        </xs:choice>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="OrganisationRefType">
    <xs:annotation>
      <xs:documentation>OrganisationRefType provides a reference to any organisation via a complete set of reference fields. It is required that the class (i.e. the type) of organisation being referenced be specified.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="OrganisationRefBaseType">
        <xs:attribute name="class" type="OrganisationTypeCodelistType" use="required"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="LocalOrganisationReferenceBaseType" abstract="true">
    <xs:annotation>
      <xs:documentation>LocalOrganisationReferenceBaseType is an abstract base type which provides a simple references to an organisation, regardless of type, where the identification of the organisation scheme which defines it is contained in another context.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="LocalItemReferenceType">
        <xs:sequence>
          <xs:element name="Ref" type="LocalOrganisationRefBaseType" form="unqualified"/>
        </xs:sequence>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="LocalOrganisationRefBaseType" abstract="true">
    <xs:annotation>
      <xs:documentation>LocalOrganisationRefBaseType is an abstract base type that references an organisation locally where the reference to the organisation scheme which defines it is provided elsewhere.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="LocalItemRefBaseType">
        <xs:attribute name="id" type="IDType" use="required"/>
        <xs:attribute name="class" type="OrganisationTypeCodelistType" use="optional"/>
        <xs:attribute name="package" type="ItemSchemePackageTypeCodelistType" use="optional" fixed="base"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="LocalOrganisationReferenceType">
    <xs:annotation>
      <xs:documentation>LocalOrganisationReferenceType provides a simple reference to an organisation, regardless of type, where the identification of the organisation scheme which defines it is contained in another context.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="LocalOrganisationReferenceBaseType">
        <xs:sequence>
          <xs:element name="Ref" type="LocalOrganisationRefType" form="unqualified"/>
        </xs:sequence>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="LocalOrganisationRefType">
    <xs:annotation>
      <xs:documentation>LocalOrganisationRefType references an organisation locally where the reference to the organisation scheme which defines it is provided elsewhere. The reference requires that the class (i.e. the type) or the organisation being reference be provided.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="LocalOrganisationRefBaseType">
        <xs:attribute name="class" type="OrganisationTypeCodelistType" use="optional"/>
        <xs:attribute name="package" type="ItemSchemePackageTypeCodelistType" use="optional" fixed="base"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="OrganisationUnitSchemeReferenceType">
    <xs:annotation>
      <xs:documentation>OrganisationUnitSchemeReferenceType is a type for referencing an organisation unit scheme object. It consists of a URN and/or a complete set of reference fields.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="OrganisationSchemeReferenceBaseType">
        <xs:choice>
          <xs:sequence>
            <xs:element name="Ref" type="OrganisationUnitSchemeRefType" form="unqualified"/>
            <xs:element name="URN" type="xs:anyURI" form="unqualified" minOccurs="0"/>
          </xs:sequence>
          <xs:element name="URN" type="xs:anyURI" form="unqualified"/>
        </xs:choice>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="OrganisationUnitSchemeRefType">
    <xs:annotation>
      <xs:documentation>OrganisationUnitSchemeRefType contains a set of reference fields for an organisation unit scheme.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="OrganisationSchemeRefBaseType">
        <xs:attribute name="class" type="OrganisationSchemeTypeCodelistType" use="optional" fixed="OrganisationUnitScheme"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="OrganisationUnitReferenceType">
    <xs:annotation>
      <xs:documentation>OrganisationUnitReferenceType is a type for referencing an organisation unit. It consists of a URN and/or a complete set of reference fields.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="OrganisationReferenceBaseType">
        <xs:choice>
          <xs:sequence>
            <xs:element name="Ref" type="OrganisationUnitRefType" form="unqualified"/>
            <xs:element name="URN" type="xs:anyURI" form="unqualified" minOccurs="0"/>
          </xs:sequence>
          <xs:element name="URN" type="xs:anyURI" form="unqualified"/>
        </xs:choice>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="OrganisationUnitRefType">
    <xs:annotation>
      <xs:documentation>OrganisationUnitRefType contains a set of reference fields for referencing an organisation unit within an organisation unit scheme.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="OrganisationRefBaseType">
        <xs:attribute name="class" type="OrganisationTypeCodelistType" use="optional" fixed="OrganisationUnit"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="LocalOrganisationUnitReferenceType">
    <xs:annotation>
      <xs:documentation>LocalOrganisationUnitReferenceType provides a simple reference to an organisation unit, where the reference to the organisation unit scheme which defines it is provided in another context.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="LocalOrganisationReferenceBaseType">
        <xs:sequence>
          <xs:element name="Ref" type="LocalOrganisationUnitRefType" form="unqualified"/>
        </xs:sequence>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="LocalOrganisationUnitRefType">
    <xs:annotation>
      <xs:documentation>LocalOrganisationUnitRefType references an organisation unit locally where the reference to the organisation unit scheme which defines it is provided elsewhere.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="LocalOrganisationRefBaseType">
        <xs:attribute name="class" type="OrganisationTypeCodelistType" use="optional" fixed="OrganisationUnit"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="AgencySchemeReferenceType">
    <xs:annotation>
      <xs:documentation>AgencySchemeReferenceType is a type for referencing an agency scheme object. It consists of a URN and/or a complete set of reference fields.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="OrganisationSchemeReferenceBaseType">
        <xs:choice>
          <xs:sequence>
            <xs:element name="Ref" type="AgencySchemeRefType" form="unqualified"/>
            <xs:element name="URN" type="xs:anyURI" form="unqualified" minOccurs="0"/>
          </xs:sequence>
          <xs:element name="URN" type="xs:anyURI" form="unqualified"/>
        </xs:choice>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="AgencySchemeRefType">
    <xs:annotation>
      <xs:documentation>AgencySchemeRefType contains a set of reference fields for an agency scheme.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="OrganisationSchemeRefBaseType">
        <xs:attribute name="class" type="OrganisationSchemeTypeCodelistType" use="optional" fixed="AgencyScheme"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="AgencyReferenceType">
    <xs:annotation>
      <xs:documentation>AgencyReferenceType is a type for referencing an agency. It consists of a URN and/or a complete set of reference fields.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="OrganisationReferenceBaseType">
        <xs:choice>
          <xs:sequence>
            <xs:element name="Ref" type="AgencyRefType" form="unqualified"/>
            <xs:element name="URN" type="xs:anyURI" form="unqualified" minOccurs="0"/>
          </xs:sequence>
          <xs:element name="URN" type="xs:anyURI" form="unqualified"/>
        </xs:choice>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="AgencyRefType">
    <xs:annotation>
      <xs:documentation>AgencyRefType contains a set of reference fields for referencing an agency within an agency scheme.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="OrganisationRefBaseType">
        <xs:attribute name="class" type="OrganisationTypeCodelistType" use="optional" fixed="Agency"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="LocalAgencyReferenceType">
    <xs:annotation>
      <xs:documentation>LocalAgencyReferenceType provides a simple reference to an agency, where the reference to the agency scheme which defines it is provided in another context.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="LocalOrganisationReferenceBaseType">
        <xs:sequence>
          <xs:element name="Ref" type="LocalAgencyRefType" form="unqualified"/>
        </xs:sequence>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="LocalAgencyRefType">
    <xs:annotation>
      <xs:documentation>LocalAgencyRefType references an agency locally where the reference to the agency scheme which defines it is provided elsewhere.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="LocalOrganisationRefBaseType">
        <xs:attribute name="class" type="OrganisationTypeCodelistType" use="optional" fixed="Agency"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="DataConsumerSchemeReferenceType">
    <xs:annotation>
      <xs:documentation>DataConsumerSchemeReferenceType is a type for referencing a data consumer scheme object. It consists of a URN and/or a complete set of reference fields.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="OrganisationSchemeReferenceBaseType">
        <xs:choice>
          <xs:sequence>
            <xs:element name="Ref" type="DataConsumerSchemeRefType" form="unqualified"/>
            <xs:element name="URN" type="xs:anyURI" form="unqualified" minOccurs="0"/>
          </xs:sequence>
          <xs:element name="URN" type="xs:anyURI" form="unqualified"/>
        </xs:choice>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="DataConsumerSchemeRefType">
    <xs:annotation>
      <xs:documentation>DataConsumerSchemeRefType contains a set of reference fields for a data consumer scheme.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="OrganisationSchemeRefBaseType">
        <xs:attribute name="class" type="OrganisationSchemeTypeCodelistType" use="optional" fixed="DataConsumerScheme"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="DataConsumerReferenceType">
    <xs:annotation>
      <xs:documentation>DataConsumerReferenceType is a type for referencing a data consumer. It consists of a URN and/or a complete set of reference fields.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="OrganisationReferenceBaseType">
        <xs:choice>
          <xs:sequence>
            <xs:element name="Ref" type="DataConsumerRefType" form="unqualified"/>
            <xs:element name="URN" type="xs:anyURI" form="unqualified" minOccurs="0"/>
          </xs:sequence>
          <xs:element name="URN" type="xs:anyURI" form="unqualified"/>
        </xs:choice>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="DataConsumerRefType">
    <xs:annotation>
      <xs:documentation>DataConsumerRefType contains a set of reference fields for referencing a data consumer within a data consumer scheme.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="OrganisationRefBaseType">
        <xs:attribute name="class" type="OrganisationTypeCodelistType" use="optional" fixed="DataConsumer"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="LocalDataConsumerReferenceType">
    <xs:annotation>
      <xs:documentation>LocalDataConsumerReferenceType provides a simple reference to a data consumer, where the reference to the data consumer scheme which defines it is provided in another context.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="LocalOrganisationReferenceBaseType">
        <xs:sequence>
          <xs:element name="Ref" type="LocalDataConsumerRefType" form="unqualified"/>
        </xs:sequence>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="LocalDataConsumerRefType">
    <xs:annotation>
      <xs:documentation>LocalDataConsumerRefType references a data consumer locally where the reference to the data consumer scheme which defines it is provided elsewhere.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="LocalOrganisationRefBaseType">
        <xs:attribute name="class" type="OrganisationTypeCodelistType" use="optional" fixed="DataConsumer"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="DataProviderSchemeReferenceType">
    <xs:annotation>
      <xs:documentation>DataProviderSchemeReferenceType is a type for referencing a data provider scheme object. It consists of a URN and/or a complete set of reference fields.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="OrganisationSchemeReferenceBaseType">
        <xs:choice>
          <xs:sequence>
            <xs:element name="Ref" type="DataProviderSchemeRefType" form="unqualified"/>
            <xs:element name="URN" type="xs:anyURI" form="unqualified" minOccurs="0"/>
          </xs:sequence>
          <xs:element name="URN" type="xs:anyURI" form="unqualified"/>
        </xs:choice>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="DataProviderSchemeRefType">
    <xs:annotation>
      <xs:documentation>DataProviderSchemeRefType contains a set of reference fields for a data provider scheme.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="OrganisationSchemeRefBaseType">
        <xs:attribute name="class" type="OrganisationSchemeTypeCodelistType" use="optional" fixed="DataProviderScheme"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="DataProviderReferenceType">
    <xs:annotation>
      <xs:documentation>DataProviderReferenceType is a type for referencing a data provider. It consists of a URN and/or a complete set of reference fields.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="OrganisationReferenceBaseType">
        <xs:choice>
          <xs:sequence>
            <xs:element name="Ref" type="DataProviderRefType" form="unqualified"/>
            <xs:element name="URN" type="xs:anyURI" form="unqualified" minOccurs="0"/>
          </xs:sequence>
          <xs:element name="URN" type="xs:anyURI" form="unqualified"/>
        </xs:choice>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="DataProviderRefType">
    <xs:annotation>
      <xs:documentation>DataProviderRefType contains a set of reference fields for referencing a data provider within a data provider scheme.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="OrganisationRefBaseType">
        <xs:attribute name="class" type="OrganisationTypeCodelistType" use="optional" fixed="DataProvider"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="LocalDataProviderReferenceType">
    <xs:annotation>
      <xs:documentation>LocalDataProviderReferenceType provides a simple reference to a data provider, where the reference to the data provider scheme which defines it is provided in another context.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="LocalOrganisationReferenceBaseType">
        <xs:sequence>
          <xs:element name="Ref" type="LocalDataProviderRefType" form="unqualified"/>
        </xs:sequence>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="LocalDataProviderRefType">
    <xs:annotation>
      <xs:documentation>LocalDataProviderRefType references a data provider locally where the reference to the data provider scheme which defines it is provided elsewhere.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="LocalOrganisationRefBaseType">
        <xs:attribute name="class" type="OrganisationTypeCodelistType" use="optional" fixed="DataProvider"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="ReportingTaxonomyReferenceType">
    <xs:annotation>
      <xs:documentation>ReportingTaxonomyReferenceType is a type for referencing a reporting taxonomy object. It consists of a URN and/or a complete set of reference fields.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="ItemSchemeReferenceBaseType">
        <xs:choice>
          <xs:sequence>
            <xs:element name="Ref" type="ReportingTaxonomyRefType" form="unqualified"/>
            <xs:element name="URN" type="xs:anyURI" form="unqualified" minOccurs="0"/>
          </xs:sequence>
          <xs:element name="URN" type="xs:anyURI" form="unqualified"/>
        </xs:choice>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="ReportingTaxonomyRefType">
    <xs:annotation>
      <xs:documentation>ReportingTaxonomyRefType provides a reference to a reporting taxonomy via a complete set of reference fields.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="ItemSchemeRefBaseType">
        <xs:attribute name="class" type="ItemSchemeTypeCodelistType" use="optional" fixed="ReportingTaxonomy"/>
        <xs:attribute name="package" type="ItemSchemePackageTypeCodelistType" use="optional" fixed="categoryscheme"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="ReportingCategoryReferenceType">
    <xs:annotation>
      <xs:documentation>ReportingCategoryReferenceType is a type for referencing a reporting category object. It consists of a URN and/or a complete set of reference fields.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="ItemReferenceType">
        <xs:choice>
          <xs:sequence>
            <xs:element name="Ref" type="ReportCategoryRefType" form="unqualified"/>
            <xs:element name="URN" type="xs:anyURI" form="unqualified" minOccurs="0"/>
          </xs:sequence>
          <xs:element name="URN" type="xs:anyURI" form="unqualified"/>
        </xs:choice>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="ReportCategoryRefType">
    <xs:annotation>
      <xs:documentation>ReportCategoryRefType contains a set of fields for referencing a reporting category within a reporting taxonomy.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="ItemRefBaseType">
        <xs:attribute name="maintainableParentID" type="IDType" use="required">
          <xs:annotation>
            <xs:documentation>The maintainableParentID references the reporting taxonomy in which the reporting category being referenced is defined.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="maintainableParentVersion" type="VersionType" use="optional" default="1.0">
          <xs:annotation>
            <xs:documentation>The maintainableParentVersion attribute references the version of the reporting taxonomy in which the reporting category being referenced is defined. If not supplied, a default value of 1.0 is assumed.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="class" type="ItemTypeCodelistType" use="optional" fixed="ReportingCategory"/>
        <xs:attribute name="package" type="ItemSchemePackageTypeCodelistType" use="optional" fixed="categoryscheme"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="LocalReportingCategoryReferenceType">
    <xs:annotation>
      <xs:documentation>LocalReportingCategoryReferenceType provides a simple references to a reporting category where the identification of the reporting taxonomy which defines it is contained in another context.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="LocalItemReferenceType">
        <xs:sequence>
          <xs:element name="Ref" type="LocalReportingCategoryRefType" form="unqualified"/>
        </xs:sequence>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="LocalReportingCategoryRefType">
    <xs:annotation>
      <xs:documentation>LocalReportingCategoryRefType references a reporting category locally where the references to the reporting taxonomy which defines it is provided elsewhere.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="LocalItemRefBaseType">
        <xs:attribute name="class" type="ItemTypeCodelistType" use="optional" fixed="ReportingCategory"/>
        <xs:attribute name="package" type="ItemSchemePackageTypeCodelistType" use="optional" fixed="categoryscheme"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="HierarchicalCodelistReferenceType">
    <xs:annotation>
      <xs:documentation>HierarchicalCodelistReferenceType is a type for referencing a hierarchical codelist object. It consists of a URN and/or a complete set of reference fields.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="MaintainableReferenceBaseType">
        <xs:choice>
          <xs:sequence>
            <xs:element name="Ref" type="HierarchicalCodelistRefType" form="unqualified"/>
            <xs:element name="URN" type="xs:anyURI" form="unqualified" minOccurs="0"/>
          </xs:sequence>
          <xs:element name="URN" type="xs:anyURI" form="unqualified"/>
        </xs:choice>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="HierarchicalCodelistRefType">
    <xs:annotation>
      <xs:documentation>HierarchicalCodelistRefType contains a set of reference fields for a hierarchical codelist.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="MaintainableRefBaseType">
        <xs:attribute name="class" type="MaintainableTypeCodelistType" use="optional" fixed="HierarchicalCodelist"/>
        <xs:attribute name="package" type="ItemSchemePackageTypeCodelistType" use="optional" fixed="codelist"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="HierarchyReferenceType">
    <xs:annotation>
      <xs:documentation>HierarchyReferenceType is a type for referencing a hierarchy within a hierarchical codelist.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="ChildObjectReferenceType">
        <xs:choice>
          <xs:sequence>
            <xs:element name="Ref" type="HierarchyRefType" form="unqualified"/>
            <xs:element name="URN" type="xs:anyURI" form="unqualified" minOccurs="0"/>
          </xs:sequence>
          <xs:element name="URN" type="xs:anyURI" form="unqualified"/>
        </xs:choice>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="HierarchyRefType">
    <xs:annotation>
      <xs:documentation>HierarchyRefType is type which references a hierarchy from within a hierarchical codelist. Reference fields are required for both the hierarchy and the codelist.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="ChildObjectRefBaseType">
        <xs:attribute name="id" type="IDType" use="required"/>
        <xs:attribute name="class" type="ObjectTypeCodelistType" use="optional" fixed="Hierarchy"/>
        <xs:attribute name="package" type="PackageTypeCodelistType" use="optional" fixed="codelist"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="LevelReferenceType">
    <xs:annotation>
      <xs:documentation>LevelReferenceType is a type for referencing a level object. It consists of a URN and/or a complete set of reference fields.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="ChildObjectReferenceType">
        <xs:choice>
          <xs:sequence>
            <xs:element name="Ref" type="LevelRefType" form="unqualified"/>
            <xs:element name="URN" type="xs:anyURI" form="unqualified" minOccurs="0"/>
          </xs:sequence>
          <xs:element name="URN" type="xs:anyURI" form="unqualified"/>
        </xs:choice>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="LevelRefType">
    <xs:annotation>
      <xs:documentation>LevelRefType references a level from within a hierarchical codelist. Reference fields are required for both the level and the codelist.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="ChildObjectRefBaseType">
        <xs:attribute name="id" type="IDType" use="required"/>
        <xs:attribute name="class" type="ObjectTypeCodelistType" use="optional" fixed="Level"/>
        <xs:attribute name="package" type="PackageTypeCodelistType" use="optional" fixed="codelist"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="LocalLevelReferenceType">
    <xs:annotation>
      <xs:documentation>LocalLevelReferenceType is a type for referencing a level object where the reference to the hierarchical codelist and the hierarchy in which it is defined is provided in another context (e.g. is inferred from the hierarchy in which the reference is defined).</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="ReferenceType">
        <xs:sequence>
          <xs:element name="Ref" type="LocalLevelRefType" form="unqualified"/>
        </xs:sequence>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="LocalLevelRefType">
    <xs:annotation>
      <xs:documentation>LocalLevelRefType references a level object where the reference to the hierarchy in which it is contained and the hierarchical codelist which define it are provided in another context.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="LocalIdentifiableRefBaseType">
        <xs:attribute name="class" type="ObjectTypeCodelistType" use="optional" fixed="Level"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="HierarchicalCodeReferenceType">
    <xs:annotation>
      <xs:documentation>HierarchicalCodeReferenceType is a type for referencing a hierarchical code object. It consists of a URN and/or a complete set of reference fields.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="ContainerChildObjectReferenceType">
        <xs:choice>
          <xs:sequence>
            <xs:element name="Ref" type="HierarchicalCodeRefType" form="unqualified"/>
            <xs:element name="URN" type="xs:anyURI" form="unqualified" minOccurs="0"/>
          </xs:sequence>
          <xs:element name="URN" type="xs:anyURI" form="unqualified"/>
        </xs:choice>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="HierarchicalCodeRefType">
    <xs:annotation>
      <xs:documentation>HierarchicalCodeRefType references a code from within a hierarchical codelist. Reference fields are required for both the code and the codelist.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="ContainerChildObjectRefBaseType">
        <xs:attribute name="maintainableParentID" type="IDType" use="required">
          <xs:annotation>
            <xs:documentation>The maintainableParentID references the hierarchical codelist in which the code being referenced is defined.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="maintainableParentVersion" type="VersionType" use="optional" default="1.0">
          <xs:annotation>
            <xs:documentation>The maintainableParentVersion attribute references the version of the hierarchical codelist in which the code being referenced is defined. If not supplied, a default value of 1.0 is assumed.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="containerID" type="IDType" use="required">
          <xs:annotation>
            <xs:documentation>The containerID references the hierarchy which contains the code being referenced is defined.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="class" type="ObjectTypeCodelistType" use="optional" fixed="HierarchicalCode"/>
        <xs:attribute name="package" type="PackageTypeCodelistType" use="optional" fixed="codelist"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="ConstraintReferenceType">
    <xs:annotation>
      <xs:documentation>ConstraintReferenceType is a type for referencing a constraint object. It consists of a URN and/or a complete set of reference fields.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="MaintainableReferenceBaseType">
        <xs:choice>
          <xs:sequence>
            <xs:element name="Ref" type="ConstraintRefType" form="unqualified"/>
            <xs:element name="URN" type="xs:anyURI" form="unqualified" minOccurs="0"/>
          </xs:sequence>
          <xs:element name="URN" type="xs:anyURI" form="unqualified"/>
        </xs:choice>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="ConstraintRefType" abstract="true">
    <xs:annotation>
      <xs:documentation>ConstraintRefType contains a set of reference fields for a constraint.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="MaintainableRefBaseType">
        <xs:attribute name="class" type="ConstraintTypeCodelistType" use="optional"/>
        <xs:attribute name="package" type="PackageTypeCodelistType" use="optional" fixed="registry"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="AttachmentConstraintReferenceType">
    <xs:annotation>
      <xs:documentation>AttachmentConstraintReferenceType is a type for referencing a attachment constraint object. It consists of a URN and/or a complete set of reference fields.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="ConstraintReferenceType">
        <xs:choice>
          <xs:sequence>
            <xs:element name="Ref" type="AttachmentConstraintRefType" form="unqualified"/>
            <xs:element name="URN" type="xs:anyURI" form="unqualified" minOccurs="0"/>
          </xs:sequence>
          <xs:element name="URN" type="xs:anyURI" form="unqualified"/>
        </xs:choice>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="AttachmentConstraintRefType">
    <xs:annotation>
      <xs:documentation>AttachmentConstraintRefType contains a set of reference fields for an attachment constraint.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="ConstraintRefType">
        <xs:attribute name="class" type="ConstraintTypeCodelistType" use="optional" fixed="AttachmentConstraint"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="ContentConstraintReferenceType">
    <xs:annotation>
      <xs:documentation>ContentConstraintReferenceType is a type for referencing a content constraint object. It consists of a URN and/or a complete set of reference fields.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="ConstraintReferenceType">
        <xs:choice>
          <xs:sequence>
            <xs:element name="Ref" type="ContentConstraintRefType" form="unqualified"/>
            <xs:element name="URN" type="xs:anyURI" form="unqualified" minOccurs="0"/>
          </xs:sequence>
          <xs:element name="URN" type="xs:anyURI" form="unqualified"/>
        </xs:choice>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="ContentConstraintRefType">
    <xs:annotation>
      <xs:documentation>ContentConstraintRefType contains a set of reference fields for a content constraint.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="ConstraintRefType">
        <xs:attribute name="class" type="ConstraintTypeCodelistType" use="optional" fixed="ContentConstraint"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="DataflowReferenceType">
    <xs:annotation>
      <xs:documentation>DataflowReferenceType is a type for referencing a dataflow object. It consists of a URN and/or a complete set of reference fields.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="StructureUsageReferenceBaseType">
        <xs:choice>
          <xs:sequence>
            <xs:element name="Ref" type="DataflowRefType" form="unqualified"/>
            <xs:element name="URN" type="xs:anyURI" form="unqualified" minOccurs="0"/>
          </xs:sequence>
          <xs:element name="URN" type="xs:anyURI" form="unqualified"/>
        </xs:choice>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="DataflowRefType">
    <xs:annotation>
      <xs:documentation>DataflowRefType contains a set of reference fields for a data flow.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="StructureUsageRefBaseType">
        <xs:attribute name="class" type="StructureUsageTypeCodelistType" use="optional" fixed="Dataflow"/>
        <xs:attribute name="package" type="StructurePackageTypeCodelistType" use="optional" fixed="datastructure"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="MetadataflowReferenceType">
    <xs:annotation>
      <xs:documentation>MetadataflowReferenceType is a type for referencing a metadata flow object. It consists of a URN and/or a complete set of reference fields.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="StructureUsageReferenceBaseType">
        <xs:choice>
          <xs:sequence>
            <xs:element name="Ref" type="MetadataflowRefType" form="unqualified"/>
            <xs:element name="URN" type="xs:anyURI" form="unqualified" minOccurs="0"/>
          </xs:sequence>
          <xs:element name="URN" type="xs:anyURI" form="unqualified"/>
        </xs:choice>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="MetadataflowRefType">
    <xs:annotation>
      <xs:documentation>MetadataflowRefType contains a set of reference fields for a metadata flow.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="StructureUsageRefBaseType">
        <xs:attribute name="class" type="StructureUsageTypeCodelistType" use="optional" fixed="Metadataflow"/>
        <xs:attribute name="package" type="StructurePackageTypeCodelistType" use="optional" fixed="metadatastructure"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="DataStructureReferenceType">
    <xs:annotation>
      <xs:documentation>DataStructureReferenceType is a type for referencing a data structure definition object. It consists of a URN and/or a complete set of reference fields.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="StructureReferenceBaseType">
        <xs:choice>
          <xs:sequence>
            <xs:element name="Ref" type="DataStructureRefType" form="unqualified"/>
            <xs:element name="URN" type="xs:anyURI" form="unqualified" minOccurs="0"/>
          </xs:sequence>
          <xs:element name="URN" type="xs:anyURI" form="unqualified"/>
        </xs:choice>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="DataStructureRefType">
    <xs:annotation>
      <xs:documentation>DataStructureRefType contains a set of reference fields for a data structure definition.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="StructureRefBaseType">
        <xs:attribute name="class" type="StructureTypeCodelistType" use="optional" fixed="DataStructure"/>
        <xs:attribute name="package" type="StructurePackageTypeCodelistType" use="optional" fixed="datastructure"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="KeyDescriptorReferenceType">
    <xs:annotation>
      <xs:documentation>KeyDescriptorReferenceType is a type for referencing a key descriptor object. It consists of a URN and/or a complete set of reference fields.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="ComponentListReferenceType">
        <xs:choice>
          <xs:sequence>
            <xs:element name="Ref" type="KeyDescriptorRefType" form="unqualified"/>
            <xs:element name="URN" type="xs:anyURI" form="unqualified" minOccurs="0"/>
          </xs:sequence>
          <xs:element name="URN" type="xs:anyURI" form="unqualified"/>
        </xs:choice>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="KeyDescriptorRefType">
    <xs:annotation>
      <xs:documentation>KeyDescriptorRefType contains a reference to the key descriptor within a data structure definition.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="ComponentListRefBaseType">
        <xs:attribute name="id" type="IDType" use="required" fixed="DIMENSION_DESCRIPTOR"/>
        <xs:attribute name="class" type="ComponentListTypeCodelistType" use="optional" fixed="DimensionDescriptor"/>
        <xs:attribute name="package" type="StructurePackageTypeCodelistType" use="optional" fixed="datastructure"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="AttributeDescriptorReferenceType">
    <xs:annotation>
      <xs:documentation>AttributeDescriptorReferenceType is a type for referencing an attribute descriptor object. It consists of a URN and/or a complete set of reference fields.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="ComponentListReferenceType">
        <xs:choice>
          <xs:sequence>
            <xs:element name="Ref" type="AttributeDescriptorRefType" form="unqualified"/>
            <xs:element name="URN" type="xs:anyURI" form="unqualified" minOccurs="0"/>
          </xs:sequence>
          <xs:element name="URN" type="xs:anyURI" form="unqualified"/>
        </xs:choice>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="AttributeDescriptorRefType">
    <xs:annotation>
      <xs:documentation>AttributeDescriptorRefType contains a reference to the attribute descriptor within a data structure definition.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="ComponentListRefBaseType">
        <xs:attribute name="id" type="IDType" use="required" fixed="ATTRIBUTE_DESCRIPTOR"/>
        <xs:attribute name="class" type="ComponentListTypeCodelistType" use="optional" fixed="AttributeDescriptor"/>
        <xs:attribute name="package" type="StructurePackageTypeCodelistType" use="optional" fixed="datastructure"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="MeasureDescriptorReferenceType">
    <xs:annotation>
      <xs:documentation>MeasureDescriptorReferenceType is a type for referencing a measure descriptor object. It consists of a URN and/or a complete set of reference fields.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="ComponentListReferenceType">
        <xs:choice>
          <xs:sequence>
            <xs:element name="Ref" type="MeasureDescriptorRefType" form="unqualified"/>
            <xs:element name="URN" type="xs:anyURI" form="unqualified" minOccurs="0"/>
          </xs:sequence>
          <xs:element name="URN" type="xs:anyURI" form="unqualified"/>
        </xs:choice>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="MeasureDescriptorRefType">
    <xs:annotation>
      <xs:documentation>MeasureDescriptorRefType contains a reference to the measure descriptor within a data structure definition.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="ComponentListRefBaseType">
        <xs:attribute name="id" type="IDType" use="required" fixed="MEASURE_DESCRIPTOR"/>
        <xs:attribute name="class" type="ComponentListTypeCodelistType" use="optional" fixed="MeasureDescriptor"/>
        <xs:attribute name="package" type="StructurePackageTypeCodelistType" use="optional" fixed="datastructure"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="GroupKeyDescriptorReferenceType">
    <xs:annotation>
      <xs:documentation>GroupKeyDescriptorReferenceType is a type for referencing a group key descriptor object. It consists of a URN and/or a complete set of reference fields.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="ComponentListReferenceType">
        <xs:choice>
          <xs:sequence>
            <xs:element name="Ref" type="GroupKeyDescriptorRefType" form="unqualified"/>
            <xs:element name="URN" type="xs:anyURI" form="unqualified" minOccurs="0"/>
          </xs:sequence>
          <xs:element name="URN" type="xs:anyURI" form="unqualified"/>
        </xs:choice>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="GroupKeyDescriptorRefType">
    <xs:annotation>
      <xs:documentation>GroupKeyDescriptorRefType contains a reference to a group key descriptor within a data structure definition.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="ComponentListRefBaseType">
        <xs:attribute name="id" type="IDType" use="required"/>
        <xs:attribute name="class" type="ComponentListTypeCodelistType" use="optional" fixed="GroupDimensionDescriptor"/>
        <xs:attribute name="package" type="StructurePackageTypeCodelistType" use="optional" fixed="datastructure"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="LocalGroupKeyDescriptorReferenceType">
    <xs:annotation>
      <xs:documentation>LocalGroupKeyDescriptorReferenceType is a type for referencing a group key descriptor locally, where the reference to the data structure definition which defines it is provided in another context (for example the data structure definition in which the reference occurs).</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="LocalComponentListReferenceType">
        <xs:sequence>
          <xs:element name="Ref" type="LocalGroupKeyDescriptorRefType" form="unqualified"/>
        </xs:sequence>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="LocalGroupKeyDescriptorRefType">
    <xs:annotation>
      <xs:documentation>LocalGroupKeyDescriptorRefType contains a local reference to a group key descriptor.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="LocalComponentListRefBaseType">
        <xs:attribute name="class" type="ComponentListTypeCodelistType" use="optional" fixed="GroupDimensionDescriptor"/>
        <xs:attribute name="package" type="StructurePackageTypeCodelistType" use="optional" fixed="datastructure"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="DimensionReferenceType">
    <xs:annotation>
      <xs:documentation>DimensionReferenceType is a type for referencing a dimension object. It consists of a URN and/or a complete set of reference fields.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="ComponentReferenceType">
        <xs:choice>
          <xs:sequence>
            <xs:element name="Ref" type="DimensionRefType" form="unqualified"/>
            <xs:element name="URN" type="xs:anyURI" form="unqualified" minOccurs="0"/>
          </xs:sequence>
          <xs:element name="URN" type="xs:anyURI" form="unqualified"/>
        </xs:choice>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="DimensionRefType">
    <xs:annotation>
      <xs:documentation>DimensionRefType contains a reference to a dimension within a data structure definition. Note that since there is only one key descriptor, the container reference fields are prohibited.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="ComponentRefBaseType">
        <xs:attribute name="containerID" type="IDType" use="prohibited"/>
        <xs:attribute name="id" type="IDType" use="required"/>
        <xs:attribute name="class" type="DimensionTypeCodelistType" use="optional" fixed="Dimension"/>
        <xs:attribute name="package" type="StructurePackageTypeCodelistType" use="optional" fixed="datastructure"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="MeasureDimensionReferenceType">
    <xs:annotation>
      <xs:documentation>MeasureDimensionReferenceType is a type for referencing a measure dimension object. It consists of a URN and/or a complete set of reference fields.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="ComponentReferenceType">
        <xs:choice>
          <xs:sequence>
            <xs:element name="Ref" type="MeasureDimensionRefType" form="unqualified"/>
            <xs:element name="URN" type="xs:anyURI" form="unqualified" minOccurs="0"/>
          </xs:sequence>
          <xs:element name="URN" type="xs:anyURI" form="unqualified"/>
        </xs:choice>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="MeasureDimensionRefType">
    <xs:annotation>
      <xs:documentation>MeasureDimensionRefType contains a reference to the measure dimension within a data structure definition. Note that since there is only one key descriptor, the container reference fields are prohibited.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="ComponentRefBaseType">
        <xs:attribute name="containerID" type="IDType" use="prohibited"/>
        <xs:attribute name="id" type="IDType" use="required"/>
        <xs:attribute name="class" type="DimensionTypeCodelistType" use="optional" fixed="MeasureDimension"/>
        <xs:attribute name="package" type="StructurePackageTypeCodelistType" use="optional" fixed="datastructure"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="TimeDimensionReferenceType">
    <xs:annotation>
      <xs:documentation>TimeDimensionReferenceType is a type for referencing a time dimension object. It consists of a URN and/or a complete set of reference fields.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="ComponentReferenceType">
        <xs:choice>
          <xs:sequence>
            <xs:element name="Ref" type="TimeDimensionRefType" form="unqualified"/>
            <xs:element name="URN" type="xs:anyURI" form="unqualified" minOccurs="0"/>
          </xs:sequence>
          <xs:element name="URN" type="xs:anyURI" form="unqualified"/>
        </xs:choice>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="TimeDimensionRefType">
    <xs:annotation>
      <xs:documentation>TimeDimensionRefType contains a reference to the time dimension within a data structure definition. Note that since there is only one key descriptor, the container reference fields are prohibited.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="ComponentRefBaseType">
        <xs:attribute name="containerID" type="IDType" use="prohibited"/>
        <xs:attribute name="id" type="IDType" use="required" fixed="TIME_PERIOD"/>
        <xs:attribute name="class" type="DimensionTypeCodelistType" use="optional" fixed="TimeDimension"/>
        <xs:attribute name="package" type="StructurePackageTypeCodelistType" use="optional" fixed="datastructure"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="LocalDimensionReferenceType">
    <xs:annotation>
      <xs:documentation>LocalDimensionReferenceType is a type for referencing any type of dimension locally, where the reference to the data structure definition which defines the dimension is provided in another context (for example the data structure definition in which the reference occurs).</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="LocalComponentReferenceBaseType">
        <xs:sequence>
          <xs:element name="Ref" type="LocalDimensionRefType" form="unqualified"/>
        </xs:sequence>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="LocalDimensionRefType">
    <xs:annotation>
      <xs:documentation>LocalDimensionRefType contains the reference fields for referencing a dimension locally.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="LocalComponentRefBaseType">
        <xs:attribute name="id" type="IDType" use="required"/>
        <xs:attribute name="class" type="DimensionTypeCodelistType" use="optional" default="Dimension">
          <xs:annotation>
            <xs:documentation>The class attribute is optional and provided a default value of Dimension. It is strongly recommended that if the time or measure dimension is referenced, that the proper value be set for this field. However, this is not absolutely necessary since all data structure definition components must have a unique identifier within the scope of the entire data structure. It does, however, allow systems which will treat such a reference as a URN to easily construct the URN without having to verify the object class of the referenced dimension.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="package" type="StructurePackageTypeCodelistType" use="optional" fixed="datastructure"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="AttributeReferenceType">
    <xs:annotation>
      <xs:documentation>AttributeReferenceType is a type for referencing an attribute object. It consists of a URN and/or a complete set of reference fields.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="ComponentReferenceType">
        <xs:choice>
          <xs:sequence>
            <xs:element name="Ref" type="AttributeRefType" form="unqualified"/>
            <xs:element name="URN" type="xs:anyURI" form="unqualified" minOccurs="0"/>
          </xs:sequence>
          <xs:element name="URN" type="xs:anyURI" form="unqualified"/>
        </xs:choice>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="AttributeRefType">
    <xs:annotation>
      <xs:documentation>AttributeRefType contains a reference to an attribute within a data structure definition. Note that since there is only one attribute descriptor, the container reference fields are prohibited.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="ComponentRefBaseType">
        <xs:attribute name="containerID" type="IDType" use="prohibited"/>
        <xs:attribute name="id" type="IDType" use="required"/>
        <xs:attribute name="class" type="ComponentTypeCodelistType" use="optional" fixed="Attribute"/>
        <xs:attribute name="package" type="StructurePackageTypeCodelistType" use="optional" fixed="datastructure"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="PrimaryMeasureReferenceType">
    <xs:annotation>
      <xs:documentation>PrimaryMeasureReferenceType is a type for referencing a primary measure object. It consists of a URN and/or a complete set of reference fields.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="ComponentReferenceType">
        <xs:choice>
          <xs:sequence>
            <xs:element name="Ref" type="PrimaryMeasureRefType" form="unqualified"/>
            <xs:element name="URN" type="xs:anyURI" form="unqualified" minOccurs="0"/>
          </xs:sequence>
          <xs:element name="URN" type="xs:anyURI" form="unqualified"/>
        </xs:choice>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="PrimaryMeasureRefType">
    <xs:annotation>
      <xs:documentation>PrimaryMeasureRefType contains a reference to the primary measure within a data structure definition. Note that since there is only one key descriptor, the container reference fields are prohibited.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="ComponentRefBaseType">
        <xs:attribute name="containerID" type="IDType" use="prohibited"/>
        <xs:attribute name="id" type="IDType" use="required" fixed="OBS_VALUE"/>
        <xs:attribute name="class" type="ComponentTypeCodelistType" use="optional" fixed="PrimaryMeasure"/>
        <xs:attribute name="package" type="StructurePackageTypeCodelistType" use="optional" fixed="datastructure"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="LocalPrimaryMeasureReferenceType">
    <xs:annotation>
      <xs:documentation>LocalPrimaryMeasureReferenceType is a type for referencing a primary measure locally, where the reference to the data structure definition which defines the primary measure is provided in another context (for example the data structure definition in which the reference occurs).</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="LocalComponentReferenceBaseType">
        <xs:sequence>
          <xs:element name="Ref" type="LocalPrimaryMeasureRefType" form="unqualified"/>
        </xs:sequence>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="LocalPrimaryMeasureRefType">
    <xs:annotation>
      <xs:documentation>LocalPrimaryMeasureRefType contains the reference fields for referencing a primary measure locally.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="LocalComponentRefBaseType">
        <xs:attribute name="id" type="IDType" use="required" fixed="OBS_VALUE"/>
        <xs:attribute name="class" type="ComponentTypeCodelistType" use="optional" fixed="PrimaryMeasure"/>
        <xs:attribute name="package" type="StructurePackageTypeCodelistType" use="optional" fixed="datastructure"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>


  <xs:complexType name="LocalDataStructureComponentReferenceType">
    <xs:annotation>
      <xs:documentation>LocalDataStructureComponentReferenceType is a type for referencing any type of data structure component locally, where the reference for the data structure definition which defines the components is available in another context.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="LocalComponentListComponentReferenceBaseType">
        <xs:sequence>
          <xs:element name="Ref" type="LocalDataStructureComponentRefType" form="unqualified"/>
        </xs:sequence>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="LocalDataStructureComponentRefType">
    <xs:annotation>
      <xs:documentation>LocalDataStructureComponentRefType contains the reference fields for referencing any data structure component locally. This reference must specify the class of the component being referenced.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="LocalComponentListComponentRefBaseType">
        <xs:attribute name="containerID" type="IDType" use="prohibited"/>
        <xs:attribute name="id" type="IDType" use="required"/>
        <xs:attribute name="class" type="DataStructureComponentTypeCodelistType" use="required"/>
        <xs:attribute name="package" type="StructurePackageTypeCodelistType" use="optional" fixed="datastructure"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="DataStructureEnumerationSchemeReferenceType">
    <xs:annotation>
      <xs:documentation>DataStructureEnumerationSchemeReferenceType is a type for referencing any type of item scheme that is allowable as the enumeration of the representation of a data structure definition component. It consists of a URN and/or a complete set of reference fields.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="ItemSchemeReferenceType">
        <xs:choice>
          <xs:sequence>
            <xs:element name="Ref" type="DataStructureEnumerationSchemeRefType" form="unqualified"/>
            <xs:element name="URN" type="xs:anyURI" form="unqualified" minOccurs="0"/>
          </xs:sequence>
          <xs:element name="URN" type="xs:anyURI" form="unqualified"/>
        </xs:choice>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="DataStructureEnumerationSchemeRefType">
    <xs:annotation>
      <xs:documentation>DataStructureEnumerationSchemeRefType contains the reference fields for referencing any item scheme that is allowable as the enumeration of the representation of a data structure definition component.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="ItemSchemeRefType">
        <xs:attribute name="class" type="DimensionEumerationSchemeTypeCodelistType" use="required"/>
        <xs:attribute name="package" type="ItemSchemePackageTypeCodelistType" use="required"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="MetadataStructureReferenceType">
    <xs:annotation>
      <xs:documentation>MetadataStructureReferenceType is a type for referencing a metadata structure definition object. It consists of a URN and/or a complete set of reference fields.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="StructureReferenceBaseType">
        <xs:choice>
          <xs:sequence>
            <xs:element name="Ref" type="MetadataStructureRefType" form="unqualified"/>
            <xs:element name="URN" type="xs:anyURI" form="unqualified" minOccurs="0"/>
          </xs:sequence>
          <xs:element name="URN" type="xs:anyURI" form="unqualified"/>
        </xs:choice>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="MetadataStructureRefType">
    <xs:annotation>
      <xs:documentation>MetadataStructureRefType contains a set of reference fields for a metadata structure definition.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="StructureRefBaseType">
        <xs:attribute name="class" type="StructureTypeCodelistType" use="optional" fixed="MetadataStructure"/>
        <xs:attribute name="package" type="StructurePackageTypeCodelistType" use="optional" fixed="metadatastructure"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="MetadataTargetReferenceType">
    <xs:annotation>
      <xs:documentation>MetadataTargetReferenceType is a type for referencing a metadata target object. It consists of a URN and/or a complete set of reference fields.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="ComponentListReferenceType">
        <xs:choice>
          <xs:sequence>
            <xs:element name="Ref" type="MetadataTargetRefType" form="unqualified"/>
            <xs:element name="URN" type="xs:anyURI" form="unqualified" minOccurs="0"/>
          </xs:sequence>
          <xs:element name="URN" type="xs:anyURI" form="unqualified"/>
        </xs:choice>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="MetadataTargetRefType">
    <xs:annotation>
      <xs:documentation>MetadataTargetRefType contains a reference to a metadata target within a metadata structure definition.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="ComponentListRefBaseType">
        <xs:attribute name="id" type="IDType" use="required"/>
        <xs:attribute name="class" type="ComponentListTypeCodelistType" use="optional" fixed="MetadataTarget"/>
        <xs:attribute name="package" type="StructurePackageTypeCodelistType" use="optional" fixed="metadatastructure"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="LocalMetadataTargetReferenceType">
    <xs:annotation>
      <xs:documentation>LocalMetadataTargetReferenceType is a type for referencing a metadata target locally, where the reference to the metadata structure definition which defines it is provided in another context (for example the metadata structure definition in which the reference occurs).</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="LocalComponentListReferenceType">
        <xs:sequence>
          <xs:element name="Ref" type="LocalMetadataTargetRefType" form="unqualified"/>
        </xs:sequence>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="LocalMetadataTargetRefType">
    <xs:annotation>
      <xs:documentation>LocalMetadataTargetRefType contains a local reference to a metadata target object.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="LocalComponentListRefBaseType">
        <xs:attribute name="class" type="ComponentListTypeCodelistType" use="optional" fixed="MetadataTarget"/>
        <xs:attribute name="package" type="StructurePackageTypeCodelistType" use="optional" fixed="metadatastructure"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="ConstraintTargetReferenceType">
    <xs:annotation>
      <xs:documentation>ConstraintTargetReferenceType is a type for referencing a constraint target object. It consists of a URN and/or a complete set of reference fields.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="ComponentReferenceType">
        <xs:choice>
          <xs:sequence>
            <xs:element name="Ref" type="ConstraintTargetRefType" form="unqualified"/>
            <xs:element name="URN" type="xs:anyURI" form="unqualified" minOccurs="0"/>
          </xs:sequence>
          <xs:element name="URN" type="xs:anyURI" form="unqualified"/>
        </xs:choice>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="ConstraintTargetRefType">
    <xs:annotation>
      <xs:documentation>ConstraintTargetRefType contains a reference to a constraint target within a metadata target of a data structure definition.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="ComponentRefBaseType">
        <xs:attribute name="containerID" type="IDType" use="required"/>
        <xs:attribute name="id" type="IDType" use="required" fixed="CONSTRAINT_TARGET"/>
        <xs:attribute name="class" type="ComponentTypeCodelistType" use="optional" fixed="ConstraintTarget"/>
        <xs:attribute name="package" type="StructurePackageTypeCodelistType" use="optional" fixed="metadatastructure"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="DataSetTargetReferenceType">
    <xs:annotation>
      <xs:documentation>DataSetTargetReferenceType is a type for referencing a data set target object. It consists of a URN and/or a complete set of reference fields.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="ComponentReferenceType">
        <xs:choice>
          <xs:sequence>
            <xs:element name="Ref" type="DataSetTargetRefType" form="unqualified"/>
            <xs:element name="URN" type="xs:anyURI" form="unqualified" minOccurs="0"/>
          </xs:sequence>
          <xs:element name="URN" type="xs:anyURI" form="unqualified"/>
        </xs:choice>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="DataSetTargetRefType">
    <xs:annotation>
      <xs:documentation>DataSetTargetRefType contains a reference to a data set target within a metadata target of a data structure definition.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="ComponentRefBaseType">
        <xs:attribute name="containerID" type="IDType" use="required"/>
        <xs:attribute name="id" type="IDType" use="required" fixed="DATA_SET_TARGET"/>
        <xs:attribute name="class" type="ComponentTypeCodelistType" use="optional" fixed="DataSetTarget"/>
        <xs:attribute name="package" type="StructurePackageTypeCodelistType" use="optional" fixed="metadatastructure"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="KeyDescriptorValuesTargetReferenceType">
    <xs:annotation>
      <xs:documentation>KeyDescriptorValuesTargetType is a type for referencing a key descriptor values target object. It consists of a URN and/or a complete set of reference fields.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="ComponentReferenceType">
        <xs:choice>
          <xs:sequence>
            <xs:element name="Ref" type="KeyDescriptorValuesTargetRefType" form="unqualified"/>
            <xs:element name="URN" type="xs:anyURI" form="unqualified" minOccurs="0"/>
          </xs:sequence>
          <xs:element name="URN" type="xs:anyURI" form="unqualified"/>
        </xs:choice>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="KeyDescriptorValuesTargetRefType">
    <xs:annotation>
      <xs:documentation>KeyDescriptorValuesTargetRefType contains a reference to a key descriptor values target within a metadata target of a data structure definition.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="ComponentRefBaseType">
        <xs:attribute name="containerID" type="IDType" use="required"/>
        <xs:attribute name="id" type="IDType" use="required" fixed="DIMENSION_DESCRIPTOR_VALUES_TARGET"/>
        <xs:attribute name="class" type="ComponentTypeCodelistType" use="optional" fixed="DimensionDescriptorValuesTarget"/>
        <xs:attribute name="package" type="StructurePackageTypeCodelistType" use="optional" fixed="metadatastructure"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="ReportPeriodTargetReferenceType">
    <xs:annotation>
      <xs:documentation>ReportPeriodTargetReferenceType is a type for referencing a report period target object. It consists of a URN and/or a complete set of reference fields.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="ComponentReferenceType">
        <xs:choice>
          <xs:sequence>
            <xs:element name="Ref" type="ReportPeriodTargetRefType" form="unqualified"/>
            <xs:element name="URN" type="xs:anyURI" form="unqualified" minOccurs="0"/>
          </xs:sequence>
          <xs:element name="URN" type="xs:anyURI" form="unqualified"/>
        </xs:choice>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="ReportPeriodTargetRefType">
    <xs:annotation>
      <xs:documentation>ReportPeriodTargetRefType contains a reference to a report period target within a metadata target of a data structure definition.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="ComponentRefBaseType">
        <xs:attribute name="containerID" type="IDType" use="required"/>
        <xs:attribute name="id" type="IDType" use="required" fixed="REPORT_PERIOD_TARGET"/>
        <xs:attribute name="class" type="ComponentTypeCodelistType" use="optional" fixed="ReportPeriodTarget"/>
        <xs:attribute name="package" type="StructurePackageTypeCodelistType" use="optional" fixed="metadatastructure"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="IdentifiableObjectTargetReferenceType">
    <xs:annotation>
      <xs:documentation>IdentifiableObjectTargetReferenceType is a type for referencing an identifiable object target object. It consists of a URN and/or a complete set of reference fields.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="ComponentReferenceType">
        <xs:choice>
          <xs:sequence>
            <xs:element name="Ref" type="IdentifiableObjectTargetRefType" form="unqualified"/>
            <xs:element name="URN" type="xs:anyURI" form="unqualified" minOccurs="0"/>
          </xs:sequence>
          <xs:element name="URN" type="xs:anyURI" form="unqualified"/>
        </xs:choice>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="IdentifiableObjectTargetRefType">
    <xs:annotation>
      <xs:documentation>IdentifiableObjectTargetRefType contains a reference to an identifiable object target within a metadata target of a data structure definition.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="ComponentRefBaseType">
        <xs:attribute name="id" type="IDType" use="required"/>
        <xs:attribute name="class" type="ComponentTypeCodelistType" use="optional" fixed="IdentifiableObjectTarget"/>
        <xs:attribute name="package" type="StructurePackageTypeCodelistType" use="optional" fixed="metadatastructure"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="LocalTargetObjectReferenceType">
    <xs:annotation>
      <xs:documentation>LocalTargetObjectReferenceType is a type for referencing any type of target object within a metadata target locally, where the references to the metadata target and the  metadata structure definition which defines the target reference are provided in another context.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="LocalComponentReferenceBaseType">
        <xs:sequence>
          <xs:element name="Ref" type="LocalTargetObjectRefType" form="unqualified"/>
        </xs:sequence>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="LocalTargetObjectRefType">
    <xs:annotation>
      <xs:documentation>LocalTargetObjectRefType contains the reference fields for referencing a target object locally.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="LocalComponentRefBaseType">
        <xs:attribute name="class" type="TargetObjectTypeCodelistType" use="required"/>
        <xs:attribute name="package" type="StructurePackageTypeCodelistType" use="optional" fixed="metadatastructure"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="ReportStructureReferenceType">
    <xs:annotation>
      <xs:documentation>ReportStructureReferenceType is a type for referencing a report structure object. It consists of a URN and/or a complete set of reference fields.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="ComponentListReferenceType">
        <xs:choice>
          <xs:sequence>
            <xs:element name="Ref" type="ReportStructureRefType" form="unqualified"/>
            <xs:element name="URN" type="xs:anyURI" form="unqualified" minOccurs="0"/>
          </xs:sequence>
          <xs:element name="URN" type="xs:anyURI" form="unqualified"/>
        </xs:choice>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="ReportStructureRefType">
    <xs:annotation>
      <xs:documentation>ReportStructureRefType contains a reference to a report structure within a metadata structure definition.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="ComponentListRefBaseType">
        <xs:attribute name="id" type="IDType" use="required"/>
        <xs:attribute name="class" type="ComponentListTypeCodelistType" use="optional" fixed="ReportStructure"/>
        <xs:attribute name="package" type="StructurePackageTypeCodelistType" use="optional" fixed="metadatastructure"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="LocalReportStructureReferenceType">
    <xs:annotation>
      <xs:documentation>LocalReportStructureReferenceType is a type for referencing a report structure locally, where the reference to the metadata structure definition which defines it is provided in another context (for example the metadata structure definition in which the reference occurs).</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="LocalComponentListReferenceType">
        <xs:sequence>
          <xs:element name="Ref" type="LocalReportStructureRefType" form="unqualified"/>
        </xs:sequence>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="LocalReportStructureRefType">
    <xs:annotation>
      <xs:documentation>LocalReportStructureRefType contains a local reference to a report structure object.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="LocalComponentListRefBaseType">
        <xs:attribute name="class" type="ComponentListTypeCodelistType" use="optional" fixed="ReportStructure"/>
        <xs:attribute name="package" type="StructurePackageTypeCodelistType" use="optional" fixed="metadatastructure"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="MetadataAttributeReferenceType">
    <xs:annotation>
      <xs:documentation>MetadataAttributeReferenceType is a type for referencing a metadata attribute object. It consists of a URN and/or a complete set of reference fields.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="ComponentReferenceType">
        <xs:choice>
          <xs:sequence>
            <xs:element name="Ref" type="MetadataAttributeRefType" form="unqualified"/>
            <xs:element name="URN" type="xs:anyURI" form="unqualified" minOccurs="0"/>
          </xs:sequence>
          <xs:element name="URN" type="xs:anyURI" form="unqualified"/>
        </xs:choice>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="MetadataAttributeRefType">
    <xs:annotation>
      <xs:documentation>MetadataAttributeRefType contains a reference to a metadata attribute within a report structure in a metadata structure definition.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="ComponentRefBaseType">
        <xs:attribute name="containerID" type="IDType" use="required"/>
        <xs:attribute name="id" type="NestedIDType" use="required"/>
        <xs:attribute name="class" type="ComponentTypeCodelistType" use="optional" fixed="MetadataAttribute"/>
        <xs:attribute name="package" type="StructurePackageTypeCodelistType" use="optional" fixed="metadatastructure"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="LocalMetadataStructureComponentReferenceType">
    <xs:annotation>
      <xs:documentation>LocalMetadataStructureComponentReferenceType is a type for referencing any type of metadata structure component locally, where the reference for the metadata structure definition which defines the components is available in another context.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="LocalComponentListComponentReferenceBaseType">
        <xs:sequence>
          <xs:element name="Ref" type="LocalMetadataStructureComponentRefType" form="unqualified"/>
        </xs:sequence>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="LocalMetadataStructureComponentRefType">
    <xs:annotation>
      <xs:documentation>LocalMetadataStructureComponentRefType contains the reference fields for referencing any metadata structure component locally. This reference must specify the class of the component being referenced.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="LocalComponentListComponentRefBaseType">
        <xs:attribute name="containerID" type="IDType" use="required"/>
        <xs:attribute name="class" type="MetadataStructureComponentTypeCodelistType" use="required"/>
        <xs:attribute name="package" type="StructurePackageTypeCodelistType" use="optional" fixed="metadatastructure"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="ProvisionAgreementReferenceType">
    <xs:annotation>
      <xs:documentation>ProvisionAgreementReferenceType is a type for referencing a provision agreement. It consists of a URN and/or a complete set of reference fields.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="MaintainableReferenceBaseType">
        <xs:choice>
          <xs:sequence>
            <xs:element name="Ref" type="ProvisionAgreementRefType" form="unqualified"/>
            <xs:element name="URN" type="xs:anyURI" form="unqualified" minOccurs="0"/>
          </xs:sequence>
          <xs:element name="URN" type="xs:anyURI" form="unqualified"/>
        </xs:choice>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="ProvisionAgreementRefType">
    <xs:annotation>
      <xs:documentation>ProvisionAgreementRefType contains a set of reference fields for a provision agreement.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="MaintainableRefBaseType">
        <xs:attribute name="class" type="MaintainableTypeCodelistType" use="optional" fixed="ProvisionAgreement"/>
        <xs:attribute name="package" type="PackageTypeCodelistType" use="optional" fixed="registry"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="ProcessReferenceType">
    <xs:annotation>
      <xs:documentation>ProcessReferenceType is a type for referencing a process object. It consists of a URN and/or a complete set of reference fields.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="MaintainableReferenceBaseType">
        <xs:choice>
          <xs:sequence>
            <xs:element name="Ref" type="ProcessRefType" form="unqualified"/>
            <xs:element name="URN" type="xs:anyURI" form="unqualified" minOccurs="0"/>
          </xs:sequence>
          <xs:element name="URN" type="xs:anyURI" form="unqualified"/>
        </xs:choice>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="ProcessRefType">
    <xs:annotation>
      <xs:documentation>ProcessRefType contains a set of reference fields for a process.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="MaintainableRefBaseType">
        <xs:attribute name="class" type="MaintainableTypeCodelistType" use="optional" fixed="Process"/>
        <xs:attribute name="package" type="PackageTypeCodelistType" use="optional" fixed="process"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="ProcessStepReferenceType">
    <xs:annotation>
      <xs:documentation>ProcessStepReferenceType is a type for referencing a process step object. It consists of a URN and/or a complete set of reference fields.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="ChildObjectReferenceType">
        <xs:choice>
          <xs:sequence>
            <xs:element name="Ref" type="ProcessStepRefType" form="unqualified"/>
            <xs:element name="URN" type="xs:anyURI" form="unqualified" minOccurs="0"/>
          </xs:sequence>
          <xs:element name="URN" type="xs:anyURI" form="unqualified"/>
        </xs:choice>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="ProcessStepRefType">
    <xs:annotation>
      <xs:documentation>ProcessStepRefType provides for a reference to a process step through its id. Support for referencing nested process steps is provided through a nested identifier.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="ChildObjectRefBaseType">
        <xs:attribute name="class" type="ObjectTypeCodelistType" use="optional" fixed="ProcessStep"/>
        <xs:attribute name="package" type="PackageTypeCodelistType" use="optional" fixed="process"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="LocalProcessStepReferenceType">
    <xs:annotation>
      <xs:documentation>LocalProcessStepReferenceType is a type for referencing a process step locally, where the reference to the process which defines it is provided in another context (for example the metadata structure definition in which the reference occurs).</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="LocalIdentifiableReferenceType">
        <xs:sequence>
          <xs:element name="Ref" type="LocalProcessStepRefType" form="unqualified"/>
        </xs:sequence>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="LocalProcessStepRefType">
    <xs:annotation>
      <xs:documentation>LocalProcessStepRefType contains a local reference to a process step object.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="LocalIdentifiableRefBaseType">
        <xs:attribute name="class" type="ObjectTypeCodelistType" use="optional" fixed="ProcessStep"/>
        <xs:attribute name="package" type="PackageTypeCodelistType" use="optional" fixed="process"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="TransitionReferenceType">
    <xs:annotation>
      <xs:documentation>TransiationReferenceType is a type for referencing a process step object. It consists of a URN and/or a complete set of reference fields.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="ContainerChildObjectReferenceType">
        <xs:choice>
          <xs:sequence>
            <xs:element name="Ref" type="TransitionRefType" form="unqualified"/>
            <xs:element name="URN" type="xs:anyURI" form="unqualified" minOccurs="0"/>
          </xs:sequence>
          <xs:element name="URN" type="xs:anyURI" form="unqualified"/>
        </xs:choice>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="TransitionRefType">
    <xs:annotation>
      <xs:documentation>TransitionRefType provides for a reference to a transition definition in process step through its id.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="ContainerChildObjectRefBaseType">
        <xs:attribute name="containerID" type="NestedIDType" use="required"/>
        <xs:attribute name="class" type="ObjectTypeCodelistType" use="optional" fixed="Transition"/>
        <xs:attribute name="package" type="PackageTypeCodelistType" use="optional" fixed="process"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="StructureSetReferenceType">
    <xs:annotation>
      <xs:documentation>StructureSetReferenceType is a type for referencing a structure set object. It consists of a URN and/or a complete set of reference fields.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="MaintainableReferenceBaseType">
        <xs:choice>
          <xs:sequence>
            <xs:element name="Ref" type="StructureSetRefType" form="unqualified"/>
            <xs:element name="URN" type="xs:anyURI" form="unqualified" minOccurs="0"/>
          </xs:sequence>
          <xs:element name="URN" type="xs:anyURI" form="unqualified"/>
        </xs:choice>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="StructureSetRefType">
    <xs:annotation>
      <xs:documentation>StructureSetRefType contains a set of reference fields for a structure set.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="MaintainableRefBaseType">
        <xs:attribute name="class" type="MaintainableTypeCodelistType" use="optional" fixed="StructureSet"/>
        <xs:attribute name="package" type="PackageTypeCodelistType" use="optional" fixed="mapping"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="StructureMapReferenceType">
    <xs:annotation>
      <xs:documentation>StructureMapReferenceType is a type for referencing a structure map object. It consists of a URN and/or a complete set of reference fields.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="ChildObjectReferenceType">
        <xs:choice>
          <xs:sequence>
            <xs:element name="Ref" type="StructureMapRefType" form="unqualified"/>
            <xs:element name="URN" type="xs:anyURI" form="unqualified" minOccurs="0"/>
          </xs:sequence>
          <xs:element name="URN" type="xs:anyURI" form="unqualified"/>
        </xs:choice>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="StructureMapRefType">
    <xs:annotation>
      <xs:documentation>StructureMapRefType contains fields for referencing a structure map within a structure set.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="ChildObjectRefBaseType">
        <xs:attribute name="id" type="IDType" use="required"/>
        <xs:attribute name="class" type="ObjectTypeCodelistType" use="optional" fixed="StructureMap"/>
        <xs:attribute name="package" type="PackageTypeCodelistType" use="optional" fixed="mapping"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="CategorySchemeMapReferenceType">
    <xs:annotation>
      <xs:documentation>CategorySchemeMapReferenceType is a type for referencing a category scheme map object. It consists of a URN and/or a complete set of reference fields.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="ChildObjectReferenceType">
        <xs:choice>
          <xs:sequence>
            <xs:element name="Ref" type="CategorySchemeMapRefType" form="unqualified"/>
            <xs:element name="URN" type="xs:anyURI" form="unqualified" minOccurs="0"/>
          </xs:sequence>
          <xs:element name="URN" type="xs:anyURI" form="unqualified"/>
        </xs:choice>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="CategorySchemeMapRefType">
    <xs:annotation>
      <xs:documentation>CategorySchemeMapRefType contains a set of reference fields for a category scheme map.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="ChildObjectRefBaseType">
        <xs:attribute name="id" type="IDType" use="required"/>
        <xs:attribute name="class" type="ObjectTypeCodelistType" use="optional" fixed="CategorySchemeMap"/>
        <xs:attribute name="package" type="PackageTypeCodelistType" use="optional" fixed="mapping"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="CodelistMapReferenceType">
    <xs:annotation>
      <xs:documentation>CodelistMapReferenceType is a type for referencing a codelist map object. It consists of a URN and/or a complete set of reference fields.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="ChildObjectReferenceType">
        <xs:choice>
          <xs:sequence>
            <xs:element name="Ref" type="CodelistMapRefType" form="unqualified"/>
            <xs:element name="URN" type="xs:anyURI" form="unqualified" minOccurs="0"/>
          </xs:sequence>
          <xs:element name="URN" type="xs:anyURI" form="unqualified"/>
        </xs:choice>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="CodelistMapRefType">
    <xs:annotation>
      <xs:documentation>CodelistMapRefType contains a set of reference fields for a codelist map.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="ChildObjectRefBaseType">
        <xs:attribute name="id" type="IDType" use="required"/>
        <xs:attribute name="class" type="ObjectTypeCodelistType" use="optional" fixed="CodelistMap"/>
        <xs:attribute name="package" type="PackageTypeCodelistType" use="optional" fixed="mapping"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="LocalCodelistMapReferenceType">
    <xs:annotation>
      <xs:documentation>LocalCodelistMapReferenceType is a type for referencing a codelist map object where the reference to the structure set which defines it is provided in another context (e.g. the structure set in which this reference occurs).</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="ReferenceType">
        <xs:sequence>
          <xs:element name="Ref" type="LocalCodelistMapRefType" form="unqualified"/>
        </xs:sequence>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="LocalCodelistMapRefType">
    <xs:annotation>
      <xs:documentation>LocalCodelistMapRefType contains a set of reference fields for a codelist map locally.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="LocalIdentifiableRefBaseType">
        <xs:attribute name="containerID" type="NestedIDType" use="prohibited"/>
        <xs:attribute name="class" type="ObjectTypeCodelistType" use="optional" fixed="CodelistMap"/>
        <xs:attribute name="package" type="PackageTypeCodelistType" use="optional" fixed="mapping"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="ConceptSchemeMapReferenceType">
    <xs:annotation>
      <xs:documentation>ConceptSchemeMapReferenceType is a type for referencing a concept scheme map object. It consists of a URN and/or a complete set of reference fields.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="ChildObjectReferenceType">
        <xs:choice>
          <xs:sequence>
            <xs:element name="Ref" type="ConceptSchemeMapRefType" form="unqualified"/>
            <xs:element name="URN" type="xs:anyURI" form="unqualified" minOccurs="0"/>
          </xs:sequence>
          <xs:element name="URN" type="xs:anyURI" form="unqualified"/>
        </xs:choice>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="ConceptSchemeMapRefType">
    <xs:annotation>
      <xs:documentation>ConceptSchemeMapRefType contains a set of reference fields for a concept scheme map.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="ChildObjectRefBaseType">
        <xs:attribute name="id" type="IDType" use="required"/>
        <xs:attribute name="class" type="ObjectTypeCodelistType" use="optional" fixed="ConceptSchemeMap"/>
        <xs:attribute name="package" type="PackageTypeCodelistType" use="optional" fixed="mapping"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="OrganisationSchemeMapReferenceType">
    <xs:annotation>
      <xs:documentation>OrganisationSchemeMapReferenceType is a type for referencing a organisation scheme map object. It consists of a URN and/or a complete set of reference fields.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="ChildObjectReferenceType">
        <xs:choice>
          <xs:sequence>
            <xs:element name="Ref" type="OrganisationSchemeMapRefType" form="unqualified"/>
            <xs:element name="URN" type="xs:anyURI" form="unqualified" minOccurs="0"/>
          </xs:sequence>
          <xs:element name="URN" type="xs:anyURI" form="unqualified"/>
        </xs:choice>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="OrganisationSchemeMapRefType">
    <xs:annotation>
      <xs:documentation>OrganisationSchemeMapRefType contains a set of reference fields for an organisation scheme map.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="ChildObjectRefBaseType">
        <xs:attribute name="id" type="IDType" use="required"/>
        <xs:attribute name="class" type="ObjectTypeCodelistType" use="optional" fixed="OrganisationSchemeMap"/>
        <xs:attribute name="package" type="PackageTypeCodelistType" use="optional" fixed="mapping"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <!-- Data/Metadata Set References -->

  <xs:complexType name="SetReferenceType">
    <xs:annotation>
      <xs:documentation>SetReferenceType defines the structure of a reference to a data/metadata set. A full reference to a data provider and the identifier for the data set must be provided. Note that this is not derived from the base reference structure since data/metadata sets are not technically identifiable.</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="DataProvider" type="DataProviderReferenceType">
        <xs:annotation>
          <xs:documentation>DataProvider references a the provider of the data/metadata set. A URN and/or a complete set of reference fields must be provided.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="ID" type="IDType">
        <xs:annotation>
          <xs:documentation>ID contains the identifier of the data/metadata set being referenced.</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>

  <!--Object Type List-->

  <xs:simpleType name="PackageTypeCodelistType">
    <xs:annotation>
      <xs:documentation>PackageTypeCodelistType provides an enumeration of all SDMX package names.</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="base"/>
      <xs:enumeration value="datastructure"/>
      <xs:enumeration value="metadatastructure"/>
      <xs:enumeration value="process"/>
      <xs:enumeration value="registry"/>
      <xs:enumeration value="mapping"/>
      <xs:enumeration value="codelist"/>
      <xs:enumeration value="categoryscheme"/>
      <xs:enumeration value="conceptscheme"/>
    </xs:restriction>
  </xs:simpleType>

  <xs:simpleType name="ItemSchemePackageTypeCodelistType">
    <xs:annotation>
      <xs:documentation>ItemSchemePackageTypeCodelistType provides an enumeration of all SDMX packages which contain item schemes.</xs:documentation>
    </xs:annotation>
    <xs:restriction base="PackageTypeCodelistType">
      <xs:enumeration value="base"/>
      <xs:enumeration value="codelist"/>
      <xs:enumeration value="categoryscheme"/>
      <xs:enumeration value="conceptscheme"/>
    </xs:restriction>
  </xs:simpleType>

  <xs:simpleType name="StructurePackageTypeCodelistType">
    <xs:annotation>
      <xs:documentation>StructurePackageTypeCodelistType provides an enumeration of all SDMX packages which contain structure and structure usages.</xs:documentation>
    </xs:annotation>
    <xs:restriction base="PackageTypeCodelistType">
      <xs:enumeration value="datastructure"/>
      <xs:enumeration value="metadatastructure"/>
    </xs:restriction>
  </xs:simpleType>

  <xs:simpleType name="ObjectTypeCodelistType">
    <xs:annotation>
      <xs:documentation>ObjectTypeCodelistType provides an enumeration of all objects outside of the base infomration model class. This includes some abstract object types such as Organsiation and Constraint.</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="Any"/>
      <xs:enumeration value="Agency"/>
      <xs:enumeration value="AgencyScheme"/>
      <xs:enumeration value="AttachmentConstraint"/>
      <xs:enumeration value="Attribute"/>
      <xs:enumeration value="AttributeDescriptor"/>
      <xs:enumeration value="Categorisation"/>
      <xs:enumeration value="Category"/>
      <xs:enumeration value="CategorySchemeMap"/>
      <xs:enumeration value="CategoryScheme"/>
      <xs:enumeration value="Code"/>
      <xs:enumeration value="CodeMap"/>
      <xs:enumeration value="Codelist"/>
      <xs:enumeration value="CodelistMap"/>
      <xs:enumeration value="ComponentMap"/>
      <xs:enumeration value="Concept"/>
      <xs:enumeration value="ConceptMap"/>
      <xs:enumeration value="ConceptScheme"/>
      <xs:enumeration value="ConceptSchemeMap"/>
      <xs:enumeration value="Constraint"/>
      <xs:enumeration value="ConstraintTarget"/>
      <xs:enumeration value="ContentConstraint"/>
      <xs:enumeration value="Dataflow"/>
      <xs:enumeration value="DataConsumer"/>
      <xs:enumeration value="DataConsumerScheme"/>
      <xs:enumeration value="DataProvider"/>
      <xs:enumeration value="DataProviderScheme"/>
      <xs:enumeration value="DataSetTarget"/>
      <xs:enumeration value="DataStructure"/>
      <xs:enumeration value="Dimension"/>
      <xs:enumeration value="DimensionDescriptor"/>
      <xs:enumeration value="DimensionDescriptorValuesTarget"/>
      <xs:enumeration value="GroupDimensionDescriptor"/>
      <xs:enumeration value="HierarchicalCode"/>
      <xs:enumeration value="HierarchicalCodelist"/>
      <xs:enumeration value="Hierarchy"/>
      <xs:enumeration value="HybridCodelistMap"/>
      <xs:enumeration value="HybridCodeMap"/>
      <xs:enumeration value="IdentifiableObjectTarget"/>
      <xs:enumeration value="Level"/>
      <xs:enumeration value="MeasureDescriptor"/>
      <xs:enumeration value="MeasureDimension"/>
      <xs:enumeration value="Metadataflow"/>
      <xs:enumeration value="MetadataAttribute"/>
      <xs:enumeration value="MetadataSet"/>
      <xs:enumeration value="MetadataStructure"/>
      <xs:enumeration value="MetadataTarget"/>
      <xs:enumeration value="Organisation"/>
      <xs:enumeration value="OrganisationMap"/>
      <xs:enumeration value="OrganisationScheme"/>
      <xs:enumeration value="OrganisationSchemeMap"/>
      <xs:enumeration value="OrganisationUnit"/>
      <xs:enumeration value="OrganisationUnitScheme"/>
      <xs:enumeration value="PrimaryMeasure"/>
      <xs:enumeration value="Process"/>
      <xs:enumeration value="ProcessStep"/>
      <xs:enumeration value="ProvisionAgreement"/>
      <xs:enumeration value="ReportingCategory"/>
      <xs:enumeration value="ReportingCategoryMap"/>
      <xs:enumeration value="ReportingTaxonomy"/>
      <xs:enumeration value="ReportingTaxonomyMap"/>
      <xs:enumeration value="ReportingYearStartDay"/>
      <xs:enumeration value="ReportPeriodTarget"/>
      <xs:enumeration value="ReportStructure"/>
      <xs:enumeration value="StructureMap"/>
      <xs:enumeration value="StructureSet"/>
      <xs:enumeration value="TimeDimension"/>
      <xs:enumeration value="Transition"/>
    </xs:restriction>
  </xs:simpleType>


  <xs:simpleType name="MaintainableTypeCodelistType">
    <xs:annotation>
      <xs:documentation>MaintainableTypeCodelistType provides an enumeration of all maintainable objects.</xs:documentation>
    </xs:annotation>
    <xs:restriction base="ObjectTypeCodelistType">
      <xs:enumeration value="Any"/>
      <xs:enumeration value="AgencyScheme"/>
      <xs:enumeration value="AttachmentConstraint"/>
      <xs:enumeration value="Categorisation"/>
      <xs:enumeration value="CategoryScheme"/>
      <xs:enumeration value="Codelist"/>
      <xs:enumeration value="ConceptScheme"/>
      <xs:enumeration value="Constraint"/>
      <xs:enumeration value="ContentConstraint"/>
      <xs:enumeration value="Dataflow"/>
      <xs:enumeration value="DataConsumerScheme"/>
      <xs:enumeration value="DataProviderScheme"/>
      <xs:enumeration value="DataStructure"/>
      <xs:enumeration value="HierarchicalCodelist"/>
      <xs:enumeration value="Metadataflow"/>
      <xs:enumeration value="MetadataStructure"/>
      <xs:enumeration value="OrganisationScheme"/>
      <xs:enumeration value="OrganisationUnitScheme"/>
      <xs:enumeration value="Process"/>
      <xs:enumeration value="ProvisionAgreement"/>
      <xs:enumeration value="ReportingTaxonomy"/>
      <xs:enumeration value="StructureSet"/>
    </xs:restriction>
  </xs:simpleType>

  <xs:simpleType name="ConcreteMaintainableTypeCodelistType">
    <xs:annotation>
      <xs:documentation>ConcreteMaintainableTypeCodelistType provides an enumeration of all concrete maintainable objects.</xs:documentation>
    </xs:annotation>
    <xs:restriction base="MaintainableTypeCodelistType">
      <xs:enumeration value="AgencyScheme"/>
      <xs:enumeration value="AttachmentConstraint"/>
      <xs:enumeration value="Categorisation"/>
      <xs:enumeration value="CategoryScheme"/>
      <xs:enumeration value="Codelist"/>
      <xs:enumeration value="ConceptScheme"/>
      <xs:enumeration value="ContentConstraint"/>
      <xs:enumeration value="Dataflow"/>
      <xs:enumeration value="DataConsumerScheme"/>
      <xs:enumeration value="DataProviderScheme"/>
      <xs:enumeration value="DataStructure"/>
      <xs:enumeration value="HierarchicalCodelist"/>
      <xs:enumeration value="Metadataflow"/>
      <xs:enumeration value="MetadataStructure"/>
      <xs:enumeration value="OrganisationUnitScheme"/>
      <xs:enumeration value="Process"/>
      <xs:enumeration value="ProvisionAgreement"/>
      <xs:enumeration value="ReportingTaxonomy"/>
      <xs:enumeration value="StructureSet"/>
    </xs:restriction>
  </xs:simpleType>

  <xs:simpleType name="CodelistTypeCodelistType">
    <xs:annotation>
      <xs:documentation>CodelistTypeCodelistType provides an enumeration of all codelist objects.</xs:documentation>
    </xs:annotation>
    <xs:restriction base="MaintainableTypeCodelistType">
      <xs:enumeration value="Codelist"/>
      <xs:enumeration value="HierarchicalCodelist"/>
    </xs:restriction>
  </xs:simpleType>

  <xs:simpleType name="CodeTypeCodelistType">
    <xs:annotation>
      <xs:documentation>CodeTypeCodelistType provides an enumeration of all code objects.</xs:documentation>
    </xs:annotation>
    <xs:restriction base="ObjectTypeCodelistType">
      <xs:enumeration value="Code"/>
      <xs:enumeration value="HierarchicalCode"/>
    </xs:restriction>
  </xs:simpleType>

  <xs:simpleType name="ConstraintTypeCodelistType">
    <xs:annotation>
      <xs:documentation>ConstraintTypeCodelistType provides an enumeration of all constraint objects.</xs:documentation>
    </xs:annotation>
    <xs:restriction base="MaintainableTypeCodelistType">
      <xs:enumeration value="AttachmentConstraint"/>
      <xs:enumeration value="ContentConstraint"/>
    </xs:restriction>
  </xs:simpleType>

  <xs:simpleType name="ItemSchemeTypeCodelistType">
    <xs:annotation>
      <xs:documentation>ItemSchemeTypeCodelistType provides an enumeration of all item scheme objects.</xs:documentation>
    </xs:annotation>
    <xs:restriction base="MaintainableTypeCodelistType">
      <xs:enumeration value="AgencyScheme"/>
      <xs:enumeration value="CategoryScheme"/>
      <xs:enumeration value="Codelist"/>
      <xs:enumeration value="ConceptScheme"/>
      <xs:enumeration value="DataConsumerScheme"/>
      <xs:enumeration value="DataProviderScheme"/>
      <xs:enumeration value="OrganisationUnitScheme"/>
      <xs:enumeration value="ReportingTaxonomy"/>
    </xs:restriction>
  </xs:simpleType>

  <xs:simpleType name="OrganisationSchemeTypeCodelistType">
    <xs:annotation>
      <xs:documentation>OrganisationSchemeTypeCodelistType provides an enumeration of all organisation scheme objects.</xs:documentation>
    </xs:annotation>
    <xs:restriction base="ItemSchemeTypeCodelistType">
      <xs:enumeration value="AgencyScheme"/>
      <xs:enumeration value="DataConsumerScheme"/>
      <xs:enumeration value="DataProviderScheme"/>
      <xs:enumeration value="OrganisationUnitScheme"/>
    </xs:restriction>
  </xs:simpleType>

  <xs:simpleType name="OrganisationTypeCodelistType">
    <xs:annotation>
      <xs:documentation>OrganisationTypeCodelistType provides an enumeration of all organisation objects.</xs:documentation>
    </xs:annotation>
    <xs:restriction base="ItemTypeCodelistType">
      <xs:enumeration value="Agency"/>
      <xs:enumeration value="DataConsumer"/>
      <xs:enumeration value="DataProvider"/>
      <xs:enumeration value="OrganisationUnit"/>
    </xs:restriction>
  </xs:simpleType>

  <xs:simpleType name="StructureOrUsageTypeCodelistType">
    <xs:annotation>
      <xs:documentation>StructureOrUsageTypeCodelistType provides an enumeration all structure and structure usage objects</xs:documentation>
    </xs:annotation>
    <xs:restriction base="MaintainableTypeCodelistType">
      <xs:enumeration value="Dataflow"/>
      <xs:enumeration value="DataStructure"/>
      <xs:enumeration value="Metadataflow"/>
      <xs:enumeration value="MetadataStructure"/>
    </xs:restriction>
  </xs:simpleType>

  <xs:simpleType name="StructureTypeCodelistType">
    <xs:annotation>
      <xs:documentation>StructureTypeCodelistType provides an enumeration all structure objects</xs:documentation>
    </xs:annotation>
    <xs:restriction base="StructureOrUsageTypeCodelistType">
      <xs:enumeration value="DataStructure"/>
      <xs:enumeration value="MetadataStructure"/>
    </xs:restriction>
  </xs:simpleType>

  <xs:simpleType name="StructureUsageTypeCodelistType">
    <xs:annotation>
      <xs:documentation>StructureUsageTypeCodelistType provides an enumeration all structure usage objects</xs:documentation>
    </xs:annotation>
    <xs:restriction base="StructureOrUsageTypeCodelistType">
      <xs:enumeration value="Dataflow"/>
      <xs:enumeration value="Metadataflow"/>
    </xs:restriction>
  </xs:simpleType>

  <xs:simpleType name="ItemTypeCodelistType">
    <xs:annotation>
      <xs:documentation>ItemTypeCodelistType provides an enumeration of all item objects.</xs:documentation>
    </xs:annotation>
    <xs:restriction base="ObjectTypeCodelistType">
      <xs:enumeration value="Agency"/>
      <xs:enumeration value="Category"/>
      <xs:enumeration value="Code"/>
      <xs:enumeration value="Concept"/>
      <xs:enumeration value="DataConsumer"/>
      <xs:enumeration value="DataProvider"/>
      <xs:enumeration value="OrganisationUnit"/>
      <xs:enumeration value="ReportingCategory"/>
    </xs:restriction>
  </xs:simpleType>

  <xs:simpleType name="ComponentListTypeCodelistType">
    <xs:annotation>
      <xs:documentation>ComponentListTypeCodelistType provides an enumeration of all component list objects.</xs:documentation>
    </xs:annotation>
    <xs:restriction base="ObjectTypeCodelistType">
      <xs:enumeration value="AttributeDescriptor"/>
      <xs:enumeration value="DimensionDescriptor"/>
      <xs:enumeration value="GroupDimensionDescriptor"/>
      <xs:enumeration value="MeasureDescriptor"/>
      <xs:enumeration value="MetadataTarget"/>
      <xs:enumeration value="ReportStructure"/>
    </xs:restriction>
  </xs:simpleType>

  <xs:simpleType name="ComponentTypeCodelistType">
    <xs:annotation>
      <xs:documentation>ComponentTypeCodelistType provides an enumeration of all component objects.</xs:documentation>
    </xs:annotation>
    <xs:restriction base="ObjectTypeCodelistType">
      <xs:enumeration value="Attribute"/>
      <xs:enumeration value="ConstraintTarget"/>
      <xs:enumeration value="DataSetTarget"/>
      <xs:enumeration value="Dimension"/>
      <xs:enumeration value="IdentifiableObjectTarget"/>
      <xs:enumeration value="DimensionDescriptorValuesTarget"/>
      <xs:enumeration value="MeasureDimension"/>
      <xs:enumeration value="MetadataAttribute"/>
      <xs:enumeration value="PrimaryMeasure"/>
      <xs:enumeration value="ReportingYearStartDay"/>
      <xs:enumeration value="ReportPeriodTarget"/>
      <xs:enumeration value="TimeDimension"/>
    </xs:restriction>
  </xs:simpleType>

  <xs:simpleType name="DataStructureComponentTypeCodelistType">
    <xs:annotation>
      <xs:documentation>DataStructureComponentTypeCodelistType provides an enumeration of all data structure component objects, except for the primary measure.</xs:documentation>
    </xs:annotation>
    <xs:restriction base="ComponentTypeCodelistType">
      <xs:enumeration value="Attribute"/>
      <xs:enumeration value="Dimension"/>
      <xs:enumeration value="MeasureDimension"/>
      <xs:enumeration value="PrimaryMeasure"/>
      <xs:enumeration value="ReportingYearStartDay"/>
      <xs:enumeration value="TimeDimension"/>
    </xs:restriction>
  </xs:simpleType>

  <xs:simpleType name="DimensionEumerationSchemeTypeCodelistType">
    <xs:annotation>
      <xs:documentation>DimensionEumerationSchemeTypeCodelistType provides an enumeration of all item schemes which are allowable as the representation of a data structure definition component.</xs:documentation>
    </xs:annotation>
    <xs:restriction base="ItemSchemeTypeCodelistType">
      <xs:enumeration value="Codelist"/>
      <xs:enumeration value="ConceptScheme"/>
    </xs:restriction>
  </xs:simpleType>

  <xs:simpleType name="MetadataStructureComponentTypeCodelistType">
    <xs:annotation>
      <xs:documentation>MetadataStructureComponentTypeCodelistType provides an enumeration of all metadata structure component objects.</xs:documentation>
    </xs:annotation>
    <xs:restriction base="ComponentTypeCodelistType">
      <xs:enumeration value="ConstraintTarget"/>
      <xs:enumeration value="DataSetTarget"/>
      <xs:enumeration value="IdentifiableObjectTarget"/>
      <xs:enumeration value="DimensionDescriptorValuesTarget"/>
      <xs:enumeration value="MetadataAttribute"/>
      <xs:enumeration value="ReportPeriodTarget"/>
    </xs:restriction>
  </xs:simpleType>

  <xs:simpleType name="DimensionTypeCodelistType">
    <xs:annotation>
      <xs:documentation>DimensionTypeCodelistType provides an enumeration of all dimension objects.</xs:documentation>
    </xs:annotation>
    <xs:restriction base="ComponentTypeCodelistType">
      <xs:enumeration value="Dimension"/>
      <xs:enumeration value="MeasureDimension"/>
      <xs:enumeration value="TimeDimension"/>
    </xs:restriction>
  </xs:simpleType>

  <xs:simpleType name="TargetObjectTypeCodelistType">
    <xs:annotation>
      <xs:documentation>TargetObjectTypeCodelistType provides an enumeration of all target object objects.</xs:documentation>
    </xs:annotation>
    <xs:restriction base="ComponentTypeCodelistType">
      <xs:enumeration value="ConstraintTarget"/>
      <xs:enumeration value="DataSetTarget"/>
      <xs:enumeration value="IdentifiableObjectTarget"/>
      <xs:enumeration value="DimensionDescriptorValuesTarget"/>
      <xs:enumeration value="ReportPeriodTarget"/>
    </xs:restriction>
  </xs:simpleType>

  <xs:element name="Any" type="EmptyType">
    <xs:annotation>
      <xs:documentation>Any is an empty element that denotes an object of any type.</xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:element name="Agency" type="EmptyType">
    <xs:annotation>
      <xs:documentation>Agency is an empty element that denotes an agency object.</xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:element name="AgencyScheme" type="EmptyType">
    <xs:annotation>
      <xs:documentation>AgencyScheme is an empty element that denotes an agency scheme object.</xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:element name="AttachmentConstraint" type="EmptyType">
    <xs:annotation>
      <xs:documentation>AttachmentConstraint is an empty element that denotes an attachment constraint object.</xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:element name="Attribute" type="EmptyType">
    <xs:annotation>
      <xs:documentation>Attribute is an empty element that denotes an attribute object.</xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:element name="AttributeDescriptor" type="EmptyType">
    <xs:annotation>
      <xs:documentation>AttributeDescriptor is an empty element that denotes an attribute descriptor object.</xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:element name="Categorisation" type="EmptyType">
    <xs:annotation>
      <xs:documentation>Categorisation is an empty element that denotes a categorisation object.</xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:element name="Category" type="EmptyType">
    <xs:annotation>
      <xs:documentation>Category is an empty element that denotes a category object.</xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:element name="CategorySchemeMap" type="EmptyType">
    <xs:annotation>
      <xs:documentation>CategorySchemeMap is an empty element that denotes a category scheme map object.</xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:element name="CategoryScheme" type="EmptyType">
    <xs:annotation>
      <xs:documentation>CategoryScheme is an empty element that denotes a category scheme object.</xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:element name="Code" type="EmptyType">
    <xs:annotation>
      <xs:documentation>Code is an empty element that denotes a code object.</xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:element name="CodeMap" type="EmptyType">
    <xs:annotation>
      <xs:documentation>CodeMap is an empty element that denotes a code map object.</xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:element name="Codelist" type="EmptyType">
    <xs:annotation>
      <xs:documentation>Codelist is an empty element that denotes a code list object.</xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:element name="CodelistMap" type="EmptyType">
    <xs:annotation>
      <xs:documentation>CodelistMap is an empty element that denotes a code list map object.</xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:element name="ComponentMap" type="EmptyType">
    <xs:annotation>
      <xs:documentation>ComponentMap is an empty element that denotes a component map object.</xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:element name="Concept" type="EmptyType">
    <xs:annotation>
      <xs:documentation>Concept is an empty element that denotes a concept object.</xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:element name="ConceptMap" type="EmptyType">
    <xs:annotation>
      <xs:documentation>ConceptMap is an empty element that denotes a concept map object.</xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:element name="ConceptScheme" type="EmptyType">
    <xs:annotation>
      <xs:documentation>ConceptScheme is an empty element that denotes a concept scheme object.</xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:element name="ConceptSchemeMap" type="EmptyType">
    <xs:annotation>
      <xs:documentation>ConceptSchemeMap is an empty element that denotes a concept scheme map object.</xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:element name="ConstraintTarget" type="EmptyType">
    <xs:annotation>
      <xs:documentation>ConstraintTarget is an empty element that denotes a constraint target object.</xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:element name="ContentConstraint" type="EmptyType">
    <xs:annotation>
      <xs:documentation>ContentConstraint is an empty element that denotes a content constraint object.</xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:element name="Dataflow" type="EmptyType">
    <xs:annotation>
      <xs:documentation>Dataflow is an empty element that denotes a data flow object.</xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:element name="DataConsumer" type="EmptyType">
    <xs:annotation>
      <xs:documentation>DataConsumer is an empty element that denotes a data consumer object.</xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:element name="DataConsumerScheme" type="EmptyType">
    <xs:annotation>
      <xs:documentation>DataConsumerScheme is an empty element that denotes a data consumer scheme object.</xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:element name="DataProvider" type="EmptyType">
    <xs:annotation>
      <xs:documentation>DataProvider is an empty element that denotes a data provider object.</xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:element name="DataProviderScheme" type="EmptyType">
    <xs:annotation>
      <xs:documentation>DataProviderScheme is an empty element that denotes a data provider scheme object.</xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:element name="DataSetTarget" type="EmptyType">
    <xs:annotation>
      <xs:documentation>DataSetTarget is an empty element that denotes a data set target object.</xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:element name="DataStructure" type="EmptyType">
    <xs:annotation>
      <xs:documentation>DataStructure is an empty element that denotes a data structure definition object.</xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:element name="Dimension" type="EmptyType">
    <xs:annotation>
      <xs:documentation>Dimension is an empty element that denotes a dimension object.</xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:element name="DimensionDescriptor" type="EmptyType">
    <xs:annotation>
      <xs:documentation>DimensionDescriptor is an empty element that denotes a dimension descriptor object.</xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:element name="DimensionDescriptorValuesTarget" type="EmptyType">
    <xs:annotation>
      <xs:documentation>DimensionDescriptorValuesTarget is an empty element that denotes a dimension descriptor values target object.</xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:element name="GroupDimensionDescriptor" type="EmptyType">
    <xs:annotation>
      <xs:documentation>GroupDimensionDescriptor is an empty element that denotes a group dimension descriptor object.</xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:element name="HierarchicalCode" type="EmptyType">
    <xs:annotation>
      <xs:documentation>HierarchicalCode is an empty element that denotes a hierarchical code object.</xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:element name="HierarchicalCodelist" type="EmptyType">
    <xs:annotation>
      <xs:documentation>HierarchicalCodelist is an empty element that denotes a hierarchical codelist object.</xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:element name="Hierarchy" type="EmptyType">
    <xs:annotation>
      <xs:documentation>Hierarchy is an empty element that denotes a hierarchy within a hiearcharchical codelist.</xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:element name="HybridCodelistMap" type="EmptyType">
    <xs:annotation>
      <xs:documentation>HybridCodelistMap is an empty element that denotes a hybrid codelist map object.</xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:element name="HybridCodeMap" type="EmptyType">
    <xs:annotation>
      <xs:documentation>HybridCodeMap is an empty element that denotes a hybrid code map object.</xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:element name="IdentifiableObjectTarget" type="EmptyType">
    <xs:annotation>
      <xs:documentation>IdentifiableObjectTarget is an empty element that denotes an identifiable object target object.</xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:element name="Level" type="EmptyType">
    <xs:annotation>
      <xs:documentation>Level is an empty element that denotes a level object.</xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:element name="MeasureDescriptor" type="EmptyType">
    <xs:annotation>
      <xs:documentation>MeasureDescriptor is an empty element that denotes a measure descriptor object.</xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:element name="MeasureDimension" type="EmptyType">
    <xs:annotation>
      <xs:documentation>MeasureDimension is an empty element that denotes a measure dimension object.</xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:element name="Metadataflow" type="EmptyType">
    <xs:annotation>
      <xs:documentation>Metadataflow is an empty element that denotes a metadata flow object.</xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:element name="MetadataAttribute" type="EmptyType">
    <xs:annotation>
      <xs:documentation>MetadataAttribute is an empty element that denotes a metadata attribute object.</xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:element name="MetadataSet" type="EmptyType">
    <xs:annotation>
      <xs:documentation>MetadataSet is an empty element that denotes a metadata set object.</xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:element name="MetadataStructure" type="EmptyType">
    <xs:annotation>
      <xs:documentation>MetadataStructure is an empty element that denotes a metadata structure definition object.</xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:element name="MetadataTarget" type="EmptyType">
    <xs:annotation>
      <xs:documentation>MetadataTarget is an empty element that denotes a metadata target object.</xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:element name="OrganisationMap" type="EmptyType">
    <xs:annotation>
      <xs:documentation>OrganisationMap is an empty element that denotes an organisation map object.</xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:element name="OrganisationSchemeMap" type="EmptyType">
    <xs:annotation>
      <xs:documentation>OrganisationSchemeMap is an empty element that denotes an organisation scheme map object.</xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:element name="OrganisationUnit" type="EmptyType">
    <xs:annotation>
      <xs:documentation>OrganisationUnit is an empty element that denotes an organisation unit object.</xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:element name="OrganisationUnitScheme" type="EmptyType">
    <xs:annotation>
      <xs:documentation>OrganisationUnitScheme is an empty element that denotes an organisation unit scheme object.</xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:element name="PrimaryMeasure" type="EmptyType">
    <xs:annotation>
      <xs:documentation>PrimaryMeasure is an empty element that denotes a primary measure object.</xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:element name="Process" type="EmptyType">
    <xs:annotation>
      <xs:documentation>Process is an empty element that denotes a process object.</xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:element name="ProcessStep" type="EmptyType">
    <xs:annotation>
      <xs:documentation>ProcessStep is an empty element that denotes a process step object.</xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:element name="ProvisionAgreement" type="EmptyType">
    <xs:annotation>
      <xs:documentation>ProvisionAgreement is an empty element that denotes a provision agreement object.</xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:element name="ReportingCategory" type="EmptyType">
    <xs:annotation>
      <xs:documentation>ReportingCategory is an empty element that denotes a reporting category object.</xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:element name="ReportingCategoryMap" type="EmptyType">
    <xs:annotation>
      <xs:documentation>ReportingCategoryMap is an empty element that denotes a reporting category map object.</xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:element name="ReportingTaxonomy" type="EmptyType">
    <xs:annotation>
      <xs:documentation>ReportingTaxonomy is an empty element that denotes a reporting taxonomy object.</xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:element name="ReportingTaxonomyMap" type="EmptyType">
    <xs:annotation>
      <xs:documentation>ReportingTaxonomyMap is an empty element that denotes a reporting taxonomy map object.</xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:element name="ReportPeriodTarget" type="EmptyType">
    <xs:annotation>
      <xs:documentation>ReportPeriodTarget is an empty element that denotes a report period target object.</xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:element name="ReportStructure" type="EmptyType">
    <xs:annotation>
      <xs:documentation>ReportStructure is an empty element that denotes a report structure object.</xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:element name="StructureMap" type="EmptyType">
    <xs:annotation>
      <xs:documentation>StructureMap is an empty element that denotes a structure map object.</xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:element name="StructureSet" type="EmptyType">
    <xs:annotation>
      <xs:documentation>StructureSet is an empty element that denotes a structure set object.</xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:element name="TimeDimension" type="EmptyType">
    <xs:annotation>
      <xs:documentation>TimeDimension is an empty element that denotes a time dimension object.</xs:documentation>
    </xs:annotation>
  </xs:element>


  <xs:element name="Transition" type="EmptyType">
    <xs:annotation>
      <xs:documentation>Transition is an empty element that denotes a transition object.</xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:complexType name="ObjectTypeListType">
    <xs:annotation>
      <xs:documentation>ObjectTypeListType provides a means for enumerating object types.</xs:documentation>
    </xs:annotation>
    <xs:all>
      <xs:element ref="Any" minOccurs="0"/>
      <xs:element ref="Agency" minOccurs="0"/>
      <xs:element ref="AgencyScheme" minOccurs="0"/>
      <xs:element ref="AttachmentConstraint" minOccurs="0"/>
      <xs:element ref="Attribute" minOccurs="0"/>
      <xs:element ref="AttributeDescriptor" minOccurs="0"/>
      <xs:element ref="Categorisation" minOccurs="0"/>
      <xs:element ref="Category" minOccurs="0"/>
      <xs:element ref="CategorySchemeMap" minOccurs="0"/>
      <xs:element ref="CategoryScheme" minOccurs="0"/>
      <xs:element ref="Code" minOccurs="0"/>
      <xs:element ref="CodeMap" minOccurs="0"/>
      <xs:element ref="Codelist" minOccurs="0"/>
      <xs:element ref="CodelistMap" minOccurs="0"/>
      <xs:element ref="ComponentMap" minOccurs="0"/>
      <xs:element ref="Concept" minOccurs="0"/>
      <xs:element ref="ConceptMap" minOccurs="0"/>
      <xs:element ref="ConceptScheme" minOccurs="0"/>
      <xs:element ref="ConceptSchemeMap" minOccurs="0"/>
      <xs:element ref="ContentConstraint" minOccurs="0"/>
      <xs:element ref="Dataflow" minOccurs="0"/>
      <xs:element ref="DataConsumer" minOccurs="0"/>
      <xs:element ref="DataConsumerScheme" minOccurs="0"/>
      <xs:element ref="DataProvider" minOccurs="0"/>
      <xs:element ref="DataProviderScheme" minOccurs="0"/>
      <xs:element ref="DataSetTarget" minOccurs="0"/>
      <xs:element ref="DataStructure" minOccurs="0"/>
      <xs:element ref="Dimension" minOccurs="0"/>
      <xs:element ref="DimensionDescriptor" minOccurs="0"/>
      <xs:element ref="DimensionDescriptorValuesTarget" minOccurs="0"/>
      <xs:element ref="GroupDimensionDescriptor" minOccurs="0"/>
      <xs:element ref="HierarchicalCode" minOccurs="0"/>
      <xs:element ref="HierarchicalCodelist" minOccurs="0"/>
      <xs:element ref="Hierarchy" minOccurs="0"/>
      <xs:element ref="HybridCodelistMap" minOccurs="0"/>
      <xs:element ref="HybridCodeMap" minOccurs="0"/>
      <xs:element ref="IdentifiableObjectTarget" minOccurs="0"/>
      <xs:element ref="Level" minOccurs="0"/>
      <xs:element ref="MeasureDescriptor" minOccurs="0"/>
      <xs:element ref="MeasureDimension" minOccurs="0"/>
      <xs:element ref="Metadataflow" minOccurs="0"/>
      <xs:element ref="MetadataAttribute" minOccurs="0"/>
      <xs:element ref="MetadataSet" minOccurs="0"/>
      <xs:element ref="MetadataStructure" minOccurs="0"/>
      <xs:element ref="MetadataTarget" minOccurs="0"/>
      <xs:element ref="OrganisationMap" minOccurs="0"/>
      <xs:element ref="OrganisationSchemeMap" minOccurs="0"/>
      <xs:element ref="OrganisationUnit" minOccurs="0"/>
      <xs:element ref="OrganisationUnitScheme" minOccurs="0"/>
      <xs:element ref="PrimaryMeasure" minOccurs="0"/>
      <xs:element ref="Process" minOccurs="0"/>
      <xs:element ref="ProcessStep" minOccurs="0"/>
      <xs:element ref="ProvisionAgreement" minOccurs="0"/>
      <xs:element ref="ReportingCategory" minOccurs="0"/>
      <xs:element ref="ReportingCategoryMap" minOccurs="0"/>
      <xs:element ref="ReportingTaxonomy" minOccurs="0"/>
      <xs:element ref="ReportingTaxonomyMap" minOccurs="0"/>
      <xs:element ref="ReportPeriodTarget" minOccurs="0"/>
      <xs:element ref="ReportStructure" minOccurs="0"/>
      <xs:element ref="StructureMap" minOccurs="0"/>
      <xs:element ref="StructureSet" minOccurs="0"/>
      <xs:element ref="TimeDimension" minOccurs="0"/>
      <xs:element ref="Transition" minOccurs="0"/>
    </xs:all>
  </xs:complexType>

  <xs:complexType name="MaintainableObjectTypeListType">
    <xs:annotation>
      <xs:documentation>MaintainableObjectTypeListType provides a means for enumerating maintainable object types.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="ObjectTypeListType">
        <xs:all>
          <xs:element ref="AgencyScheme" minOccurs="0"/>
          <xs:element ref="AttachmentConstraint" minOccurs="0"/>
          <xs:element ref="Categorisation" minOccurs="0"/>
          <xs:element ref="CategoryScheme" minOccurs="0"/>
          <xs:element ref="Codelist" minOccurs="0"/>
          <xs:element ref="ConceptScheme" minOccurs="0"/>
          <xs:element ref="ContentConstraint" minOccurs="0"/>
          <xs:element ref="Dataflow" minOccurs="0"/>
          <xs:element ref="DataConsumerScheme" minOccurs="0"/>
          <xs:element ref="DataProviderScheme" minOccurs="0"/>
          <xs:element ref="DataStructure" minOccurs="0"/>
          <xs:element ref="HierarchicalCodelist" minOccurs="0"/>
          <xs:element ref="Metadataflow" minOccurs="0"/>
          <xs:element ref="MetadataStructure" minOccurs="0"/>
          <xs:element ref="OrganisationUnitScheme" minOccurs="0"/>
          <xs:element ref="Process" minOccurs="0"/>
          <xs:element ref="ProvisionAgreement" minOccurs="0"/>
          <xs:element ref="ReportingTaxonomy" minOccurs="0"/>
          <xs:element ref="StructureSet" minOccurs="0"/>
        </xs:all>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

</xs:schema>
