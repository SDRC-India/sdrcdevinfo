<?xml version="1.0" encoding="UTF-8"?>
<!-- Copyright SDMX 2010 - http://www.sdmx.org -->
<xs:schema targetNamespace="http://www.sdmx.org/resources/sdmxml/schemas/v2_1/registry"
           elementFormDefault="qualified"
           xmlns:xs="http://www.w3.org/2001/XMLSchema"
           xmlns="http://www.sdmx.org/resources/sdmxml/schemas/v2_1/registry"
           xmlns:common="http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common"
           xmlns:structure="http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure">
  <xs:import namespace="http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common" schemaLocation="SDMXCommon.xsd"/>
  <xs:import namespace="http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure" schemaLocation="SDMXStructure.xsd"/>

  <xs:annotation>
    <xs:appinfo>SDMX Registry Namespace Module</xs:appinfo>
    <xs:documentation>The registry namespace module describes the standard interfaces for interactions with a set of registry services. For convenience, this module has been broken down into sub-modules for the different registry functions.</xs:documentation>
  </xs:annotation>

  <xs:annotation>
    <xs:appinfo>SDMX Base Registry Module</xs:appinfo>
    <xs:documentation>The base registry module defines the common constructs that a reused across multiple registry functions.</xs:documentation>
  </xs:annotation>

  <xs:complexType name="RegistrationType">
    <xs:annotation>
      <xs:documentation>Registration provides the information needed for data and reference metadata set registration. A data source must be supplied here if not already provided in the provision agreement. The data set or metadata set must be associated with a provision agreement,  a metadata flow, or a dataflow definition. If possible, the provision agreement should be specified. Only in cases where this is not possible should the dataflow or metadata flow be used.</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="ProvisionAgreement" type="common:ProvisionAgreementReferenceType">
        <xs:annotation>
          <xs:documentation>ProvisionAgreement provides a reference to the provision agreement that the data is being registered against.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="Datasource" type="DataSourceType">
        <xs:annotation>
          <xs:documentation>Datasource identifies the data source(s) where the registered data can be retrieved.</xs:documentation>
        </xs:annotation>
        <xs:unique name="RegistrationType_DistinctSourceType">
          <xs:selector xpath="*"/>
          <xs:field xpath="@TYPE"/>
        </xs:unique>
      </xs:element>
    </xs:sequence>
    <xs:attribute name="id" type="common:IDType" use="optional">
      <xs:annotation>
        <xs:documentation>The id attribute holds a registry assigned identification for the registration. This must be provided in a response message (unless an error occurred while submitting a new registration), and should be included when updating or deleting a registration.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="validFrom" type="xs:dateTime" use="optional">
      <xs:annotation>
        <xs:documentation>The validFrom attribute provides an inclusive start date for providing supplemental validity information about the registration, so that data visibility from the registry can be controlled by the registrant.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="validTo" type="xs:dateTime" use="optional">
      <xs:annotation>
        <xs:documentation>The validFrom attribute provides an inclusive end date for providing supplemental validity information about the registration, so that data visibility from the registry can be controlled by the registrant.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="lastUpdated" type="xs:dateTime" use="optional">
      <xs:annotation>
        <xs:documentation>The lastUpdated attribute provides a timestamp for the last time the data source was updated.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="indexTimeSeries" type="xs:boolean" default="false">
      <xs:annotation>
        <xs:documentation>The indexTimeSeries, if true, indicates that the registry must index all time series for the registered data. The default value is false, and the attribute will always be assumed false when the provision agreement references a metadata flow.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="indexDataSet" type="xs:boolean" default="false">
      <xs:annotation>
        <xs:documentation>The indexDataSet, if true, indicates that the registry must index the range of actual (present) values for each dimension of the data set or identifier component of the metadata set (as indicated in the set's structure definition). The default value is false.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="indexAttributes" type="xs:boolean" default="false">
      <xs:annotation>
        <xs:documentation>The indexAttributes, if true, indicates that the registry must index the range of actual (present) values for each attribute of the data set or the presence of the metadata attributes of the metadata set (as indicated in the set's structure definition). The default value is false.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="indexReportingPeriod" type="xs:boolean" default="false">
      <xs:annotation>
        <xs:documentation>The indexReportingPeriod, if true, indicates that the registry must index the time period ranges for which data is present for the data source. The default value is false, and the attribute will always be assumed false when the provision agreement references a metadata flow.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>

  <xs:complexType name="DataSourceType">
    <xs:annotation>
      <xs:documentation>DataSourceType specifies the properties of a data or metadata source. Either a simple data source, a queryable data source, or both must be specified.</xs:documentation>
    </xs:annotation>
    <xs:choice maxOccurs="2">
      <xs:element name="SimpleDataSource" type="xs:anyURI">
        <xs:annotation>
          <xs:documentation>SimpleDatasource describes a data source that is an SDMX-ML data or metadata message. It requires only the URL of the data.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="QueryableDataSource" type="QueryableDataSourceType">
        <xs:annotation>
          <xs:documentation>QueryableDatasource describes a data source that must be able to accept an SDMX-ML Query Message, and respond appropriately.</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:choice>
  </xs:complexType>

  <xs:complexType name="SimpleDataSourceType">
    <xs:annotation>
      <xs:documentation>SimpleDataSourceType describes a simple data source. The URL of the data is contained in the content.</xs:documentation>
    </xs:annotation>
    <xs:simpleContent>
      <xs:extension base="xs:anyURI">
        <xs:attribute name="TYPE" type="xs:string" fixed="SIMPLE">
          <xs:annotation>
            <xs:documentation>TYPE is a fixed attribute that is used to ensure only one simple data source may be provided, when it is referenced in a uniqueness constraint.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>

  <xs:complexType name="QueryableDataSourceType">
    <xs:annotation>
      <xs:documentation>QueryableDataSourceType describes a queryable data source, and add a fixed attribute for ensuring only one queryable source can be provided.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="common:QueryableDataSourceType">
        <xs:attribute name="TYPE" type="xs:string" fixed="QUERY">
          <xs:annotation>
            <xs:documentation>TYPE is a fixed attribute that is used to ensure only one queryable data source may be provided, when it is referenced in a uniqueness constraint.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:simpleType name="IDQueryType">
    <xs:annotation>
      <xs:documentation>IDQueryType is a simple type that allows for an identifier to be substituted with a wild card character ("%").</xs:documentation>
    </xs:annotation>
    <xs:union memberTypes="common:IDType common:WildCardValueType"/>
  </xs:simpleType>

  <xs:simpleType name="NestedIDQueryType">
    <xs:annotation>
      <xs:documentation>NestedIDQueryType is a simple type that allows for a nested identifier to be substituted with a wild card character ("%").</xs:documentation>
    </xs:annotation>
    <xs:union memberTypes="common:NestedIDType common:WildCardValueType"/>
  </xs:simpleType>

  <xs:simpleType name="VersionQueryType">
    <xs:annotation>
      <xs:documentation>VersionQueryType is a simple type that allows for a version number to be substituted with a wild card character ("%") or a late bound character ("*").</xs:documentation>
    </xs:annotation>
    <xs:union memberTypes="common:VersionQueryType common:WildCardValueType"/>
  </xs:simpleType>

  <xs:complexType name="IdentifiableQueryType">
    <xs:annotation>
      <xs:documentation>IdentifiableQueryType describes the structure of a query for an identifiable object.</xs:documentation>
    </xs:annotation>
    <xs:attribute name="id" type="IDQueryType" default="%">
      <xs:annotation>
        <xs:documentation>The id attribute is used to query for an object based on its identifier. This is either an explicit value, or completely wild cared with the "%" value.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>

  <xs:complexType name="VersionableQueryType">
    <xs:annotation>
      <xs:documentation>VersionableQueryType describes the structure of a query for a versionable object.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="IdentifiableQueryType">
        <xs:attribute name="version" type="VersionQueryType" default="*">
          <xs:annotation>
            <xs:documentation>The version attribute is used to query for an object based on its version. This can be and explicit value, wild-carded ("%"), or late-bound ("*"). A wild carded version will match any version of the object where as a late-bound version will only match the latest version.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="MaintainableQueryType">
    <xs:annotation>
      <xs:documentation>MaintainableQueryType describes the structure of a query for a maintainable object.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="VersionableQueryType">
        <xs:attribute name="agencyID" type="NestedIDQueryType" default="%">
          <xs:annotation>
            <xs:documentation>The agencyID attribute is used to query for an object based on its maintenance agency's identifier. This is either an explicit value, or completely wild cared with the "%" value.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="StatusMessageType">
    <xs:annotation>
      <xs:documentation>StatusMessageType carries the text of error messages and/or warnings in response to queries or requests.</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="MessageText" type="common:StatusMessageType" minOccurs="0" maxOccurs="unbounded">
        <xs:annotation>
          <xs:documentation>MessageText contains the text of the error and/or warning message. It can occur multiple times to communicate message for multiple warnings or errors.</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
    <xs:attribute name="status" type="StatusType" use="required">
      <xs:annotation>
        <xs:documentation>The status attribute carries the status of the query or request.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>

  <xs:simpleType name="StatusType">
    <xs:annotation>
      <xs:documentation>StatusType provides an enumeration of values that detail the status of queries or requests.</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:NMTOKEN">
      <xs:enumeration value="Success">
        <xs:annotation>
          <xs:documentation>Query or request successful.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="Warning">
        <xs:annotation>
          <xs:documentation>Query or request successful, but with warnings.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="Failure">
        <xs:annotation>
          <xs:documentation>Query or request not successful.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>

  <xs:annotation>
    <xs:appinfo>SDMX Registration Registry Module</xs:appinfo>
    <xs:documentation>The registration registry module defines the constructs that are used for the maintenance and discovery of data and reference metadata in a registry.</xs:documentation>
  </xs:annotation>

  <xs:complexType name="SubmitRegistrationsRequestType">
    <xs:annotation>
      <xs:documentation>SubmitRegistrationsRequestType defines the payload of a request message used to submit addtions, updates, or deletions of data/metadata set registrations.</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="RegistrationRequest" type="RegistrationRequestType" maxOccurs="unbounded">
        <xs:annotation>
          <xs:documentation>RegistrationRequest provides the details of a requested registration and the action to take on it. A reference to a provision agreement that exists in the registry must be provide along with a simple and/or queryable data source. The id should only be provided when updating or deleting a registration.</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="RegistrationRequestType">
    <xs:annotation>
      <xs:documentation>RegistrationRequestType describes the structure of a single registration request. It contains the details of a registation and an action field to indicate the action to be taken on the contained registration.</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="Registration" type="RegistrationType">
        <xs:annotation>
          <xs:documentation>Registration contains the details of the data/metadata set registration to be added, updated, or deleted.</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
    <xs:attribute name="action" type="common:ActionType" use="required">
      <xs:annotation>
        <xs:documentation>The action attribute indicates whether this is an addition, a modification, or a deletion of a registration.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>

  <xs:complexType name="SubmitRegistrationsResponseType">
    <xs:annotation>
      <xs:documentation>SubmitRegistrationsResponseType describes the structure of a registration response. For each submitted registration in the request, a registration status is provided. The status elements should be provided in the same order as the submitted registrations, although each status will echo the request to ensure accurate processing of the responses.</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="RegistrationStatus" type="RegistrationStatusType" maxOccurs="unbounded">
        <xs:annotation>
          <xs:documentation>RegistrationStatus provided the status details for the submitted registration. It echoes the original submission and provides status information about the request.</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="RegistrationStatusType">
    <xs:annotation>
      <xs:documentation>RegistrationStatusType describes the structure of a registration status.</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="Registration" type="RegistrationType">
        <xs:annotation>
          <xs:documentation>Registration, at the very least echoes the submitted registration. It the request was to create a new registration and it was successful, an id must be supplied.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="StatusMessage" type="StatusMessageType">
        <xs:annotation>
          <xs:documentation>StatusMessage provides that status for the registration request, and if necessary, any error or warning information.</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="QueryRegistrationRequestType">
    <xs:annotation>
      <xs:documentation>QueryRegistrationRequestType describes the structure of a registration query request. The type of query (data, reference metadata, or both) must be specified. It is possible to query for registrations for a particular provision agreement, data provider, or structure usage, or to query for all registrations in the registry. In addition the search can be refined by providing constraints in the form of explicit time periods, constraint regions, and key sets. When constraint regions and key sets are provided they will be effectively processed by first matching all data for the included keys and regions (all available data if there are none) and then removing any data matching the excluded keys or regions.</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="QueryType" type="QueryTypeType">
        <xs:annotation>
          <xs:documentation>QueryType defines the type of sets (data, metadata, or both) that are being queried for.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:choice>
        <xs:element name="All" type="common:EmptyType">
          <xs:annotation>
            <xs:documentation>All indicates that all registrations meeting the other criteria of the query should be returned.</xs:documentation>
          </xs:annotation>
        </xs:element>
        <xs:element name="ProvisionAgreement" type="common:ProvisionAgreementReferenceType">
          <xs:annotation>
            <xs:documentation>ProvisionAgreement provides a reference to a provision agreement in the registry, for which all registered sets meeting the other criteria of this query should be returned. The reference is provided as a URN and/or a complete set of reference fields.</xs:documentation>
          </xs:annotation>
        </xs:element>
        <xs:element name="DataProvider" type="common:DataProviderReferenceType">
          <xs:annotation>
            <xs:documentation>DataProvider provides a reference to a data provider in the registry, for which all registered sets meeting the other criteria of this query should be returned. The reference is provided as a URN and/or a complete set of reference fields.</xs:documentation>
          </xs:annotation>
        </xs:element>
        <xs:element name="Dataflow" type="common:DataflowReferenceType">
          <xs:annotation>
            <xs:documentation>Dataflow provides a reference to a data flow in the registry, for which all registered sets meeting the other criteria of this query should be returned. The reference is provided as a URN and/or a complete set of reference fields.</xs:documentation>
          </xs:annotation>
        </xs:element>
        <xs:element name="Metadataflow" type="common:MetadataflowReferenceType">
          <xs:annotation>
            <xs:documentation>Metadataflow provides a reference to a metadata flow in the registry, for which all registered sets meeting the other criteria of this query should be returned. The reference is provided as a URN and/or a complete set of reference fields</xs:documentation>
          </xs:annotation>
        </xs:element>
      </xs:choice>
      <xs:element name="ReferencePeriod" type="common:ReferencePeriodType" minOccurs="0">
        <xs:annotation>
          <xs:documentation>ReferencePeriod provides an inclusive start and end date for the data or metadata being sought.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:element name="DataKeySet" type="structure:DataKeySetType">
          <xs:annotation>
            <xs:documentation>DataKeySet is used to provide a set of included or excluded keys which serves to refine the data being sought.</xs:documentation>
          </xs:annotation>
        </xs:element>
        <xs:element name="MetadataKeySet" type="structure:MetadataKeySetType">
          <xs:annotation>
            <xs:documentation>MetadataKeySet is used to provide a set of included or excluded keys which serves to refine the data being sought.</xs:documentation>
          </xs:annotation>
        </xs:element>
        <xs:element name="CubeRegion" type="common:CubeRegionType">
          <xs:annotation>
            <xs:documentation>CubeRegion is used to provide sets of include or excluded values for dimensions when querying for data.</xs:documentation>
          </xs:annotation>
        </xs:element>
        <xs:element name="MetadataTargetRegion" type="common:MetadataTargetRegionType">
          <xs:annotation>
            <xs:documentation>MetadataTargetRegion is used to provide sets of included or excluded values for identifier components when querying for metadata.</xs:documentation>
          </xs:annotation>
        </xs:element>
      </xs:choice>
    </xs:sequence>
    <xs:attribute name="returnConstraints" type="xs:boolean" default="false">
      <xs:annotation>
        <xs:documentation>The returnConstraints attribute determines whether information about the constraints on the data or metadata sets returned should also be sent the results.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>

  <xs:complexType name="QueryRegistrationResponseType">
    <xs:annotation>
      <xs:documentation>QueryRegistrationResponseType describes the structure of a registration query response. It provides a status for the request, and if successful, the resulting data and/or metadata results.</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="StatusMessage" type="StatusMessageType">
        <xs:annotation>
          <xs:documentation>StatusMessage provides that status for the registration query request, and if necessary, any error or warning information.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="QueryResult" type="QueryResultType" minOccurs="0" maxOccurs="unbounded">
        <xs:annotation>
          <xs:documentation>QueryResult contains a result for a successful registration query. It can occur multiple times, for each registration the meets the conditions specified in the query.</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="QueryResultType">
    <xs:annotation>
      <xs:documentation>QueryResultType describes the structure of a query result for a single data source. Either a data result or metadata result is detailed, depending on the data source.</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:choice>
        <xs:element name="DataResult" type="ResultType"/>
        <xs:element name="MetadataResult" type="ResultType"/>
      </xs:choice>
    </xs:sequence>
    <xs:attribute name="timeSeriesMatch" type="xs:boolean" use="required">
      <xs:annotation>
        <xs:documentation>The timeSeriesMatch attribute is true when the result is an exact match with the key found in the registry - that is, when the registered data source provides a matching key. It is set to false when the data source is registered with cube-region constraints, or in any other circumstance when it cannot be established that the sought-for keys have been exactly matched. This is always true when the resulting data source is the source of a metadata set.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>

  <xs:complexType name="ResultType">
    <xs:annotation>
      <xs:documentation>ResultType contains the details about a data or metadata source, through the complete registration information. In addition, a reference to the content constraints for the data source may be provided, if the query requested this information.</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="Registration" type="RegistrationType">
        <xs:annotation>
          <xs:documentation>Registration provides the details of a matching registration. In addition to the data source and provision agreement information, the id of the registration must also be provided.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="ContentConstraint" type="common:ContentConstraintReferenceType" minOccurs="0" maxOccurs="unbounded">
        <xs:annotation>
          <xs:documentation>ContentConstraint provides a reference to a content constraint in the registry for the resulting data source (or possibly constraints base on the registration provision agreement, data provider, structure usage, or structure). The reference is provided for by a URN and/or a complete set of reference fields.</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>

  <xs:simpleType name="QueryTypeType">
    <xs:annotation>
      <xs:documentation>QueryType provides an enumeration of values which specify the objects in the result-set for a registry query.</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:NMTOKEN">
      <xs:enumeration value="DataSets">
        <xs:annotation>
          <xs:documentation>Only references data sets should be returned.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="MetadataSets">
        <xs:annotation>
          <xs:documentation>Only references to metadata sets should be returned.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="AllSets">
        <xs:annotation>
          <xs:documentation>References to both data sets and metadata sets should be returned.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>

  <xs:annotation>
    <xs:appinfo>SDMX Structure Registry Module</xs:appinfo>
    <xs:documentation>The structure registry module defines the constructs that are used for the maintenance and discovery of structural metadata in a registry.</xs:documentation>
  </xs:annotation>

  <xs:complexType name="SubmitStructureRequestType">
    <xs:annotation>
      <xs:documentation>SubmitStructureRequestType describes the structure of a structure submission. Structural components are provided either in-line or referenced via a SDMX-ML Structure message external to the registry. A default action and external reference resolution action are all provided for each of the contained components, but can be overridden on a per component basis.</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:choice>
        <xs:element name="StructureLocation" type="xs:anyURI">
          <xs:annotation>
            <xs:documentation>StructureLocation provides the location of a SDMX-ML Structure message, external to the repository that can be retrieved by the repository submission service.</xs:documentation>
          </xs:annotation>
        </xs:element>
        <xs:element ref="structure:Structures">
          <xs:annotation>
            <xs:documentation>Structures allows for the inline definition of structural components for submission.</xs:documentation>
          </xs:annotation>
        </xs:element>
      </xs:choice>
      <xs:element name="SubmittedStructure" type="SubmittedStructureType" minOccurs="0" maxOccurs="unbounded">
        <xs:annotation>
          <xs:documentation>SubmittedStructure contains a reference to one of the structural maintainable artefacts detailed in the external SDMX-ML Structure message or in-line and provides an override for the default action. This should only be used if the action to be performed on the referenced structural object is different than the default action. For example, one may want to append all structural components of a structure message, save one codelist. This codelist could be referenced in a submitted structure element and given an action of Informational.</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
    <xs:attribute name="action" type="common:ActionType" default="Append">
      <xs:annotation>
        <xs:documentation>The action attribute indicates the default action (append-add, replace-update, delete, or no action-informational) to be taken on all structural components in either the external SDMX-ML Structure message or the in-line components. The default action is Append. The Replace action is not applicable to final structures in the repository, and will produce an error condition, as these can be versioned but not modified. To submit a later version of a structural object, the object should include the incremented version number.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="externalDependencies" type="xs:boolean" default="false">
      <xs:annotation>
        <xs:documentation>The externalDependencies attribute indicates the default resolution of external dependencies. This should be set to true if the repository is expected to use external reference URLs in the structural components to retrieve any externally referenced objects that is used by a non-external object.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>

  <xs:complexType name="SubmittedStructureType">
    <xs:annotation>
      <xs:documentation>SubmittedStructureType generally references a submitted structural object. When used in a submit structure request, its purpose is to override the default action or external dependency resolution behavior. If neither of these indicators are set, then it will be ignored. In a submit structure response, it is used to reference a submitted object for the purpose of providing a status for the submission. In this case, the action attribute should be populated in order to echo the requested action.</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="MaintainableObject" type="common:MaintainableReferenceType"/>
    </xs:sequence>
    <xs:attribute name="action" type="common:ActionType" use="optional">
      <xs:annotation>
        <xs:documentation>The action attribute will indicate the action to be taken on the referenced structural object. This should be provided when this structure is used in a submit structure response.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="externalDependencies" type="xs:boolean" use="optional">
      <xs:annotation>
        <xs:documentation>The externalDependencies attribute should be set to true if the repository is expected to use external reference URLs in the structural components to retrieve objects on which the referenced object has dependencies. (Thus, if a key family referenced here is being submitted to the repository, and the structure message has URLs which point to the locations of the codelists it uses, then this attribute should be set to true). This should not be provided when this structure is used in a submit structure response.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>

  <xs:complexType name="SubmitStructureResponseType">
    <xs:annotation>
      <xs:documentation>SubmitStructureResponseType describes the structure of a response to a structure submission. For each submitted structure, a Result will be returned.</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="SubmissionResult" type="SubmissionResultType" maxOccurs="unbounded">
        <xs:annotation>
          <xs:documentation>SubmissionResult provides a status for each submitted structural object.</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="SubmissionResultType">
    <xs:annotation>
      <xs:documentation>SubmissionResultType provides the status of the structural object submission request. It will identify the object submitted, report back the action requested, and convey the status and any error messages which are relevant to the submission.</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="SubmittedStructure" type="SubmittedStructureType">
        <xs:annotation>
          <xs:documentation>SubmittedStructure provides a reference to the submitted structural object and echoes back the action requested for it.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="StatusMessage" type="StatusMessageType">
        <xs:annotation>
          <xs:documentation>StatusMessage provides that status for the submission of the structural object, and if necessary, any error or warning information.</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>

  <xs:annotation>
    <xs:appinfo>SDMX Subscription Registry Module</xs:appinfo>
    <xs:documentation>The subscription registry module defines the constructs that are used for the maintenance and usage of notification subscriptions in a registry.</xs:documentation>
  </xs:annotation>

  <xs:complexType name="SubmitSubscriptionsRequestType">
    <xs:annotation>
      <xs:documentation>SubmitSubscriptionsRequestType defines the payload of a request message used to submit addtions, updates, or deletions of subscriptions. Subscriptions are submitted to the registry to subscribe to registration and change events for specific registry resources.</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="SubscriptionRequest" type="SubscriptionRequestType" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="SubscriptionType">
    <xs:annotation>
      <xs:documentation>SubscriptionType describes the details of a subscription to a registration or change event for registry resources. When it occurs as the content of a response message, the registry URN must be provide, unless the response is a failure notification for the creation of a new subscription.</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="Organisation" type="common:OrganisationReferenceType">
        <xs:annotation>
          <xs:documentation>Organisation provides a reference to the organisation that owns this subscription. The reference is provided via a URN and/or a complete set of reference fields.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="RegistryURN" type="xs:anyURI" minOccurs="0">
        <xs:annotation>
          <xs:documentation>RegistryURN is used to identify the subscription in the case of deletion or modification. This should be provided in all response messages, unless the response it a notification of the failure to create a newly submitted subscription - in which case there will be no registry assigned URN.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="NotificationMailTo" type="NotificationURLType" minOccurs="0" maxOccurs="unbounded">
        <xs:annotation>
          <xs:documentation>NotificationMailTo holds an e-mail address (the "mailto:" protocol). Multiple email address can be notified for a single subscription.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="NotificationHTTP" type="NotificationURLType" minOccurs="0" maxOccurs="unbounded">
        <xs:annotation>
          <xs:documentation>NotificationHTTP holds an http address to which notifications can be addressed as POSTs. Multiple http address may be notified for a single subscription event.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="SubscriberAssignedID" type="common:IDType" minOccurs="0">
        <xs:annotation>
          <xs:documentation>SubscriberAssignedID allows the subscriber to specify an identification which will be returned as part of the notification for the subscribed events. This should be used if multiple new requests are made, so that the responses can be accurately correlated to the requests.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="ValidityPeriod" type="ValidityPeriodType">
        <xs:annotation>
          <xs:documentation>Validity period sets a start and end date for the subscription.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="EventSelector" type="EventSelectorType">
        <xs:annotation>
          <xs:documentation>EventSelector indicates an event or events for the subscription.</xs:documentation>
        </xs:annotation>
        <xs:unique name="EventSelector_DistinctType">
          <xs:selector xpath="*"/>
          <xs:field xpath="@TYPE"/>
        </xs:unique>
      </xs:element>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="SubscriptionRequestType">
    <xs:annotation>
      <xs:documentation>SubscriptionRequestType describes the structure of a single subscription request. It contains subscription details and an action field to indicate the action to be taken on the contained subscription. Note that if the action is update or delete, then the registry supplied URN for the subscription must be included.</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="Subscription" type="SubscriptionType">
        <xs:annotation>
          <xs:documentation>Subscription contains the details of the subscription to be added, updated, or deleted.</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
    <xs:attribute name="action" type="common:ActionType" use="required">
      <xs:annotation>
        <xs:documentation>The action attribute indicates whether this is an addition, a modification, or a deletion of a subscription.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>

  <xs:complexType name="SubmitSubscriptionsResponseType">
    <xs:annotation>
      <xs:documentation>SubmitSubscriptionsResponseType describes the structure of the response to a new subscription submission. A status is provided for each subscription in the request.</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="SubscriptionStatus" type="SubscriptionStatusType" maxOccurs="unbounded">
        <xs:annotation>
          <xs:documentation>SubscriptionStatus contains information which describes the success or failure of a subscription request, providing any error messages in the event of failure. The statuses should occur in the same order as the requests when responding to a message with multiple subscription requests. If a subscriber-assigned identification for the subscription is provided, it will be returned to allow for accurate matching of the responses to the requests. A registry assigned URN will be returned for any successfully created, updated, or deleted subscription.</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="SubscriptionStatusType">
    <xs:annotation>
      <xs:documentation>SubscriptionStatusType describes the structure a status for a single subscription request.</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="SubscriptionURN" type="xs:anyURI" minOccurs="0">
        <xs:annotation>
          <xs:documentation>SubscriptionURN contains the registry generated URN for the subscription, and will be returned for any successfully created, updated, or deleted subscription. </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="SubscriberAssignedID" type="common:IDType" minOccurs="0">
        <xs:annotation>
          <xs:documentation>SubscriberAssignedID is the id assigned by the subscriber to the subscription. If it existed in the subscription request, it will be returned.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="StatusMessage" type="StatusMessageType">
        <xs:annotation>
          <xs:documentation>StatusMessage provides that status for the subscription request, and if necessary, any error or warning information.</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="QuerySubscriptionRequestType">
    <xs:annotation>
      <xs:documentation>QuerySubscriptionRequestType describes the structure of a query for subscriptions. Subscriptions for a given organisation may be retrieved.</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="Organisation" type="common:OrganisationReferenceType">
        <xs:annotation>
          <xs:documentation>Organisation provides a reference to the data consumer for which the subscription details should be returned.</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="QuerySubscriptionResponseType">
    <xs:annotation>
      <xs:documentation>QuerySubscriptionResponseType describes the structure of a subscription query response. A status will describe the success or failure of the request (and provide error or warning messages if necessary). If the query was successful, details of all of the organisation's subscriptions will be provided.</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="StatusMessage" type="StatusMessageType">
        <xs:annotation>
          <xs:documentation>StatusMessage provides that status for the query subscription request, and if necessary, any error or warning information.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="Subscription" type="SubscriptionType" minOccurs="0" maxOccurs="unbounded">
        <xs:annotation>
          <xs:documentation>Subscription contains the details of a subscription for the organisation. This may occur multiple times for each subscription.</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="NotifyRegistryEventType">
    <xs:annotation>
      <xs:documentation>NotifyRegistryEventType describes the structure a registry notification, in response to a subscription to a registry event. At a minimum, the event time, a reference to the change object, a reference to the underlying subscription triggering the notification, and the action that took place on the object are sent. In addition, the full details of the object may be provided at the discretion of the registry. In the event that the details are not sent, it will be possible to query for the details of the changed object using the reference provided.</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="EventTime" type="xs:dateTime">
        <xs:annotation>
          <xs:documentation>EventTime specifies the time of the triggering event.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:choice>
        <xs:element name="ObjectURN" type="xs:anyURI">
          <xs:annotation>
            <xs:documentation>ObjectURN provides the URN of the object on which the event occurred, unless the event is related to a registration, in which case the RegistrationID element should be used.</xs:documentation>
          </xs:annotation>
        </xs:element>
        <xs:element name="RegistrationID" type="common:IDType">
          <xs:annotation>
            <xs:documentation>RegistrationID provides the id of the registration that underwent an event.</xs:documentation>
          </xs:annotation>
        </xs:element>
      </xs:choice>
      <xs:element name="SubscriptionURN" type="xs:anyURI">
        <xs:annotation>
          <xs:documentation>SubscriptionURN provides the registry/repository URN of the subscription that is the cause of this notification being sent.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="EventAction" type="common:ActionType">
        <xs:annotation>
          <xs:documentation>EventAction indicates the nature of the event - whether the action was an addition, a modification, or a deletion.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:choice minOccurs="0">
        <xs:element name="StructuralEvent" type="StructuralEventType">
          <xs:annotation>
            <xs:documentation>StructuralEvent is used to provide the details of the structural object that has changed.</xs:documentation>
          </xs:annotation>
        </xs:element>
        <xs:element name="RegistrationEvent" type="RegistrationEventType">
          <xs:annotation>
            <xs:documentation>RegistrationEvent is used to provide the details or the registration object that has changed.</xs:documentation>
          </xs:annotation>
        </xs:element>
      </xs:choice>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="NotificationURLType">
    <xs:annotation>
      <xs:documentation>NotificationURLType describes the structure of an http or email address. The content holds the addresses while an attribute indicates whether or not is expects the contents in a SOAP message.</xs:documentation>
    </xs:annotation>
    <xs:simpleContent>
      <xs:extension base="xs:anyURI">
        <xs:attribute name="isSOAP" type="xs:boolean" default="false">
          <xs:annotation>
            <xs:documentation>The isSOAP attribute, if true, indicates the provided URL expects the notification to be sent in a SOAP message.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>

  <xs:complexType name="ValidityPeriodType">
    <xs:annotation>
      <xs:documentation>ValidityPeriodType specifies inclusive start and end-dates for the subscription period.</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="StartDate" type="xs:date">
        <xs:annotation>
          <xs:documentation>StartDate is an inclusive start date for the subscription.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="EndDate" type="xs:date">
        <xs:annotation>
          <xs:documentation>EndDate is an inclusive end date for the subscription.</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="EventSelectorType">
    <xs:annotation>
      <xs:documentation>EventSelectorType describes the details of the events for a subscription. It allows subscribers to specify registry and repository events for which they wish to receive notifications.</xs:documentation>
    </xs:annotation>
    <xs:choice maxOccurs="3">
      <xs:element name="StructuralRepositoryEvents" type="StructuralRepositoryEventsType">
        <xs:annotation>
          <xs:documentation>StructuralRepositoryEvents details structural events for the subscription.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="DataRegistrationEvents" type="DataRegistrationEventsType">
        <xs:annotation>
          <xs:documentation>DataRegistrationEvents details the data registration events for the subscription.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="MetadataRegistrationEvents" type="MetadataRegistrationEventsType">
        <xs:annotation>
          <xs:documentation>MetadataRegistrationEvents details the metadata registration events for the subscription.</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:choice>
  </xs:complexType>

  <xs:complexType name="StructuralRepositoryEventsType">
    <xs:annotation>
      <xs:documentation>StructuralRepositoryEventsType details the structural events for the subscription. At least one maintenance agency must be specified, although it may be given a wildcard value (meaning the subscription is for the structural events of all agencies). This can also be a list of agencies to allow the subscription to subscribe the events of more than one agency. It should be noted that when doing so, all of the subsequent objects are assumed to apply to every agency in the list. The subscription is then refined by detailing the structural objects maintained by the agency for which the subscription should apply. It is possible to explicitly select all object events, all objects of given types, or to individually list out specific objects. Note that for any object, it is also possible to provide an explicit URN to reference a distinct object. In this case, the reference to maintenance agency described above is ignored. Although it is not required, if specific objects are being referenced by explicit URNs, it is good practice to list the agencies.</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="AgencyID" type="NestedIDQueryType" maxOccurs="unbounded" default="%">
        <xs:annotation>
          <xs:documentation>AgencyID specifies a maintenance agency for the object or objects indicated in the other fields. This can be either a specific ID, or a single wildcard character ("%"). A wild card character can be used to select all agencies, allowing a subscription to all events for particular object types. This can occur multiple times to list a of group of maintenance agencies, creating event subscriptions for all of the subsequent objects for each agency in the group. Note that if multiple agencies are supplied, then the wildcard character should not be used for any of them.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:choice>
        <xs:element name="AllEvents" type="common:EmptyType">
          <xs:annotation>
            <xs:documentation>AllEvents creates a subscription to structural events for all structural objects maintained by the agencies referenced.</xs:documentation>
          </xs:annotation>
        </xs:element>
        <xs:choice maxOccurs="unbounded">
          <xs:element name="AgencyScheme" type="VersionableObjectEventType">
            <xs:annotation>
              <xs:documentation>AgencyScheme is used to subscribe to changes of agency schemes. The maintenance agencies of the object are those identified in the AgencyID collection, effectively making separate version of this query for each agency specified. The agency is ignored if the content of this is a URN, which references an explicit object. Otherwise, either all objects of this type or specific object according to the id and version fields can be selected.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="DataConsmerScheme" type="VersionableObjectEventType">
            <xs:annotation>
              <xs:documentation>DataConsmerScheme is used to subscribe to changes of data consumer schemes. The maintenance agencies of the object are those identified in the AgencyID collection, effectively making separate version of this query for each agency specified. The agency is ignored if the content of this is a URN, which references an explicit object. Otherwise, either all objects of this type or specific object according to the id and version fields can be selected.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="DataProviderScheme" type="VersionableObjectEventType">
            <xs:annotation>
              <xs:documentation>DataProviderScheme is used to subscribe to changes of data provider schemes. The maintenance agencies of the object are those identified in the AgencyID collection, effectively making separate version of this query for each agency specified. The agency is ignored if the content of this is a URN, which references an explicit object. Otherwise, either all objects of this type or specific object according to the id and version fields can be selected.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="OrganisationUnitScheme" type="VersionableObjectEventType">
            <xs:annotation>
              <xs:documentation>OrganisationUnitScheme is used to subscribe to changes of organisation unit schemes. The maintenance agencies of the object are those identified in the AgencyID collection, effectively making separate version of this query for each agency specified. The agency is ignored if the content of this is a URN, which references an explicit object. Otherwise, either all objects of this type or specific object according to the id and version fields can be selected.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="Dataflow" type="VersionableObjectEventType">
            <xs:annotation>
              <xs:documentation>Dataflow is used to subscribe to changes of data flows. The maintenance agencies of the object are those identified in the AgencyID collection, effectively making separate version of this query for each agency specified. The agency is ignored if the content of this is a URN, which references an explicit object. Otherwise, either all objects of this type or specific object according to the id and version fields can be selected.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="Metadataflow" type="VersionableObjectEventType">
            <xs:annotation>
              <xs:documentation>Metadataflow is used to subscribe to changes of metadata flows. The maintenance agencies of the object are those identified in the AgencyID collection, effectively making separate version of this query for each agency specified. The agency is ignored if the content of this is a URN, which references an explicit object. Otherwise, either all objects of this type or specific object according to the id and version fields can be selected.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="CategoryScheme" type="VersionableObjectEventType">
            <xs:annotation>
              <xs:documentation>CategoryScheme is used to subscribe to changes of category schemes. The maintenance agencies of the object are those identified in the AgencyID collection, effectively making separate version of this query for each agency specified. The agency is ignored if the content of this is a URN, which references an explicit object. Otherwise, either all objects of this type or specific object according to the id and version fields can be selected.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="Categorisation" type="IdentifiableObjectEventType">
            <xs:annotation>
              <xs:documentation>Categorisation is used to subscribe to changes of categorizations. The maintenance agencies of the object are those identified in the AgencyID collection, effectively making separate version of this query for each agency specified. The agency is ignored if the content of this is a URN, which references an explicit object. Otherwise, either all objects of this type or specific object according to the id field can be selected.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="Codelist" type="VersionableObjectEventType">
            <xs:annotation>
              <xs:documentation>Codelist is used to subscribe to changes of code lists. The maintenance agencies of the object are those identified in the AgencyID collection, effectively making separate version of this query for each agency specified. The agency is ignored if the content of this is a URN, which references an explicit object. Otherwise, either all objects of this type or specific object according to the id and version fields can be selected.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="HierarchicalCodelist" type="VersionableObjectEventType">
            <xs:annotation>
              <xs:documentation>HierarchicalCodelist is used to subscribe to changes of hierarchical code lists. The maintenance agencies of the object are those identified in the AgencyID collection, effectively making separate version of this query for each agency specified. The agency is ignored if the content of this is a URN, which references an explicit object. Otherwise, either all objects of this type or specific object according to the id and version fields can be selected.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="ConceptScheme" type="VersionableObjectEventType">
            <xs:annotation>
              <xs:documentation>ConceptScheme is used to subscribe to changes of concept schemes. The maintenance agencies of the object are those identified in the AgencyID collection, effectively making separate version of this query for each agency specified. The agency is ignored if the content of this is a URN, which references an explicit object. Otherwise, either all objects of this type or specific object according to the id and version fields can be selected.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="MetadataStructureDefinition" type="VersionableObjectEventType">
            <xs:annotation>
              <xs:documentation>MetadataStructureDefinition is used to subscribe to changes of metadata structure definitions. The maintenance agencies of the object are those identified in the AgencyID collection, effectively making separate version of this query for each agency specified. The agency is ignored if the content of this is a URN, which references an explicit object. Otherwise, either all objects of this type or specific object according to the id and version fields can be selected.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="KeyFamily" type="VersionableObjectEventType">
            <xs:annotation>
              <xs:documentation>KeyFamily is used to subscribe to changes of key families. The maintenance agencies of the object are those identified in the AgencyID collection, effectively making separate version of this query for each agency specified. The agency is ignored if the content of this is a URN, which references an explicit object. Otherwise, either all objects of this type or specific object according to the id and version fields can be selected.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="StructureSet" type="VersionableObjectEventType">
            <xs:annotation>
              <xs:documentation>StructureSet is used to subscribe to changes of structure sets. The maintenance agencies of the object are those identified in the AgencyID collection, effectively making separate version of this query for each agency specified. The agency is ignored if the content of this is a URN, which references an explicit object. Otherwise, either all objects of this type or specific object according to the id and version fields can be selected.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="ReportingTaxonomy" type="VersionableObjectEventType">
            <xs:annotation>
              <xs:documentation>ReportingTaxonomy is used to subscribe to changes of reporting taxonomies. The maintenance agencies of the object are those identified in the AgencyID collection, effectively making separate version of this query for each agency specified. The agency is ignored if the content of this is a URN, which references an explicit object. Otherwise, either all objects of this type or specific object according to the id and version fields can be selected.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="Process" type="VersionableObjectEventType">
            <xs:annotation>
              <xs:documentation>Process is used to subscribe to changes of processes. The maintenance agencies of the object are those identified in the AgencyID collection, effectively making separate version of this query for each agency specified. The agency is ignored if the content of this is a URN, which references an explicit object. Otherwise, either all objects of this type or specific object according to the id and version fields can be selected.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="AttachmentConstraint" type="VersionableObjectEventType">
            <xs:annotation>
              <xs:documentation>AttachmentConstraint is used to subscribe to changes of attachment constraints. The maintenance agencies of the object are those identified in the AgencyID collection, effectively making separate version of this query for each agency specified. The agency is ignored if the content of this is a URN, which references an explicit object. Otherwise, either all objects of this type or specific object according to the id and version fields can be selected.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="ContentConstraint" type="VersionableObjectEventType">
            <xs:annotation>
              <xs:documentation>ContentConstraint is used to subscribe to changes of content constraints. The maintenance agencies of the object are those identified in the AgencyID collection, effectively making separate version of this query for each agency specified. The agency is ignored if the content of this is a URN, which references an explicit object. Otherwise, either all objects of this type or specific object according to the id and version fields can be selected.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="ProvisionAgreement" type="VersionableObjectEventType">
            <xs:annotation>
              <xs:documentation>ProvisionAgreement is used to subscribe to changes of a provision agreement. The maintenance agencies of the object are those identified in the AgencyID collection, effectively making separate version of this query for each agency specified. The agency is ignored if the content of this is a URN, which references an explicit object. Otherwise, either all objects of this type or specific object according to the id and version fields can be selected.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:choice>
      </xs:choice>
    </xs:sequence>
    <xs:attribute name="TYPE" type="xs:string" fixed="STRUCTURE">
      <xs:annotation>
        <xs:documentation>TYPE is a fixed attribute that is used to ensure only of each event selector may be provided, when it is referenced in a uniqueness constraint.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>

  <xs:complexType name="IdentifiableObjectEventType">
    <xs:annotation>
      <xs:documentation>IdentifiableObjectEventType describes the structure of a reference to an identifiable object's events. Either all instances of the object matching the inherited criteria, a specific instance, or specific instances of the object may be selected.</xs:documentation>
    </xs:annotation>
    <xs:choice>
      <xs:element name="All" type="common:EmptyType">
        <xs:annotation>
          <xs:documentation>All subscribes to the events all instances of the containing object meeting the other criteria specified.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="URN" type="xs:anyURI">
        <xs:annotation>
          <xs:documentation>URN subscribes to the events of the specific instance of the object type referenced by this URN. Note that when this field is used, the agency information inherited from the structural repository event container is ignored.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:sequence>
        <xs:element name="ID" type="IDQueryType" default="%">
          <xs:annotation>
            <xs:documentation>ID subscribes to the events of the specific instance of the object type where the value provided here matches the id of the object. The default value is the wildcard character("%").</xs:documentation>
          </xs:annotation>
        </xs:element>
      </xs:sequence>
    </xs:choice>
  </xs:complexType>

  <xs:complexType name="VersionableObjectEventType">
    <xs:annotation>
      <xs:documentation>VersionableObjectEventType describes the structure of a reference to a versionable object's events. Either all instances of the object matching the inherited criteria, a specific instance, or specific instances of the object may be selected.</xs:documentation>
    </xs:annotation>
    <xs:choice>
      <xs:element name="All" type="common:EmptyType">
        <xs:annotation>
          <xs:documentation>All subscribes to the events all instances of the containing object meeting the other criteria specified.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="URN" type="xs:anyURI">
        <xs:annotation>
          <xs:documentation>URN subscribes to the events of the specific instance of the object type referenced by this URN. Note that when this field is used, the agency information inherited from the structural repository event container is ignored.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:sequence>
        <xs:element name="ID" type="IDQueryType" default="%">
          <xs:annotation>
            <xs:documentation>ID subscribes to the events of the specific instance of the object type where the value provided here matches the id of the object and the value provided in the version field matches the version of the object. The default value is the wildcard character("%").</xs:documentation>
          </xs:annotation>
        </xs:element>
        <xs:element name="Version" type="VersionQueryType" default="%">
          <xs:annotation>
            <xs:documentation>Version subscribes to the events of the specific instance of the object type where the value provided in the id field matches the id of the object and the value here matches the version of the object. The default value is the wildcard character("%"). Note that in addition to being wild-carded, this can also be bound to the latest version of the object with the late-bound character("*").</xs:documentation>
          </xs:annotation>
        </xs:element>
      </xs:sequence>
    </xs:choice>
  </xs:complexType>

  <xs:complexType name="DataRegistrationEventsType">
    <xs:annotation>
      <xs:documentation>DataRegistrationEventsType details the data registration events for the subscription. It is possible to subscribe to all data registration events in the repository, or specific events for; single registrations, provision agreements, data providers, data flows, key families, and categories that categorize data flows or key families.</xs:documentation>
    </xs:annotation>
    <xs:choice>
      <xs:element name="AllEvents" type="common:EmptyType">
        <xs:annotation>
          <xs:documentation>AllEvents subscribes to all data registration events in the repository.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:choice maxOccurs="unbounded">
        <xs:element name="RegistrationID" type="common:IDType">
          <xs:annotation>
            <xs:documentation>RegistrationID subscribes to all the data registration events for the unique registration referenced.</xs:documentation>
          </xs:annotation>
        </xs:element>
        <xs:element name="ProvisionAgreement" type="common:ProvisionAgreementReferenceType">
          <xs:annotation>
            <xs:documentation>ProvisionAgreementReference subscribes to all data registration events for the explicitly referenced provision agreement.</xs:documentation>
          </xs:annotation>
        </xs:element>
        <xs:element name="DataProvider" type="common:DataProviderReferenceType">
          <xs:annotation>
            <xs:documentation>DataProviderReference subscribes to all data registration events for the explicitly referenced data provider.</xs:documentation>
          </xs:annotation>
        </xs:element>
        <xs:element name="DataflowReference" type="MaintainableEventType">
          <xs:annotation>
            <xs:documentation>DataflowReference subscribes to all data registration events for the data flows referenced by this object. This may reference one or more data flows, as the specific references fields allow for a wild-carded value.</xs:documentation>
          </xs:annotation>
        </xs:element>
        <xs:element name="KeyFamilyReference" type="MaintainableEventType">
          <xs:annotation>
            <xs:documentation>KeyFamilyReference subscribes to all data registration events for the key families referenced by this object. This may reference one or more key families, as the specific references fields allow for a wild-carded value.</xs:documentation>
          </xs:annotation>
        </xs:element>
        <xs:element name="Category" type="common:CategoryReferenceType">
          <xs:annotation>
            <xs:documentation>Category subscribes to all data registration events for any data flows or key families that are categorized by the referenced category.</xs:documentation>
          </xs:annotation>
        </xs:element>
      </xs:choice>
    </xs:choice>
    <xs:attribute name="TYPE" type="xs:string" fixed="DATA">
      <xs:annotation>
        <xs:documentation>TYPE is a fixed attribute that is used to ensure only of each event selector may be provided, when it is referenced in a uniqueness constraint.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>

  <xs:complexType name="MetadataRegistrationEventsType">
    <xs:annotation>
      <xs:documentation>MetadataRegistrationEventsType details the metadata registration events for the subscription. It is possible to subscribe to all metadata registration events in the repository, or specific events for; single registrations, provision agreements, data providers, metadata flows, metadata structure definitions, and categories that categorize metadata flows or metadata structure definitions.</xs:documentation>
    </xs:annotation>
    <xs:choice>
      <xs:element name="AllEvents" type="common:EmptyType">
        <xs:annotation>
          <xs:documentation>AllEvents subscribes to all metadata registration events in the repository.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:choice maxOccurs="unbounded">
        <xs:element name="RegistrationID" type="common:IDType">
          <xs:annotation>
            <xs:documentation>RegistrationID subscribes to all the metadata registration events for the unique registration referenced.</xs:documentation>
          </xs:annotation>
        </xs:element>
        <xs:element name="ProvisionAgreement" type="common:ProvisionAgreementReferenceType">
          <xs:annotation>
            <xs:documentation>ProvisionAgreementReference subscribes to all metadata registration events for the explicitly referenced provision agreement.</xs:documentation>
          </xs:annotation>
        </xs:element>
        <xs:element name="DataProvider" type="common:DataProviderReferenceType">
          <xs:annotation>
            <xs:documentation>DataProvider subscribes to all metadata registration events for the explicitly referenced data provider.</xs:documentation>
          </xs:annotation>
        </xs:element>
        <xs:element name="MetadataflowReference" type="MaintainableEventType">
          <xs:annotation>
            <xs:documentation>MetadataflowReference subscribes to all metadata registration events for the metadata flows referenced by this object. This may reference one or more metadata flows, as the specific references fields allow for a wild-carded value.</xs:documentation>
          </xs:annotation>
        </xs:element>
        <xs:element name="MetadataStructureDefinitionReference" type="MaintainableEventType">
          <xs:annotation>
            <xs:documentation>MetadataStructureDefinitionReference subscribes to all metadata registration events for the metadata structure definitions referenced by this object. This may reference one or more metadata structure definitions, as the specific references fields allow for a wild-carded value.</xs:documentation>
          </xs:annotation>
        </xs:element>
        <xs:element name="Category" type="common:CategoryReferenceType">
          <xs:annotation>
            <xs:documentation>Category subscribes to all metadata registration events for any metadata flows or metadata structure definitions that are categorized by the referenced category.</xs:documentation>
          </xs:annotation>
        </xs:element>
      </xs:choice>
    </xs:choice>
    <xs:attribute name="TYPE" type="xs:string" fixed="METADATA">
      <xs:annotation>
        <xs:documentation>TYPE is a fixed attribute that is used to ensure only of each event selector may be provided, when it is referenced in a uniqueness constraint.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>

  <xs:complexType name="MaintainableEventType">
    <xs:annotation>
      <xs:documentation>MaintainableEventType provides a reference to a maintainable object's event with either the URN of the specific object, or a set of potentially wild-carded reference fields.</xs:documentation>
    </xs:annotation>
    <xs:choice>
      <xs:element name="URN" type="xs:anyURI">
        <xs:annotation>
          <xs:documentation>URN provides an explicit reference to a single object.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="Ref" type="MaintainableQueryType">
        <xs:annotation>
          <xs:documentation>Ref provides a reference to potentially many object through the use of possible wild-carded reference fields.</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:choice>
  </xs:complexType>

  <xs:complexType name="StructuralEventType">
    <xs:annotation>
      <xs:documentation>StructuralEventType provides the details of a structure event, specifically the object that changed.</xs:documentation>
    </xs:annotation>
    <xs:choice>
      <xs:element ref="structure:Structures">
        <xs:annotation>
          <xs:documentation>Structures contains the details of the structural object that has triggered the event. Although this container allows for multiple structural object, it should only contain the one changed object.</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:choice>
  </xs:complexType>

  <xs:complexType name="RegistrationEventType">
    <xs:annotation>
      <xs:documentation>This provides the details of a data or metadata registration event for the purposes of notification.</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="Registration" type="RegistrationType">
        <xs:annotation>
          <xs:documentation>Registration provides the changed details of the data or metadata registration.</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>

</xs:schema>