<?xml version="1.0" encoding="UTF-8"?>
<!-- Copyright SDMX 2010 - http://www.sdmx.org -->
<xs:schema elementFormDefault="qualified"
           targetNamespace="http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query"
           xmlns:xs="http://www.w3.org/2001/XMLSchema"
           xmlns="http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query"
           xmlns:query="http://www.sdmx.org/resources/sdmxml/schemas/v2_1/query"
           xmlns:common="http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common">
  <xs:import namespace="http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common" schemaLocation="SDMXCommon.xsd"/>

  <xs:annotation>
    <xs:appinfo>SDMX Query Namespace Module</xs:appinfo>
    <xs:documentation>The query namespace module describes the structure of the generic query message for use in web service environments. It contains constructs for querying for data, reference metadata, and structural metadata. For convenience, this module has been broken down into sub-modules for the different types of queries.</xs:documentation>
  </xs:annotation>

  <xs:annotation>
    <xs:appinfo>SDMX Base Query Module</xs:appinfo>
    <xs:documentation>The base query module provides the basic constructs of structural metadata and data/metadata queries.</xs:documentation>
  </xs:annotation>

  <!-- Base Query Constructs -->

  <xs:complexType name="ReturnDetailsBaseType" abstract="true">
    <xs:annotation>
      <xs:documentation>ReturnDetailsBaseType is an abstract type that forms the basis for any query return details.</xs:documentation>
    </xs:annotation>
    <xs:attribute name="defaultLimit" type="xs:integer" use="optional">
      <xs:annotation>
        <xs:documentation>The defaultLimit attribute is the suggested maximum response size in kilobytes.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="detail" type="xs:string" use="optional">
      <xs:annotation>
        <xs:documentation>>The detail attribute is used to indicate how much of the matched object should be returned.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>

  <!-- Base Structural Metadata Query Constructs -->

  <xs:complexType name="StructuralMetadataQueryType" abstract="true">
    <xs:annotation>
      <xs:documentation>StructureWhereQueryType is an abstract base type that serves as the basis for any structural metadata query. Concrete instances of this type are implied to be an and-query. A structural object will be returned for any object where all of the conditions are met.</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="ReturnDetails" type="StructureReturnDetailsType"/>
      <xs:element ref="StructuralMetadataWhere"/>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="StructureReturnDetailsBaseType" abstract="true">
    <xs:annotation>
      <xs:documentation>StructureReturnDetailsBaseType is an abstract base type which forms the basis of StructureReturnDetailsType.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="ReturnDetailsBaseType">
        <xs:attribute name="detail" type="StructureReturnDetailType" default="Full">
          <xs:annotation>
            <xs:documentation>The detail attribute is used to indicate whether the response to the query should return the full details of matched objects, or just a subset of the information should be returned. A value of "Full" indicates that the full details of all matched objects should be returned. A value of "CompleteStub" indicates that the identification information, name, description, and annotations for the matched object should be returned. A value of "Stub" indicates that just the identification information and name should be returned for the matched objects. Note that this applies only to the object(s) matched by the query parameters. The References element has a separate field for indicating the level of detail returned for referenced objects.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="StructureReturnDetailsType">
    <xs:annotation>
      <xs:documentation>StructureReturnDetailsType defines the structure of the return details for any structural metadata query.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="StructureReturnDetailsBaseType">
        <xs:sequence>
          <xs:element name="References" type="ReferencesType">
            <xs:annotation>
              <xs:documentation>References is used to communicate how objects that reference or are referenced by the object(s) being queried should be returned.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
        <xs:attribute name="returnMatchedArtefact" type="xs:boolean" default="true">
          <xs:annotation>
            <xs:documentation>The returnMatchedArtefact attribute indicates whether the object(s) match by the query should be returned. If this is set to false, only the reference objects from the match object(s) will be returned.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="MaintainableReturnDetailsType">
    <xs:annotation>
      <xs:documentation>MaintainableReturnDetailsType defines the structure for the return details of a non-item scheme maintainable object. It eliminates the detail options that are specific to searching an item scheme</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="StructureReturnDetailsType">
        <xs:sequence>
          <xs:element name="References" type="ReferencesType"/>
        </xs:sequence>
        <xs:attribute name="detail" type="MaintainableReturnDetailType" default="Full"/>
        <xs:attribute name="returnMatchedArtefact" type="xs:boolean" default="true"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="ReferencesType">
    <xs:annotation>
      <xs:documentation>ReferencesType defines the structure for indicating which referenced objects should be returned in a structural metadata query. It is possible to return both objects which reference the object(s) matched by the query and objects referenced from the match object(s). The type(s) of reference objects to be returned consists of a choice between None, All, Default, or an explicit list of object types.</xs:documentation>
    </xs:annotation>
    <xs:choice>
      <xs:element name="None" type="common:EmptyType">
        <xs:annotation>
          <xs:documentation>None indicates that no reference objects should be returned.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="All" type="common:EmptyType">
        <xs:annotation>
          <xs:documentation>All is a convenience to indicate that the sets indicated by the ParentsAndSiblings and Descendants should be returned.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="Parents" type="common:EmptyType">
        <xs:annotation>
          <xs:documentation>Parents is a convenience to indicate that any object that refers to the matched object should be returned. This is typically used when the query the goal is to find object refer to a set of unknown objects.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="ParentsAndSiblings" type="common:EmptyType">
        <xs:annotation>
          <xs:documentation>ParentsAndSiblings is a convenience to indicate that any object that refers to the matched object should be returned, along with any other objects referenced by those referring objects.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="Children" type="common:EmptyType">
        <xs:annotation>
          <xs:documentation>Children is a convenience to indicate that all object referred to by the matched object should be returned.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="Descendants" type="common:EmptyType">
        <xs:annotation>
          <xs:documentation>Descendants is a convenience to indicate that all object referred to by the matched object should be returned, along with any objects referenced by the referred objects, and so on. This is a deep resolution, where all outgoing references starting at the matched object are resolved.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="SpecificObjects" type="common:MaintainableObjectTypeListType">
        <xs:annotation>
          <xs:documentation>SpecificObjects is used to enumerate specific types of object to be returned. Theses objects will either refer to or are referred by the matched object. Only the maintainable objects listed here will be returned.</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:choice>
    <xs:attribute name="processConstraints" type="xs:boolean" default="false">
      <xs:annotation>
        <xs:documentation>The processConstraints attribute is used to request that the query process any relevant constraints for the match object(s) in order to return only the applicable portion of any referenced codelists. A value of "true" indicates that constraints should be processed.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="detail" type="MaintainableReturnDetailType" default="Full">
      <xs:annotation>
        <xs:documentation>The detail attribute indicates the amount of detail that should be returned for reference objects.  A value of "Full" indicates that the full details of all reference objects should be returned. A value of "CompleteStub" indicates that the identification information, name, description, and annotations for the reference object should be returned. A value of "Stub" indicates that just the identification information and name should be returned for the reference objects.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>

  <xs:simpleType name="StructureReturnDetailType">
    <xs:annotation>
      <xs:documentation>StructureReturnDetailType contains a set of enumerations that indicate how much detail should be returned for an object.</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="Stub">
        <xs:annotation>
          <xs:documentation>Only the identification information and name should be returned.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="CompleteStub">
        <xs:annotation>
          <xs:documentation>Identification information, name, description, and annotations should be returned.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="Full">
        <xs:annotation>
          <xs:documentation>The entire detail of the object should be returned.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="MatchedItems">
        <xs:annotation>
          <xs:documentation>For an item scheme, only the items matching the item where parameters will be returned. In the case that items are hierarchical, the entire hierarchy leading to the matched item will have to be returned.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="CascadedMatchedItems">
        <xs:annotation>
          <xs:documentation>For an item scheme, only the items matching the item where parameters, and their hierarchical child items will be returned. In the case that items are hierarchical, the entire hierarchy leading to the matched item will have to be returned.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>

  <xs:simpleType name="MaintainableReturnDetailType">
    <xs:annotation>
      <xs:documentation>MaintainableReturnDetailType contains a sub set of the enumerations defined in the ReturnDetailType. Enumerations relating specifically to item schemes are not included</xs:documentation>
    </xs:annotation>
    <xs:restriction base="StructureReturnDetailType">
      <xs:enumeration value="Stub"/>
      <xs:enumeration value="CompleteStub"/>
      <xs:enumeration value="Full"/>
    </xs:restriction>
  </xs:simpleType>

  <xs:element name="StructuralMetadataWhere" type="MaintainableWhereType" abstract="true">
    <xs:annotation>
      <xs:documentation>StructuralMetadataWhere is an abstract substitution head that forms the basis of any structural metadata query's details. This contains the actual parameters to be matched. These parameters are implicitly joined by an "and" connector (i.e. each of the parameters must be matched in order to satisfy the query). If it is necessary to supply "or" conditions for a parameter, this should be done by supplying multiple queries.</xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:complexType name="AnnotableWhereType" abstract="true">
    <xs:annotation>
      <xs:documentation>AnnotableWhereType is an abstract base type for querying an annotable artefact.</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="Annotation" type="AnnotationWhereType" minOccurs="0">
        <xs:annotation>
          <xs:documentation>Annotation is a parameter for matching the details of an annotatable object's annotations. It allows for querying based on the details of an annotation.</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="AnnotationWhereType">
    <xs:annotation>
      <xs:documentation>AnnotationWhereType defines the structure for querying the details of an annotation.</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="Type" type="QueryStringType" minOccurs="0">
        <xs:annotation>
          <xs:documentation>Type is a parameter for matching the type field of an annotation.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="Title" type="QueryStringType" minOccurs="0">
        <xs:annotation>
          <xs:documentation>Title is a parameter for matching the title field of an annotation.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="Text" type="QueryTextType" minOccurs="0">
        <xs:annotation>
          <xs:documentation>Text is a parameter for matching the text field of an annotation.</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="IdentifiableWhereType" abstract="true">
    <xs:annotation>
      <xs:documentation>IdentifiableWhereType is an abstract base type that serves as the basis for any query for an identifiable object.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="AnnotableWhereType">
        <xs:sequence>
          <xs:element name="URN" type="xs:anyURI" minOccurs="0">
            <xs:annotation>
              <xs:documentation>URN is used to match the urn of any SDMX object.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="ID" type="QueryIDType" minOccurs="0">
            <xs:annotation>
              <xs:documentation>ID is used to match the id of the identified object.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="NameableWhereType" abstract="true">
    <xs:annotation>
      <xs:documentation>NameableWhereType is an abstract base type that serves as the basis for any query for a nameable object.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="IdentifiableWhereType">
        <xs:sequence>
          <xs:element name="Name" type="QueryTextType" minOccurs="0">
            <xs:annotation>
              <xs:documentation>Name is used to match the name of the identified object. It may occur multiple times for its usage within an or-query or for multi-lingual searches, however if multiple values are supplied in an and-query (explicit or implicit), each name search will have to be found in order to constitute a match. The value here can either be an explicit value (exact match) or a regular expression pattern on which to match.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="Description" type="QueryTextType" minOccurs="0">
            <xs:annotation>
              <xs:documentation>Description is used to match the description of the identified object. It may occur multiple times for its usage within an or-query or for multi-lingual searches, however if multiple values are supplied in an and-query (explicit or implicit), each description search will have to be found in order to constitute a match. The value here can either be an explicit value (exact match) or a regular expression pattern on which to match.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="VersionableWhereType" abstract="true">
    <xs:annotation>
      <xs:documentation>VersionableQueryType is an abstract base type that serves as the basis for any query for a versionable object.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="NameableWhereType">
        <xs:sequence>
          <xs:element name="Version" type="common:VersionQueryType" minOccurs="0">
            <xs:annotation>
              <xs:documentation>Version is used to match the version of the versioned object. The version can be specified as either an explicit version number, or a late bound query where the latest version of an object will be returned.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="VersionTo" type="common:TimeRangeValueType" minOccurs="0">
            <xs:annotation>
              <xs:documentation>VersionTo is used to specify a range which the start date of the validity period of version should fall within to create a successful match.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="VersionFrom" type="common:TimeRangeValueType" minOccurs="0">
            <xs:annotation>
              <xs:documentation>VersionFrom is used to specify a range which the end date of the validity period of version should fall within to create a successful match.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="VersionActive" type="xs:boolean" minOccurs="0">
            <xs:annotation>
              <xs:documentation>VersionActive is used to request object with active or inactive versions, base on the version validity dates. A value of true indicates that only objects where the current date is within the validity period of the version will be matched.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="MaintainableWhereType" abstract="true">
    <xs:annotation>
      <xs:documentation>MaintainableQueryType is an abstract base type that serves as the basis for any query for a maintainable object.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="VersionableWhereType">
        <xs:sequence>
          <xs:element name="AgencyID" type="QueryNestedIDType" minOccurs="0">
            <xs:annotation>
              <xs:documentation>AgencyID is used to match the agency id of the maintained object.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
        <xs:attribute name="type" type="common:MaintainableTypeCodelistType" use="optional">
          <xs:annotation>
            <xs:documentation>The type attribute optionally defines the type of object being queried. For queries for distinct types of objects, a fixed value should be specified in the derived queries. For queries that serve to query for like types of objects, this should be required.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="ItemSchemeWhereType" abstract="true">
    <xs:annotation>
      <xs:documentation>ItemSchemeQueryType is an abstract base type that serves as the basis for any query for an item scheme.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="MaintainableWhereType">
        <xs:sequence>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element ref="ItemWhere"/>
          </xs:sequence>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:element name="ItemWhere" type="ItemWhereType" abstract="true">
    <xs:annotation>
      <xs:documentation>ItemWhere is an abstract substitution head to query for an item within a parent item where or an item scheme query. An item where query is implicitly an and-query - that is the conditions within the item where must all be met in order to return a match. If this is nested within another item where, the meaning is that the conditions specified must be matched within the hierarchy provided.</xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:complexType name="ItemWhereType" abstract="true">
    <xs:annotation>
      <xs:documentation>ItemQueryType is an abstract base type that serves as the basis for a query for an item within an item scheme query. A nested item where is provided to query for items nested within other items. The conditions within an item query are implied to be in an and-query. If an id and a child item where condition are supplied, then both conditions will have to met in order for the item query to return true. If, for instance, a query based on names in multiple languages is required, then multiple instances of the element utilizing this type should be used within an or-query container.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="NameableWhereType">
        <xs:choice minOccurs="0">
          <xs:element name="Parent" type="common:LocalItemReferenceType">
            <xs:annotation>
              <xs:documentation>Parent is used to query for an item where it declares the item referenced here as its parent. This is used for items that are not nested in a hierarchy. If child items are sought for an item that is contained in a nested hierarchy (e.g. a category) on can query directly for the parent category and request that the child items be returned by specifying cascadeMatchedItems in the detail field of the return details.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:sequence maxOccurs="unbounded">
            <xs:element ref="ItemWhere"/>
          </xs:sequence>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="StructureWhereType" abstract="true">
    <xs:annotation>
      <xs:documentation>StructureWhereType is an abstract base type that serves as the basis for a query for a structure object.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="MaintainableWhereType">
        <xs:sequence>
          <xs:element name="UsedConcept" type="common:ConceptReferenceType" minOccurs="0" maxOccurs="unbounded">
            <xs:annotation>
              <xs:documentation>UsedConcept is used to query for a structure that uses the referenced concept as the basis of one of its components.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="UsedRepresentation" type="common:ItemSchemeReferenceBaseType" minOccurs="0" maxOccurs="unbounded">
            <xs:annotation>
              <xs:documentation>UsedRepresentation is used to query for a structure that uses the referenced item scheme for the representation of one of its components.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element ref="ComponentListWhere"/>
          </xs:sequence>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element ref="ComponentWhere"/>
          </xs:sequence>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:element name="ComponentListWhere" type="ComponentListWhereType" abstract="true">
    <xs:annotation>
      <xs:documentation>ComponentListWhere is an abstract substitution head to query for a component list within a structure. A component list where query is implicitly an and-query - that is the conditions within the component list where must all be met in order to return a match.</xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:complexType name="ComponentListWhereType" abstract="true">
    <xs:annotation>
      <xs:documentation>ComponentListWhereType is an abstract base type that serves as the basis for a query for a component list within a structure query. A list of component where children are provided to query for the list's child components. The conditions within a component list query are implied to be in an and-query. If an id and a child component where condition are supplied, then both conditions will have to met in order for the component list query to return true. If, for instance, a query based on names in multiple languages is required, then multiple instances of the element utilizing this type should be used within an or-query container.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="IdentifiableWhereType">
        <xs:sequence minOccurs="0" maxOccurs="unbounded">
          <xs:element ref="ComponentWhere"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:element name="ComponentWhere" type="ComponentWhereType" abstract="true">
    <xs:annotation>
      <xs:documentation>ComponentWhere is an abstract substitution head to query for a component within a component list or a structure. A component where query is implicitly an and-query - that is the conditions within the component where must all be met in order to return a match.</xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:complexType name="ComponentWhereType" abstract="true">
    <xs:annotation>
      <xs:documentation>ComponentWhereType is an abstract base type that serves as the basis for a query for a component within a component list where or a structure query. A concept identity and a local representation condition are available to seek a component that utilizes a particular concept or representation scheme. The conditions within a component query are implied to be in an and-query. If an id and a concept identity condition are supplied, then both conditions will have to met in order for the component query to return true. If, for instance, a query based on names in multiple languages is required, then multiple instances of the element utilizing this type should be used within an or-query container.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="IdentifiableWhereType">
        <xs:sequence>
          <xs:element name="ConceptIdentity" type="common:ConceptReferenceType" minOccurs="0">
            <xs:annotation>
              <xs:documentation>ConceptIdentity is used to query for a structure component based on the concept from which it takes its semantic.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="Enumeration" type="common:ItemSchemeReferenceBaseType" minOccurs="0">
            <xs:annotation>
              <xs:documentation>Enumeration is used to query for a structure component based on the item scheme that is used as the enumeration for its representation. This enumeration may be explicit defined by the component (i.e. its local representation), or inherited from the concept from which the component takes its semantic (i.e. the concept core representation).</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="StructureUsageWhereType" abstract="true">
    <xs:annotation>
      <xs:documentation>StructureUsageWhereType is an abstract base type that serves as the basis for a query for a structure usage object.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="MaintainableWhereType">
        <xs:sequence>
          <xs:element name="Structure" type="common:StructureReferenceBaseType" minOccurs="0">
            <xs:annotation>
              <xs:documentation>Structure is used to match the structure referenced by a structure usage object. Only structure usages which reference the supplied structure will be returned.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <!-- Base Data Query Constructs -->

  <xs:complexType name="ConceptValueType">
    <xs:annotation>
      <xs:documentation>ConceptValueType describes the structure of a query for the value of the underlying concept of a component. It provides a reference to a concept in a concept scheme via a URN and/or a complete set of reference fields, as well as a numeric, text, or un-typed value.</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="Concept" type="common:ConceptReferenceType"/>
      <xs:choice>
        <xs:element ref="NumericValue" maxOccurs="2"/>
        <xs:element ref="TextValue" maxOccurs="unbounded"/>
        <xs:element ref="TimeValue" maxOccurs="2"/>
        <xs:element ref="Value"/>
      </xs:choice>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="CodeValueType">
    <xs:annotation>
      <xs:documentation>CodeValueType is used to query for data or reference metadata where a component which uses the referenced codelist as its representation enumeration has the value provided. Note that this is only applicable when the value is a coded value, which is to say that it does not apply to a codelist which is specified as the representation or an identifiable object target in a metadata target.</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="Codelist" type="common:CodelistReferenceType">
        <xs:annotation>
          <xs:documentation>Codelist references the codelist for which the coded value is being sought.</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
    <xs:attribute name="value" type="xs:string" use="required">
      <xs:annotation>
        <xs:documentation>The value attribute indicates the coded value that is to be queried for.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>

  <!-- Common Parameter Types -->

  <xs:element name="NumericValue" type="NumericValueType">
    <xs:annotation>
      <xs:documentation>NumericValue is used to query for a the value of a concept or component based on a numeric search. This is typically used when the value needs to be searched explicitly as a number, such as when data is sought with an observed value greater than some threshold. If only a simple match is required (i.e. the numeric value equals 'x') then the Value element can be used.</xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:element name="TextValue" type="QueryTextType">
    <xs:annotation>
      <xs:documentation>TextValue is used to query for the value of a concept or component based on textual parameters. The text value can be language specific (where  parallel multi-lingual values are available) and is qualified with an operator indicating how the supplied text should be matched against the sought components. If only a simple equality check is necessary, regardless of language, the Value element can be used.</xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:element name="TimeValue" type="TimePeriodValueType">
    <xs:annotation>
      <xs:documentation>TimeValue is used to query for the value of a concept or component based on time parameters. This is typically used when the value needs to be treated explicitly as a time, for example when searching for data after a particular point in time. If only a simple equality check is necessary, the Value element can be used.</xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:element name="Value" type="SimpleValueType">
    <xs:annotation>
      <xs:documentation>Value is used to query for the value of a component. This should be used for concepts or components based on a simple value (e.g. a code or a simple string). This should be used when a simple equal/not equal operator is all that is necessary for matching the sought value.</xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:complexType name="SimpleValueType">
    <xs:annotation>
      <xs:documentation>SimpleValueType describes the structure of a simple value query. A value is provided as the content in string format.</xs:documentation>
    </xs:annotation>
    <xs:simpleContent>
      <xs:extension base="xs:string">
        <xs:attribute name="operator" type="common:SimpleOperatorType" default="equal">
          <xs:annotation>
            <xs:documentation>The operator attribute indicates the operator to apply to the string value query. The options are equal and notEqual.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>

  <xs:complexType name="NumericValueType">
    <xs:annotation>
      <xs:documentation>NumericValueType describes the structure of a numeric query. A value is provided as the content in decimal format.</xs:documentation>
    </xs:annotation>
    <xs:simpleContent>
      <xs:extension base="xs:decimal">
        <xs:attribute name="operator" type="common:OrderedOperatorType" default="equal">
          <xs:annotation>
            <xs:documentation>The operator attribute indicates the operator to apply to the numeric value query, such as equal to or greater than.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>

  <xs:complexType name="QueryStringType">
    <xs:annotation>
      <xs:documentation>QueryStringType defines the structure of a string query.</xs:documentation>
    </xs:annotation>
    <xs:simpleContent>
      <xs:extension base="xs:string">
        <xs:attribute name="operator" type="common:TextOperatorType" default="equal">
          <xs:annotation>
            <xs:documentation>The operator attribute indicates how the supplied value should be applied to the objects being searched in order to constitute a match. For example, a value of "EqualTo" means the value of the field being search should exactly match the value supplied. See the defining type for further details.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>

  <xs:complexType name="QueryIDType">
    <xs:annotation>
      <xs:documentation>QueryIDType defines the structure of a query for an identifier.</xs:documentation>
    </xs:annotation>
    <xs:simpleContent>
      <xs:extension base="common:IDType">
        <xs:attribute name="operator" type="common:TextOperatorType" default="equal">
          <xs:annotation>
            <xs:documentation>The operator attribute indicates how the supplied value should be applied to the objects being searched in order to constitute a match. For example, a value of "EqualTo" means the value of the field being search should exactly match the value supplied. See the defining type for further details.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>

  <xs:complexType name="QueryNestedIDType">
    <xs:annotation>
      <xs:documentation>QueryNestedIDType defines the structure of a query for a nested identifier.</xs:documentation>
    </xs:annotation>
    <xs:simpleContent>
      <xs:extension base="common:NestedIDType">
        <xs:attribute name="operator" type="common:TextOperatorType" default="equal">
          <xs:annotation>
            <xs:documentation>The operator attribute indicates how the supplied value should be applied to the objects being searched in order to constitute a match. For example, a value of "EqualTo" means the value of the field being search should exactly match the value supplied. See the defining type for further details.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>

  <xs:complexType name="QueryTextType">
    <xs:annotation>
      <xs:documentation>QueryTextType describes the structure of a textual query value. A language must be specified if parallel multi-lingual values are available, otherwise it is ignored.</xs:documentation>
    </xs:annotation>
    <xs:simpleContent>
      <xs:extension base="common:TextType">
        <xs:attribute name="operator" type="common:TextOperatorType" default="equal">
          <xs:annotation>
            <xs:documentation>The operator attribute indicates how the supplied value should be applied to the objects being searched in order to constitute a match. For example, a value of "EqualTo" means the value of the field being search should exactly match the value supplied. See the defining type for further details.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>

  <xs:complexType name="TimePeriodValueType">
    <xs:annotation>
      <xs:documentation>TimePeriodValueType describes the structure of a time period query. A value is provided as the content in the SDMX time period format.</xs:documentation>
    </xs:annotation>
    <xs:simpleContent>
      <xs:extension base="common:ObservationalTimePeriodType">
        <xs:attribute name="operator" type="common:TimeOperatorType" default="equal">
          <xs:annotation>
            <xs:documentation>The operator attribute indicates the operator to apply to the value query, such as equal to or greater than.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="reportingYearStartDay" type="ReportingYearStartDayQueryType" use="optional" default="Any">
          <xs:annotation>
            <xs:documentation>The reportingYearStartDay attribute allows a reporting year start day to be specified for the reporting period time value. If this time value provided is not a report period, this value can be ignored. If an explicit value is provided, this will effectively turn the time parameter into a distinct time range. For example if the time parameter value is "2010-Q1" and this attribute has a value of "--04-01", the parameter will be treated as "2010-04-01/2010-06-30". If a value of "Any" is provided, then data will be matched regardless of its reporting year start day. For example, a query of 2011-A1 would return all data that belongs to a reporting year of 2011, regardless of the start day of the reporting year. For the puroses of matching data reporting against a Gregorian period against a time parameter value that is a reporting period, a value of "Any" will be treated as a start day of January 1. Therefore, if the time paramter value was 2011-A1, data reported against 2011 would be matched but data reporting against '2011-06/P1Y' would not be matched.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>

  <xs:simpleType name="ReportingYearStartDayQueryType">
    <xs:annotation>
      <xs:documentation>ReportingYearStartDayQueryType is a simple type for specifying the reporting year start day in a time query parameter. An explicit value or "Any" can be provided.</xs:documentation>
    </xs:annotation>
    <xs:union memberTypes="AnyQueryType xs:gMonthDay"/>
  </xs:simpleType>

  <xs:simpleType name="AnyQueryType">
    <xs:annotation>
      <xs:documentation>AnyQueryType is a single enumeration of the value "Any" which is meant to be used in union with other simple types when a query allows for any of the possible values.</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="Any"/>
    </xs:restriction>
  </xs:simpleType>

  <xs:annotation>
    <xs:appinfo>SDMX Categorisation Query Module</xs:appinfo>
    <xs:documentation>The categorisation query module provides the construct of a query for a categorisation.</xs:documentation>
  </xs:annotation>

  <xs:complexType name="CategorisationQueryType">
    <xs:annotation>
      <xs:documentation>CategorisationQueryType defines the structure of a categorisation query. The parameters for the query are contained in the CategorisationWhere element. The References element is used to indicate how objects that are referenced from the matched categorisations should be returned.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="StructuralMetadataQueryType">
        <xs:sequence>
          <xs:element name="ReturnDetails" type="MaintainableReturnDetailsType"/>
          <xs:element ref="CategorisationWhere"/>
        </xs:sequence>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:element name="CategorisationWhere" type="CategorisationWhereType" substitutionGroup="StructuralMetadataWhere">
    <xs:annotation>
      <xs:documentation>CategorisationWhere defines the parameters for a categorisation query. All parameters must be matched for an object to satisfy the query.In addition to querying based on the basic maintainable properties, it is also possible to search based on the source object being categorized and target category the object is categorized against.</xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:complexType name="CategorisationWhereBaseType" abstract="true">
    <xs:annotation>
      <xs:documentation>CategorisationWhereBaseType is an abstract base type which forms the basis for the CategorisationWhereType.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="MaintainableWhereType">
        <xs:sequence>
          <xs:element name="Annotation" type="AnnotationWhereType" minOccurs="0"/>
          <xs:element name="URN" type="xs:anyURI" minOccurs="0"/>
          <xs:element name="ID" type="QueryIDType" minOccurs="0"/>
          <xs:element name="Name" type="QueryTextType" minOccurs="0"/>
          <xs:element name="Description" type="QueryTextType" minOccurs="0"/>
          <xs:element name="Version" type="common:VersionQueryType" minOccurs="0"/>
          <xs:element name="VersionTo" type="common:TimeRangeValueType" minOccurs="0"/>
          <xs:element name="VersionFrom" type="common:TimeRangeValueType" minOccurs="0"/>
          <xs:element name="VersionActive" type="xs:boolean" minOccurs="0"/>
          <xs:element name="AgencyID" type="QueryNestedIDType" minOccurs="0"/>
        </xs:sequence>
        <xs:attribute name="type" type="common:MaintainableTypeCodelistType" use="optional" fixed="Categorisation"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="CategorisationWhereType">
    <xs:annotation>
      <xs:documentation>CategorisationWhereType contains a set of parameters for a categorisation query. All supplied parameters must be matched in order for an object to satisfy the query.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="CategorisationWhereBaseType">
        <xs:sequence>
          <xs:element name="CategoryScheme" type="common:CategorySchemeReferenceType" minOccurs="0">
            <xs:annotation>
              <xs:documentation>CategoryScheme references a category scheme for which categorisations or sought for any of the scheme's categories. Any categorisation which has a target of a category defined in the scheme will be returned.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="TargetCategory" type="common:CategoryReferenceType" minOccurs="0">
            <xs:annotation>
              <xs:documentation>TargetCategory references the category that defines the target of the categorisation (the category which an object is categorized against). Only categorisations which refence the category supplied here will be returned.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="ObjectReference" type="common:ObjectReferenceType" minOccurs="0">
            <xs:annotation>
              <xs:documentation>ObjectReference references the object that is the source of the categorisation (the object which is categorized). Only categorisations which reference the object supplied here will be returned.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="CategorisedObjectType" type="common:ObjectTypeCodelistType" minOccurs="0" maxOccurs="unbounded">
            <xs:annotation>
              <xs:documentation>CategorisedObjectType is used to specify the type of objects that are categorised by the categorisations being sought. For example, this could be used to find an caategorisation which classifies a code list.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:annotation>
    <xs:appinfo>SDMX Category Query Module</xs:appinfo>
    <xs:documentation>The category query module provides the construct of a query for a category scheme.</xs:documentation>
  </xs:annotation>

  <xs:complexType name="CategorySchemeQueryType">
    <xs:annotation>
      <xs:documentation>CategorySchemeQueryType defines the structure of a category scheme query. The parameters for the query are contained in the CategorySchemeWhere element. The References element is used to indicate how objects that reference the matched category scheme should be returned.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="StructuralMetadataQueryType">
        <xs:sequence>
          <xs:element name="ReturnDetails" type="StructureReturnDetailsType"/>
          <xs:element ref="CategorySchemeWhere"/>
        </xs:sequence>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:element name="CategorySchemeWhere" type="CategorySchemeWhereType" substitutionGroup="StructuralMetadataWhere">
    <xs:annotation>
      <xs:documentation>CategorySchemeWhere contains the parameters for a category scheme query. All parameters must be matched for an object to satisfy the query. In addition to querying based on the basic maintainable properties, it is also possible to search for a category scheme based on the details of its categories. In any case, the category scheme will be returned according the indicated return detail.</xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:complexType name="CategorySchemeWhereType">
    <xs:annotation>
      <xs:documentation>CategorySchemeWhereType defines the parameters of a category scheme query. All supplied parameters must be matched in order for an object to satisfy the query.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="ItemSchemeWhereType">
        <xs:sequence>
          <xs:element name="Annotation" type="AnnotationWhereType" minOccurs="0"/>
          <xs:element name="URN" type="xs:anyURI" minOccurs="0"/>
          <xs:element name="ID" type="QueryIDType" minOccurs="0"/>
          <xs:element name="Name" type="QueryTextType" minOccurs="0"/>
          <xs:element name="Description" type="QueryTextType" minOccurs="0"/>
          <xs:element name="Version" type="common:VersionQueryType" minOccurs="0"/>
          <xs:element name="VersionTo" type="common:TimeRangeValueType" minOccurs="0"/>
          <xs:element name="VersionFrom" type="common:TimeRangeValueType" minOccurs="0"/>
          <xs:element name="VersionActive" type="xs:boolean" minOccurs="0"/>
          <xs:element name="AgencyID" type="QueryNestedIDType" minOccurs="0"/>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element ref="CategoryWhere"/>
          </xs:sequence>
        </xs:sequence>
        <xs:attribute name="type" type="common:MaintainableTypeCodelistType" use="optional" fixed="CategoryScheme"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:element name="CategoryWhere" type="CategoryWhereType" substitutionGroup="ItemWhere">
    <xs:annotation>
      <xs:documentation>CategoryWhere is used to query for categories matching the parameters supplied. It allows for nested category queries so that hierarchical categories can be queried explicitly by their nested level, although a top level category will always result in a search for categories at any level. This is an implicit set of "and" parameters, meaning all of the conditions must be met in order to return a match.</xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:complexType name="CategoryWhereType">
    <xs:annotation>
      <xs:documentation>CategoryQueryWhereType contains a set of parameters for matching a category. All supplied parameters must be matched in order for an object to satisfy the query.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="ItemWhereType">
        <xs:sequence>
          <xs:element name="Annotation" type="AnnotationWhereType" minOccurs="0"/>
          <xs:element name="ID" type="QueryIDType" minOccurs="0"/>
          <xs:element name="Name" type="QueryTextType" minOccurs="0"/>
          <xs:element name="Description" type="QueryTextType" minOccurs="0"/>
          <xs:choice minOccurs="0">
            <xs:sequence maxOccurs="unbounded">
              <xs:element ref="CategoryWhere"/>
            </xs:sequence>
          </xs:choice>
        </xs:sequence>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:annotation>
    <xs:appinfo>SDMX Code List Query Module</xs:appinfo>
    <xs:documentation>The code list query module provides the construct of a query for a code list.</xs:documentation>
  </xs:annotation>

  <xs:complexType name="CodelistQueryType">
    <xs:annotation>
      <xs:documentation>CodelistQueryType defines the structure of a codelist query. The parameters for the query are contained in the CodelistWhere element. The References element is used to indicate how objects that reference the matched codelist should be returned.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="StructuralMetadataQueryType">
        <xs:sequence>
          <xs:element name="ReturnDetails" type="StructureReturnDetailsType"/>
          <xs:element ref="CodelistWhere"/>
        </xs:sequence>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:element name="CodelistWhere" type="CodelistWhereType" substitutionGroup="StructuralMetadataWhere">
    <xs:annotation>
      <xs:documentation>CodelistWhere defines the parameters for a codelist query. All parameters must be matched for an object to satisfy the query. In addition to querying based on the basic maintainable properties, it is also possible to search for a codlist based on the details of its codes. In any case, the codelist will be returned according the indicated return detail.</xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:complexType name="CodelistWhereType">
    <xs:annotation>
      <xs:documentation>CodelistWhereType contains the parameters of a codelist query. All supplied parameters must be matched in order for an object to satisfy the query.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="ItemSchemeWhereType">
        <xs:sequence>
          <xs:element name="Annotation" type="AnnotationWhereType" minOccurs="0"/>
          <xs:element name="URN" type="xs:anyURI" minOccurs="0"/>
          <xs:element name="ID" type="QueryIDType" minOccurs="0"/>
          <xs:element name="Name" type="QueryTextType" minOccurs="0"/>
          <xs:element name="Description" type="QueryTextType" minOccurs="0"/>
          <xs:element name="Version" type="common:VersionQueryType" minOccurs="0"/>
          <xs:element name="VersionTo" type="common:TimeRangeValueType" minOccurs="0"/>
          <xs:element name="VersionFrom" type="common:TimeRangeValueType" minOccurs="0"/>
          <xs:element name="VersionActive" type="xs:boolean" minOccurs="0"/>
          <xs:element name="AgencyID" type="QueryNestedIDType" minOccurs="0"/>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element ref="CodeWhere"/>
          </xs:sequence>
        </xs:sequence>
        <xs:attribute name="type" type="common:MaintainableTypeCodelistType" use="optional" fixed="Codelist"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:element name="CodeWhere" type="CodeWhereType" substitutionGroup="ItemWhere">
    <xs:annotation>
      <xs:documentation>CodeWhere is used to query for codes matching the parameters supplied. This is an implicit set of "and" parameters, meaning all of the conditions must be met in order to return a match.</xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:complexType name="CodeWhereType">
    <xs:annotation>
      <xs:documentation>CodeWhereType defines a set of parameters for matching a code. All supplied parameters must be matched in order for an object to satisfy the query.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="ItemWhereType">
        <xs:sequence>
          <xs:element name="Annotation" type="AnnotationWhereType" minOccurs="0"/>
          <xs:element name="ID" type="QueryIDType" minOccurs="0"/>
          <xs:element name="Name" type="QueryTextType" minOccurs="0"/>
          <xs:element name="Description" type="QueryTextType" minOccurs="0"/>
          <xs:choice minOccurs="0">
            <xs:element name="Parent" type="common:LocalCodeReferenceType"/>
          </xs:choice>
        </xs:sequence>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:annotation>
    <xs:appinfo>SDMX Concept Query Module</xs:appinfo>
    <xs:documentation>The concept query module provides the construct of a query for a concept schemes.</xs:documentation>
  </xs:annotation>

  <xs:complexType name="ConceptSchemeQueryType">
    <xs:annotation>
      <xs:documentation>ConceptSchemeQueryType defines the structure of a category scheme query. The parameters for the query are contained in the ConceptSchemeWhere element. The References element is used to indicate how objects that reference or are referenced from the matched concept scheme should be returned.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="StructuralMetadataQueryType">
        <xs:sequence>
          <xs:element name="ReturnDetails" type="StructureReturnDetailsType"/>
          <xs:element ref="ConceptSchemeWhere"/>
        </xs:sequence>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:element name="ConceptSchemeWhere" type="ConceptSchemeWhereType" substitutionGroup="StructuralMetadataWhere">
    <xs:annotation>
      <xs:documentation>ConceptSchemeWhere defines the parameters for a concept scheme query. All parameters must be matched for an object to satisfy the query. In addition to querying based on the basic maintainable properties, it is also possible to search for a concept scheme based on the details of its concepts. In any case, the concept scheme will be returned according the indicated return detail.</xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:complexType name="ConceptSchemeWhereType">
    <xs:annotation>
      <xs:documentation>ConceptSchemeWhereType contains the parameters of a concept scheme query. All supplied parameters must be matched in order for an object to satisfy the query.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="ItemSchemeWhereType">
        <xs:sequence>
          <xs:element name="Annotation" type="AnnotationWhereType" minOccurs="0"/>
          <xs:element name="URN" type="xs:anyURI" minOccurs="0"/>
          <xs:element name="ID" type="QueryIDType" minOccurs="0"/>
          <xs:element name="Name" type="QueryTextType" minOccurs="0"/>
          <xs:element name="Description" type="QueryTextType" minOccurs="0"/>
          <xs:element name="Version" type="common:VersionQueryType" minOccurs="0"/>
          <xs:element name="VersionTo" type="common:TimeRangeValueType" minOccurs="0"/>
          <xs:element name="VersionFrom" type="common:TimeRangeValueType" minOccurs="0"/>
          <xs:element name="VersionActive" type="xs:boolean" minOccurs="0"/>
          <xs:element name="AgencyID" type="QueryNestedIDType" minOccurs="0"/>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element ref="ConceptWhere"/>
          </xs:sequence>
        </xs:sequence>
        <xs:attribute name="type" type="common:MaintainableTypeCodelistType" use="optional" fixed="ConceptScheme"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:element name="ConceptWhere" type="ConceptWhereType" substitutionGroup="ItemWhere">
    <xs:annotation>
      <xs:documentation>ConceptWhere is used to query for concepts matching the parameters supplied. This is an implicit set of "and" parameters, meaning all of the conditions must be met in order to return a match.</xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:complexType name="ConceptWhereBaseType" abstract="true">
    <xs:annotation>
      <xs:documentation>ConceptWhereBaseType is an abstract base type that forms the basis for the ConceptWhereType.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="ItemWhereType">
        <xs:sequence>
          <xs:element name="Annotation" type="AnnotationWhereType" minOccurs="0"/>
          <xs:element name="ID" type="QueryIDType" minOccurs="0"/>
          <xs:element name="Name" type="QueryTextType" minOccurs="0"/>
          <xs:element name="Description" type="QueryTextType" minOccurs="0"/>
          <xs:choice minOccurs="0">
            <xs:element name="Parent" type="common:LocalConceptReferenceType"/>
          </xs:choice>
        </xs:sequence>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="ConceptWhereType">
    <xs:annotation>
      <xs:documentation>ConceptWhereType defines a set of parameters for matching a category. All supplied parameters must be matched in order for an object to satisfy the query. In addition to the base parameters for an item, a concept can be queried based on the item scheme that is used as a core representation.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ConceptWhereBaseType">
        <xs:sequence>
          <xs:element name="Enumeration" type="common:CodelistReferenceType" minOccurs="0">
            <xs:annotation>
              <xs:documentation>Enumeration is used to query for a concept based on the codelist that is uses as the enumeration for its core representation.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:annotation>
    <xs:appinfo>SDMX Constraint Query Module</xs:appinfo>
    <xs:documentation>The constraint query module provides the construct of a query for an attachment or content constraint.</xs:documentation>
  </xs:annotation>

  <xs:complexType name="ConstraintQueryType">
    <xs:annotation>
      <xs:documentation>ConstraintQueryType defines the structure of a constraint query. The parameters for the query are contained in the ConstraintWhere element. The References element is used to indicate how objects that are referenced from the matched constraint should be returned.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="StructuralMetadataQueryType">
        <xs:sequence>
          <xs:element name="ReturnDetails" type="MaintainableReturnDetailsType"/>
          <xs:element ref="ConstraintWhere"/>
        </xs:sequence>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:element name="ConstraintWhere" type="ConstraintWhereType" substitutionGroup="StructuralMetadataWhere">
    <xs:annotation>
      <xs:documentation>AttachmentConstraintWhere contains the parameters for a constraint query. All parameters must be matched for an object to satisfy the query. In addition to querying based on the basic maintainable properties, it is also possible to search for a constraint based on the objects it applies to.</xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:complexType name="ConstraintWhereBaseType" abstract="true">
    <xs:annotation>
      <xs:documentation>ConstraintWhereBaseType is an abstract base type which forms the basis for the ConstraintWhereType.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="MaintainableWhereType">
        <xs:sequence>
          <xs:element name="Annotation" type="AnnotationWhereType" minOccurs="0"/>
          <xs:element name="URN" type="xs:anyURI" minOccurs="0"/>
          <xs:element name="ID" type="QueryIDType" minOccurs="0"/>
          <xs:element name="Name" type="QueryTextType" minOccurs="0"/>
          <xs:element name="Description" type="QueryTextType" minOccurs="0"/>
          <xs:element name="Version" type="common:VersionQueryType" minOccurs="0"/>
          <xs:element name="VersionTo" type="common:TimeRangeValueType" minOccurs="0"/>
          <xs:element name="VersionFrom" type="common:TimeRangeValueType" minOccurs="0"/>
          <xs:element name="VersionActive" type="xs:boolean" minOccurs="0"/>
          <xs:element name="AgencyID" type="QueryNestedIDType" minOccurs="0"/>
        </xs:sequence>
        <xs:attribute name="type" type="ConstraintTypeCodelistType" use="optional" default="Constraint">
          <xs:annotation>
            <xs:documentation>The type attribute indicates the type of constraint that is being queried for, with a default of Any, meaning both content and attachment constraints will be searched.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="ConstraintWhereType">
    <xs:annotation>
      <xs:documentation>ConstraintWhereType contains the parameters of a constraint query. All supplied parameters must be matched in order for an object to stratify the query.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ConstraintWhereBaseType">
        <xs:sequence>
          <xs:element name="ConstraintAttachmentWhere" type="ConstraintAttachmentWhereType" minOccurs="0">
            <xs:annotation>
              <xs:documentation>ConstraintAttachmentWhere identifies a collection of objects to which a constraint may be attached. This container is an implicit and-query, meaning all of the objects referenced in here must be part of the constraint attachment in order for a constraint to match.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
        <xs:attribute name="allowable" type="xs:boolean" use="optional">
          <xs:annotation>
            <xs:documentation>The allowable attribute indicates whether the returned search should be limited to only allowable constraints. This only applies to content constraint. If this attribute has a value  of true, this indicates that only matching allowable content constraints should be returned. If this is false, than only actual content constraints returned. If no value is provided, all matching content constraints will be returned, regardless of whether they are stating actual or allowable content.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="ConstraintAttachmentWhereType">
    <xs:annotation>
      <xs:documentation>ConstraintAttachmentWhereType describes the structure for querying for a constraint based on the objects it is attached to. A constraint attachment query is implicitly an and-query meaning all of the referenced objects must be part of a constraints attachment in order to return a match. It is treated as a condition within its parent query.</xs:documentation>
    </xs:annotation>
    <xs:choice maxOccurs="unbounded">
      <xs:element name="DataProvider" type="common:DataProviderReferenceType">
        <xs:annotation>
          <xs:documentation>DataProviderReference references a data provider to which a constraint is attached. It is referenced via a URN and/or a full set of reference fields. If a constraint is attached to the data provider referenced, a match will be returned.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="Dataflow" type="common:DataflowReferenceType">
        <xs:annotation>
          <xs:documentation>DataflowReference references a data flow to which a constraint is attached. It is referenced via a URN and/or a full set of reference fields. If a constraint is attached to the data flow referenced, a match will be returned.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="DataStructure" type="common:DataStructureReferenceType">
        <xs:annotation>
          <xs:documentation>DataStructureReference references a data structure definition to which a constraint is attached. It is referenced via a URN and/or a full set of reference fields. If a constraint is attached to the data structure definition referenced, a match will be returned.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="Metadataflow" type="common:MetadataflowReferenceType">
        <xs:annotation>
          <xs:documentation>MetadataflowReference references a metadata flow to which a constraint is attached. It is referenced via a URN and/or a full set of reference fields. If a constraint is attached to the metadata flow referenced, a match will be returned.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="MetadataStructure" type="common:MetadataStructureReferenceType">
        <xs:annotation>
          <xs:documentation>MetadataStructureReference references a metadata structure definition to which a constraint is attached. It is referenced via a URN and/or a full set of reference fields. If a constraint is attached to the metadata structure definition referenced, a match will be returned.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="ProvisionAgreement" type="common:ProvisionAgreementReferenceType">
        <xs:annotation>
          <xs:documentation>ProvisionAgreementReference references a provision agreement to which a constraint is attached. It is referenced via a URN and/or a full set of reference fields. If a constraint is attached to the provision agreement referenced, a match will be returned.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="DataSet" type="common:SetReferenceType">
        <xs:annotation>
          <xs:documentation>DataSetReference references a data set to which a constraint is attached. If a constraint is attached to the data set referenced, a match will be returned.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="MetadataSet" type="common:SetReferenceType">
        <xs:annotation>
          <xs:documentation>MetadataSetReference references a reference metadata set to which a constraint is attached. If a constraint is attached to the metadata set referenced, a match will be returned.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="DataSourceURL" type="xs:anyURI">
        <xs:annotation>
          <xs:documentation>DataSourceURL references a queryable data source to which a constraint it attached. The data source is referenced by its data URL. If a constraint is attached to the data source described (by matching the data URL), a match will be returned.</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:choice>
  </xs:complexType>

  <xs:simpleType name="ConstraintTypeCodelistType">
    <xs:annotation>
      <xs:documentation>ConstraintTypeCodelistType defines a list of types for a constraint for the purpose of querying.</xs:documentation>
    </xs:annotation>
    <xs:restriction base="common:MaintainableTypeCodelistType">
      <xs:enumeration value="Constraint"/>
      <xs:enumeration value="AttachmentConstraint"/>
      <xs:enumeration value="ContentConstraint"/>
    </xs:restriction>
  </xs:simpleType>

  <xs:annotation>
    <xs:appinfo>SDMX Data Query Module</xs:appinfo>
    <xs:documentation>The data query module provides the construct of a query for a data.</xs:documentation>
  </xs:annotation>

  <xs:complexType name="DataQueryType">
    <xs:annotation>
      <xs:documentation>DataQueryType defines the structure of a query for data. This is generally appliable for any data request, but can be refined depending on the type of data being queried (generic or structured, time series specific or not) to the requirements of the requested format.</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="ReturnDetails" type="DataReturnDetailsType">
        <xs:annotation>
          <xs:documentation>ReturnDetails contains the details of how the returned data should be structured, what type of data (e.g. active or deleted observations), and the limit of the amount of observations to be returned.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="DataWhere" type="DataParametersAndType">
        <xs:annotation>
          <xs:documentation>DataWhere contains the details of the data query.</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="TimeSeriesDataQueryType">
    <xs:annotation>
      <xs:documentation>TimeSeriesDataQueryType defines the structure of a query for data. This specifically applies to requesting time series only structured data.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="DataQueryType">
        <xs:sequence>
          <xs:element name="ReturnDetails" type="TimeSeriesDataReturnDetailsType"/>
          <xs:element name="DataWhere" type="DataParametersAndType"/>
        </xs:sequence>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="GenericDataQueryType">
    <xs:annotation>
      <xs:documentation>GenericDataQueryType defines the structure of a query for data formatted in the generic format. This structure generally applies to any type of generic data request, but can be refined to request time series only data.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="DataQueryType">
        <xs:sequence>
          <xs:element name="ReturnDetails" type="GenericDataReturnDetailsType"/>
          <xs:element name="DataWhere" type="DataParametersAndType"/>
        </xs:sequence>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="GenericTimeSeriesDataQueryType">
    <xs:annotation>
      <xs:documentation>GenericTimeSeriesDataQueryType defines the structure of a query for time series only data formatted in the generic format.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="GenericDataQueryType">
        <xs:sequence>
          <xs:element name="ReturnDetails" type="GenericTimeSeriesDataReturnDetailsType"/>
          <xs:element name="DataWhere" type="DataParametersAndType"/>
        </xs:sequence>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="DataReturnDetailsBaseType" abstract="true">
    <xs:annotation>
      <xs:documentation>DataReturnDetailsBaseType is an abstract base type which forms the basis of the DataReturnDetailsType.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="ReturnDetailsBaseType">
        <xs:attribute name="detail" type="DataReturnDetailType" default="Full">
          <xs:annotation>
            <xs:documentation>The detail attribute is used to indicate whether the response to the query should return the full details of matched data sets, or just a subset of the information should be returned. A value of "Full" indicates that the complete data set (including data and documentation) will be returned. A value of "DataOnly" indicates that only the observation values and keys should be returned. A value of "SeriesKeyOnly" indicates that only the Series elements and their keys (i.e. Dimension values) should be returned. A value of "NoData" indicates that only documentation should be returned (i.e. the DataSet, Group, and Series level Attributes).</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="DataReturnDetailsType">
    <xs:annotation>
      <xs:documentation>DataReturnDetailsType specifies the specifics of the how data should be returned, including how it should be structured and how many and what type (e.g. active or deleted) observations should be returned.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="DataReturnDetailsBaseType">
        <xs:sequence>
          <xs:element name="FirstNObservations" type="xs:int" minOccurs="0">
            <xs:annotation>
              <xs:documentation>FirstNObservations specifies that number of observations indicated should be returned, starting from the earliest observation. Note that this can be used in conjunction with the LastNObservations. For example, if both FirstNObservations and LastNObservations had a value of 1, then the first and the last observation would be returned.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="LastNObservations" type="xs:int" minOccurs="0">
            <xs:annotation>
              <xs:documentation>LastNObservations specifies that number of observations indicated should be returned, starting from the latest observation and working back. Note that this can be used in conjunction with the FirstNObservations. For example, if both FirstNObservations and LastNObservations had a value of 1, then the first and the last observation would be returned.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="Structure" type="common:DataStructureRequestType" minOccurs="0" maxOccurs="unbounded">
            <xs:annotation>
              <xs:documentation>Structure defines how the is requested to be oriented in the returned message. For each data structure, dataflow, or provision agreement, a dimension at the observation level can be specified, and in the case that the dimension is a measure and the query is for structured data, the measure can be specified as being explicit. For any matched data in which there is not a structure specification, the query service can orient that data in any manner, although it is recommended that time be used as the observation dimension.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
        <xs:attribute name="observationAction" type="ObservationActionCodeType" use="optional" default="Active">
          <xs:annotation>
            <xs:documentation>The observationAction attribute specifies the type of observations (added, deleted, udpated, or current) to be returned. In the absence of the Updated parameter, this will return all observations that have ever existed for Added, any observations that have ever been updated for Updated, and any observations that have ever been deleted for Deleted. Note that since observations themselves contain no status in the data messages, it is only possible to query for active observations or deleted observations, but not both. It is possible to subset active observation into recently added and recently updated, however it is only possible to retrieve on or the other. If active observations are returned, there will be no distinction as to whether an individual observation was updated or added during the requested Update parameter.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:simpleType name="DataReturnDetailType">
    <xs:annotation>
      <xs:documentation>DataReturnDetailType contains a set of enumerations that indicate how much detail should be returned for a data set.</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="Full">
        <xs:annotation>
          <xs:documentation>The entire data set (including all data, documentation, and annotations) will be returned.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="DataOnly">
        <xs:annotation>
          <xs:documentation>Only the observed values and their keys will be returned. Annotations and documentation (i.e. Attributes) and therefore Groups, will be excluded.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="SeriesKeyOnly">
        <xs:annotation>
          <xs:documentation>Only the series elements and the values for the dimensions will be returned. Annotations, documentation, and observations will be excluded.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="NoData">
        <xs:annotation>
          <xs:documentation>Returns all documentation at the DataSet, Group, and Series level without any Observations (therefore, Observation level documentation is not returned). Annotations are not returned.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>

  <xs:complexType name="GenericDataReturnDetailsType">
    <xs:annotation>
      <xs:documentation>GenericDataReturnDetailsType specifies the specifics of the how data should be returned as it pertains to a request for generic data.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="DataReturnDetailsType">
        <xs:sequence>
          <xs:element name="FirstNObservations" type="xs:int" minOccurs="0"/>
          <xs:element name="LastNObservations" type="xs:int" minOccurs="0"/>
          <xs:element name="Structure" type="common:GenericDataStructureRequestType" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
        <xs:attribute name="observationAction" type="ObservationActionCodeType" use="optional" default="Active"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="GenericTimeSeriesDataReturnDetailsType">
    <xs:annotation>
      <xs:documentation>GenericTimeSeriesDataReturnDetailsType specifies the specifics of the how data should be returned as it pertains to a request for time series only oriented data in the generic format.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="GenericDataReturnDetailsType">
        <xs:sequence>
          <xs:element name="FirstNObservations" type="xs:int" minOccurs="0"/>
          <xs:element name="LastNObservations" type="xs:int" minOccurs="0"/>
          <xs:element name="Structure" type="common:TimeSeriesGenericDataStructureRequestType" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
        <xs:attribute name="observationAction" type="ObservationActionCodeType" use="optional" default="Active"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="TimeSeriesDataReturnDetailsType">
    <xs:annotation>
      <xs:documentation>TimeSeriesDataReturnDetailsType specifies the specifics of the how data should be returned as it pertains to a request for time series only oriented data in the structured format.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="DataReturnDetailsType">
        <xs:sequence>
          <xs:element name="FirstNObservations" type="xs:int" minOccurs="0"/>
          <xs:element name="LastNObservations" type="xs:int" minOccurs="0"/>
          <xs:element name="Structure" type="common:TimeSeriesDataStructureRequestType" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
        <xs:attribute name="observationAction" type="ObservationActionCodeType" use="optional" default="Active"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="DataParametersType" abstract="true">
    <xs:annotation>
      <xs:documentation>DataParametersType defines the parameters for querying for data. This structure is refined by separate And/Or constructs which make logical restrictions on which parameters apply in such cases.</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="DataSetID" type="QueryIDType" minOccurs="0" maxOccurs="unbounded">
        <xs:annotation>
          <xs:documentation>DataSetID is used to match the id of the data set. Only data from data sets with an identifier satisfying these conditions will be matched.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="DataProvider" type="common:DataProviderReferenceType" minOccurs="0" maxOccurs="unbounded">
        <xs:annotation>
          <xs:documentation>DataProvider is used to match the provider of data to the referenced data provider. Only data from data sets provided by the referenced data provider will be matched.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="DataStructure" type="common:DataStructureReferenceType" minOccurs="0" maxOccurs="unbounded">
        <xs:annotation>
          <xs:documentation>DataStructure is used to match the underlying structure of the data. Only data from data sets that conform to referenced data structure definition will be matched.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="Dataflow" type="common:DataflowReferenceType" minOccurs="0" maxOccurs="unbounded">
        <xs:annotation>
          <xs:documentation>Dataflow is used to match the flow which data is reported against. Only data from data sets report against referenced dataflow will be matched.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="ProvisionAgreement" type="common:ProvisionAgreementReferenceType" minOccurs="0" maxOccurs="unbounded">
        <xs:annotation>
          <xs:documentation>ProvisionAgreement is used to match the provision agreement which data is reported against. Only data from data sets report against the referenced provision agreement will be matched.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="Category" type="common:CategoryReferenceType" minOccurs="0" maxOccurs="unbounded">
        <xs:annotation>
          <xs:documentation>Category is used to match a data based on the categorization of its underlying structure (data structure definition), or the usage of that structure (data flow). Only data whose underlying structure or structure usage are categorized against the referenced category will be matched.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="Updated" type="common:TimeRangeValueType" minOccurs="0" maxOccurs="2">
        <xs:annotation>
          <xs:documentation>Updated is used to match data based on when it was last updated (including additions and deletions). Only data which satisfies the conditions for the last update parameters supplied here will be matched.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="ConceptValue" type="ConceptValueType" minOccurs="0" maxOccurs="unbounded">
        <xs:annotation>
          <xs:documentation>ConceptValue is used to match data based on the value of a particular concept. This concept may be used as a dimension, attribute, or measure for the data. So long as the referenced concept has the specified value for a given data point, it will be matched.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="RepresentationValue" type="CodeValueType" minOccurs="0" maxOccurs="unbounded">
        <xs:annotation>
          <xs:documentation>RepresentationValue is used to match data based on a representation scheme having a particular value. This representation scheme may be used as the representation of a dimension, attribute, or measure. So long as the value of the concept using the referenced codelist has the value specified, any data point for the concept will be matched.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="DimensionValue" type="DimensionValueType" minOccurs="0" maxOccurs="unbounded">
        <xs:annotation>
          <xs:documentation>DimensionValue is used to match data based on the value of a dimension. Any data with the dimension with the supplied identifier satisfies the conditions supplied will be matched.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="TimeDimensionValue" type="TimeDimensionValueType" minOccurs="0" maxOccurs="unbounded">
        <xs:annotation>
          <xs:documentation>TimeDimensionValue is used to match data based on the value of the time dimension. Any data with a time value satisfying the conditions supplied will be matched.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="AttributeValue" type="AttributeValueType" minOccurs="0" maxOccurs="unbounded">
        <xs:annotation>
          <xs:documentation>AttributeValue is used to match data based on the value of an attribute. Any data with an attribute with the supplied identifier satisfies the conditions supplied will be matched.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="PrimaryMeasureValue" type="PrimaryMeasureValueType" minOccurs="0" maxOccurs="unbounded">
        <xs:annotation>
          <xs:documentation>PrimaryMeasureValue is used to match data based on the value of the primary measure. Any data with its value satisfying the conditions supplied will be matched.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="AttachmentConstraint" type="common:AttachmentConstraintReferenceType" minOccurs="0" maxOccurs="unbounded">
        <xs:annotation>
          <xs:documentation>AttachmentConstraint references an attachment constraint in order to match data which matches the effective data keys or cube regions defined in the constraint. Data will be returned by first matching data on the keys and cube regions that are marked as included (or all data if none), and then excluding the data that satisfies the conditions of the excluded keys and cube regions.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="TimeFormat" type="common:TimeDataType" minOccurs="0" maxOccurs="unbounded">
        <xs:annotation>
          <xs:documentation>TimeFormat is used to match data when a frequency dimension is not explicitly defined. Only data reported against the supplied time data type will be returned.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="Or" type="DataParametersOrType" minOccurs="0" maxOccurs="unbounded">
        <xs:annotation>
          <xs:documentation>Or contains a collection of additional parameters, any one of which can be satisfied to result in a match.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="And" type="DataParametersAndType" minOccurs="0" maxOccurs="unbounded">
        <xs:annotation>
          <xs:documentation>And contains a collection of additional parameters, all of which must be satisfied to result in a match.</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="DataParametersOrType">
    <xs:annotation>
      <xs:documentation>DataParametersOrType refines the base data parameters to define a set of parameters joined by an "or" condition. Only one of the parameters supplied in an instance of this type can be satisfied to result in a match.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="DataParametersType">
        <xs:sequence>
          <xs:element name="DataSetID" type="QueryIDType" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element name="DataProvider" type="common:DataProviderReferenceType" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element name="DataStructure" type="common:DataStructureReferenceType" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element name="Dataflow" type="common:DataflowReferenceType" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element name="ProvisionAgreement" type="common:ProvisionAgreementReferenceType" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element name="Category" type="common:CategoryReferenceType" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element name="Updated" type="common:TimeRangeValueType" minOccurs="0" maxOccurs="2"/>
          <xs:element name="ConceptValue" type="ConceptValueType" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element name="RepresentationValue" type="CodeValueType" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element name="DimensionValue" type="DimensionValueType" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element name="TimeDimensionValue" type="TimeDimensionValueType" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element name="AttributeValue" type="AttributeValueType" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element name="PrimaryMeasureValue" type="PrimaryMeasureValueType" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element name="AttachmentConstraint" type="common:AttachmentConstraintReferenceType" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element name="TimeFormat" type="common:TimeDataType" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element name="And" type="DataParametersAndType" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="DataParametersAndType">
    <xs:annotation>
      <xs:documentation>DataParametersAndType refines the base data parameters to define a set of parameters joined by an "and" conditions. All of the parameters supplied in an instance of this type must be satisfied to result in a match. As a result of this condition, the maximum occurrence of some parameters has been reduced so as to not allow for impossible conditions to be specified (for example data cannot be matched is it is specified that the data set identifier should be "xyz" and the data identifier should be "abc".</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="DataParametersType">
        <xs:sequence>
          <xs:element name="DataSetID" type="QueryIDType" minOccurs="0"/>
          <xs:element name="DataProvider" type="common:DataProviderReferenceType" minOccurs="0"/>
          <xs:element name="DataStructure" type="common:DataStructureReferenceType" minOccurs="0"/>
          <xs:element name="Dataflow" type="common:DataflowReferenceType" minOccurs="0"/>
          <xs:element name="ProvisionAgreement" type="common:ProvisionAgreementReferenceType" minOccurs="0"/>
          <xs:element name="Category" type="common:CategoryReferenceType" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element name="Updated" type="common:TimeRangeValueType" minOccurs="0" maxOccurs="2"/>
          <xs:element name="ConceptValue" type="ConceptValueType" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element name="RepresentationValue" type="CodeValueType" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element name="DimensionValue" type="DimensionValueType" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element name="TimeDimensionValue" type="TimeDimensionValueType" minOccurs="0"/>
          <xs:element name="AttributeValue" type="AttributeValueType" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element name="PrimaryMeasureValue" type="PrimaryMeasureValueType" minOccurs="0"/>
          <xs:element name="AttachmentConstraint" type="common:AttachmentConstraintReferenceType" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element name="TimeFormat" type="common:TimeDataType" minOccurs="0"/>
          <xs:element name="Or" type="DataParametersOrType" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="DataStructureComponentValueQueryType" abstract="true">
    <xs:annotation>
      <xs:documentation>DataStructureComponentValueQueryType is an abstract base type that is the basis for query a data structure definition component for a particular value. Multiple values may be supplied, but the component value must match all of the value conditions supplied in order to return a match.</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="ID" type="common:NCNameIDType" minOccurs="0">
        <xs:annotation>
          <xs:documentation>ID provides the identifier for component for which the value is sought.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:choice minOccurs="0">
        <xs:element ref="NumericValue" maxOccurs="2"/>
        <xs:element ref="TextValue" maxOccurs="unbounded"/>
        <xs:element ref="TimeValue" maxOccurs="2"/>
        <xs:element ref="Value"/>
      </xs:choice>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="DimensionValueType">
    <xs:annotation>
      <xs:documentation>DimensionValueType is used to query for data where a given dimension has a particular value.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="DataStructureComponentValueQueryType">
        <xs:sequence>
          <xs:element name="ID" type="common:NCNameIDType"/>
          <xs:choice>
            <xs:element ref="NumericValue" maxOccurs="2"/>
            <xs:element ref="TimeValue" maxOccurs="2"/>
            <xs:element ref="Value"/>
          </xs:choice>
        </xs:sequence>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="AttributeValueType">
    <xs:annotation>
      <xs:documentation>AttributeValueType is used to query for data where a given attribute has a particular value.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="DataStructureComponentValueQueryType">
        <xs:sequence>
          <xs:element name="ID" type="common:NCNameIDType"/>
          <xs:choice>
            <xs:element ref="NumericValue" maxOccurs="2"/>
            <xs:element ref="TextValue"/>
            <xs:element ref="TimeValue" maxOccurs="2"/>
            <xs:element ref="Value"/>
          </xs:choice>
        </xs:sequence>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="PrimaryMeasureValueType">
    <xs:annotation>
      <xs:documentation>PrimaryMeasureValueType is used to query for data where the primary measure (i.e. the observed value) has a particular value.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="DataStructureComponentValueQueryType">
        <xs:sequence>
          <xs:element name="ID" type="common:NCNameIDType" minOccurs="0" fixed="OBS_VALUE"/>
          <xs:choice>
            <xs:element ref="NumericValue" maxOccurs="2"/>
            <xs:element ref="TextValue"/>
            <xs:element ref="TimeValue" maxOccurs="2"/>
            <xs:element ref="Value"/>
          </xs:choice>
        </xs:sequence>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="TimeDimensionValueType">
    <xs:annotation>
      <xs:documentation>TimeDimensionValueType is used to query for data where the time dimension has a particular value.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="DataStructureComponentValueQueryType">
        <xs:sequence>
          <xs:element name="ID" type="common:NCNameIDType" minOccurs="0" fixed="TIME_PERIOD"/>
          <xs:choice>
            <xs:element ref="TimeValue" maxOccurs="2"/>
          </xs:choice>
        </xs:sequence>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:simpleType name="ObservationActionCodeType">
    <xs:annotation>
      <xs:documentation>ObservationActionCodeType enumerates the type of observations to be returned.</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="Active">
        <xs:annotation>
          <xs:documentation>Active observations, regardless of when they were added or updated will be returned.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="Added">
        <xs:annotation>
          <xs:documentation>Only newly added observations will be returned.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="Updated">
        <xs:annotation>
          <xs:documentation>Only updated observations will be returned.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="Deleted">
        <xs:annotation>
          <xs:documentation>Only deleted observations will be returned.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>

  <xs:annotation>
    <xs:appinfo>SDMX Data Flow Query Module</xs:appinfo>
    <xs:documentation>The data flow query module provides the construct of a query for a data flow.</xs:documentation>
  </xs:annotation>

  <xs:complexType name="DataflowQueryType">
    <xs:annotation>
      <xs:documentation>DataflowQueryType defines the structure of a dataflow query. The parameters for the query are contained in the DataflowWhere element. The References element is used to indicate how objects that reference or are referenced from the matched dataflow should be returned.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="StructuralMetadataQueryType">
        <xs:sequence>
          <xs:element name="ReturnDetails" type="MaintainableReturnDetailsType"/>
          <xs:element ref="DataflowWhere"/>
        </xs:sequence>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:element name="DataflowWhere" type="DataflowWhereType" substitutionGroup="StructuralMetadataWhere">
    <xs:annotation>
      <xs:documentation>DataflowWhere defines the parameters for a dataflow query. All parameters must be matched for an object to satisfy the query. In addition to querying based on the basic maintainable properties, it is also possible to search for a dataflow based on the key family it defines the usage of.</xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:complexType name="DataflowWhereType">
    <xs:annotation>
      <xs:documentation>DataflowWhereType contains the parameters of a dataflow query. All supplied parameters must be matched in order for an object to satisfy the query.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="StructureUsageWhereType">
        <xs:sequence>
          <xs:element name="Annotation" type="AnnotationWhereType" minOccurs="0"/>
          <xs:element name="URN" type="xs:anyURI" minOccurs="0"/>
          <xs:element name="ID" type="QueryIDType" minOccurs="0"/>
          <xs:element name="Name" type="QueryTextType" minOccurs="0"/>
          <xs:element name="Description" type="QueryTextType" minOccurs="0"/>
          <xs:element name="Version" type="common:VersionQueryType" minOccurs="0"/>
          <xs:element name="VersionTo" type="common:TimeRangeValueType" minOccurs="0"/>
          <xs:element name="VersionFrom" type="common:TimeRangeValueType" minOccurs="0"/>
          <xs:element name="VersionActive" type="xs:boolean" minOccurs="0"/>
          <xs:element name="AgencyID" type="QueryNestedIDType" minOccurs="0"/>
          <xs:element name="Structure" type="common:DataStructureReferenceType" minOccurs="0">
            <xs:annotation>
              <xs:documentation>Structure is used to indicate which key family the dataflow must define a usage for in order to constitute a match.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
        <xs:attribute name="type" type="common:MaintainableTypeCodelistType" use="optional" fixed="Dataflow"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:annotation>
    <xs:appinfo>SDMX Data Structure Query Module</xs:appinfo>
    <xs:documentation>The data structure query module provides the construct of a query for a data structure definition.</xs:documentation>
  </xs:annotation>

  <xs:complexType name="DataStructureQueryType">
    <xs:annotation>
      <xs:documentation>DataStructureQueryType defines the structure of a data structure definition query. The parameters for the query are contained in the DataStructureWhere element. The References element is used to indicate how objects that reference or are referenced from the matched data structure definition should be returned.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="StructuralMetadataQueryType">
        <xs:sequence>
          <xs:element name="ReturnDetails" type="MaintainableReturnDetailsType"/>
          <xs:element ref="DataStructureWhere"/>
        </xs:sequence>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:element name="DataStructureWhere" type="DataStructureWhereType" substitutionGroup="StructuralMetadataWhere">
    <xs:annotation>
      <xs:documentation>DataStructureWhere contains the parameters for a data structure definition query. All parameters must be matched for an object to satisfy the query. The query is simply a refinement of the base structure query to make the parameters specific to the data structure definition.</xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:complexType name="DataStructureWhereBaseType" abstract="true">
    <xs:annotation>
      <xs:documentation>DataStructureWhereBaseType is an abstract base type that forms the basis of the DataStructureWhereType.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="StructureWhereType">
        <xs:sequence>
          <xs:element name="Annotation" type="AnnotationWhereType" minOccurs="0"/>
          <xs:element name="URN" type="xs:anyURI" minOccurs="0"/>
          <xs:element name="ID" type="QueryIDType" minOccurs="0"/>
          <xs:element name="Name" type="QueryTextType" minOccurs="0"/>
          <xs:element name="Description" type="QueryTextType" minOccurs="0"/>
          <xs:element name="Version" type="common:VersionQueryType" minOccurs="0"/>
          <xs:element name="VersionTo" type="common:TimeRangeValueType" minOccurs="0"/>
          <xs:element name="VersionFrom" type="common:TimeRangeValueType" minOccurs="0"/>
          <xs:element name="VersionActive" type="xs:boolean" minOccurs="0"/>
          <xs:element name="AgencyID" type="QueryNestedIDType" minOccurs="0"/>
          <xs:element name="UsedConcept" type="common:ConceptReferenceType" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element name="UsedRepresentation" type="common:DataStructureEnumerationSchemeReferenceType" minOccurs="0" maxOccurs="unbounded"/>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element ref="GroupWhere"/>
          </xs:sequence>
        </xs:sequence>
        <xs:attribute name="type" type="common:MaintainableTypeCodelistType" use="optional" fixed="DataStructure"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="DataStructureWhereType">
    <xs:annotation>
      <xs:documentation>DataStructureWhereType defines the parameters of a data structure definition query. In addition to querying based on the identification, it is also possible to search for data structure definitions based on information about its components.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="DataStructureWhereBaseType">
        <xs:sequence>
          <xs:element ref="AttributeWhere" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element ref="DimensionWhere" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element ref="MeasureDimensionWhere" minOccurs="0"/>
          <xs:element ref="TimeDimensionWhere" minOccurs="0"/>
          <xs:element ref="PrimaryMeasureWhere" minOccurs="0"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:element name="GroupWhere" type="GroupWhereType" substitutionGroup="ComponentListWhere">
    <xs:annotation>
      <xs:documentation>GroupWhere is used to query for a data structure definition that contains a group meeting the conditions detailed in this container. This is an implicit set of "and" parameters, that is the conditions within this must all be met in order to return a match.</xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:complexType name="GroupWhereBaseType" abstract="true">
    <xs:annotation>
      <xs:documentation>GroupWhereBaseType is an abstract base type that forms the basis for the GroupWhereType.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="ComponentListWhereType">
        <xs:sequence>
          <xs:element name="Annotation" type="AnnotationWhereType" minOccurs="0"/>
          <xs:element name="ID" type="QueryIDType" minOccurs="0"/>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element ref="GroupDimensionWhere"/>
          </xs:sequence>
        </xs:sequence>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="GroupWhereType">
    <xs:annotation>
      <xs:documentation>GroupWhereType defines the parameters querying for a data structure definition based a group meeting the conditions detailed. Parameters include identification, dimensions used in the group, and the group's referenced attachment constraint. This is an implicit set of "and" parameters, that is the conditions within this must all be met in order to return a match.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="GroupWhereBaseType">
        <xs:sequence>
          <xs:element name="AttachmentConstraint" type="common:AttachmentConstraintReferenceType" minOccurs="0">
            <xs:annotation>
              <xs:documentation>AttachmentConstraint queries for a group where the referenced attachment constraint defines the contents of the group.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:element name="GroupDimensionWhere" type="DimensionWhereType" substitutionGroup="ComponentWhere">
    <xs:annotation>
      <xs:documentation>GroupDimensionWhere is used to query a group based on the details of the dimensions it groups. This is an implicit set of "and" parameters, that is the conditions within this must all be met in order to return a match.</xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:complexType name="DataStructureComponentWhereType">
    <xs:annotation>
      <xs:documentation>DataStructureComponentWhereType defines the basic information for querying for a data structure definition component. The component can be queried based on its identification, the concept from which it takes its semantic, and the code list it uses as its representation,. This is an implicit set of "and" parameters, that is the conditions within this must all be met in order to return a match.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="ComponentWhereType">
        <xs:sequence>
          <xs:element name="Annotation" type="AnnotationWhereType" minOccurs="0"/>
          <xs:element name="ID" type="QueryIDType" minOccurs="0"/>
          <xs:element name="ConceptIdentity" type="common:ConceptReferenceType" minOccurs="0"/>
          <xs:element name="Enumeration" type="common:CodelistReferenceType" minOccurs="0"/>
        </xs:sequence>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:element name="AttributeWhere" type="AttributeWhereType" substitutionGroup="ComponentWhere">
    <xs:annotation>
      <xs:documentation>AttributeWhere is used to query for a data structure definition that contains an attribute meeting the conditions contained in this structure. The attribute can be queried based on its identification, the concept from which it takes its semantic, its attachment level, the role it plays, and the code list it uses as the enumeration of its representation. This is an implicit set of "and" parameters, that is the conditions within this must all be met in order to return a match.</xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:element name="DimensionWhere" type="DimensionWhereType" substitutionGroup="ComponentWhere">
    <xs:annotation>
      <xs:documentation>DimensionWhere is used to query for a data structure definition that contains a dimension meeting the conditions contained in this structure. The dimension can be queried based on its identification, the concept from which it takes its semantic, the role it plays, and the code list it uses as the enumeration of its representation. This is an implicit set of "and" parameters, that is the conditions within this must all be met in order to return a match.</xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:element name="TimeDimensionWhere" type="TimeDimensionWhereType" substitutionGroup="ComponentWhere">
    <xs:annotation>
      <xs:documentation>TimeDimensionWhere is used to query for a data structure definition that contains a time dimension meeting the conditions contained in this structure. The time dimension can be queried based on its identification and the concept from which it takes its semantic. This is an implicit set of "and" parameters, that is the conditions within this must all be met in order to return a match.</xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:element name="PrimaryMeasureWhere" type="PrimaryMeasureWhereType" substitutionGroup="ComponentWhere">
    <xs:annotation>
      <xs:documentation>PrimaryMeasureWhere is used to query for a data structure definition that contains a primary measure meeting the conditions contained in this structure. The primary measure can be queried based on its identification, the concept from which it takes its semantic, and the code list it uses as the enumeration of its representation. This is an implicit set of "and" parameters, that is the conditions within this must all be met in order to return a match.</xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:element name="MeasureDimensionWhere" type="MeasureDimensionWhereType" substitutionGroup="ComponentWhere">
    <xs:annotation>
      <xs:documentation>MeasureDimensionWhere is used to query for a data structure definition that contains a measure dimension meeting the conditions contained in this structure. The cross-sectional measure can be queried based on its identification, the concept from which it takes its semantic, and the concept scheme it uses as the enumeration of its representation. This is an implicit set of "and" parameters, that is the conditions within this must all be met in order to return a match.</xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:complexType name="AttributeWhereType">
    <xs:annotation>
      <xs:documentation>AttributeWhereType describes the structure of an attribute query. An attribute can be queried based on its identification, the concept from which it takes its semantic, the role it plays, and the code list it uses as the enumeration of its representation. This is an implicit set of "and" parameters, that is the conditions within this must all be met in order to return a match.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="DataStructureComponentWhereType">
        <xs:sequence>
          <xs:element name="Role" type="common:ConceptReferenceType" minOccurs="0" maxOccurs="unbounded">
            <xs:annotation>
              <xs:documentation>Role is used to specify the role of the attribute.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="DimensionWhereType">
    <xs:annotation>
      <xs:documentation>DimensionWhereType describes the structure of a dimension query. A dimension can be queried based on its identification, the concept from which it takes its semantic, the role it plays, and the code list it uses as the enumeration of its representation. This is an implicit set of "and" parameters, that is the conditions within this must all be met in order to return a match.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="DataStructureComponentWhereType">
        <xs:sequence>
          <xs:element name="Role" type="common:ConceptReferenceType" minOccurs="0" maxOccurs="unbounded">
            <xs:annotation>
              <xs:documentation>Role is used to specify the role of the dimension.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="TimeDimensionWhereType">
    <xs:annotation>
      <xs:documentation>TimeDimensionWhereType describes the structure of a time dimension query. The time dimension can be queried based on the concept from which it takes its semantic. This is an implicit set of "and" parameters, that is the conditions within this must all be met in order to return a match.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="DataStructureComponentWhereType">
        <xs:sequence>
          <xs:element name="Annotation" type="AnnotationWhereType" minOccurs="0"/>
          <xs:element name="ConceptIdentity" type="common:ConceptReferenceType" minOccurs="0"/>
        </xs:sequence>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="MeasureDimensionWhereBaseType" abstract="true">
    <xs:annotation>
      <xs:documentation>MeasureDimensionWhereBaseType is an abstract base type which forms the basis for a measure dimension query.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="ComponentWhereType">
        <xs:sequence>
          <xs:element name="Annotation" type="AnnotationWhereType" minOccurs="0"/>
          <xs:element name="ID" type="QueryIDType" minOccurs="0"/>
          <xs:element name="ConceptIdentity" type="common:ConceptReferenceType" minOccurs="0"/>
          <xs:element name="Enumeration" type="common:ConceptSchemeReferenceType" minOccurs="0"/>
        </xs:sequence>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="MeasureDimensionWhereType">
    <xs:annotation>
      <xs:documentation>MeasureDimensionWhereType describes the structure of a measure dimension query. A measure dimension can be queried based on its identification, the concept from which it takes its semantic, the role it plays, and the concept scheme which defines its measure concepts. This is an implicit set of "and" parameters, that is the conditions within this must all be met in order to return a match.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="MeasureDimensionWhereBaseType">
        <xs:sequence>
          <xs:element name="Role" type="common:ConceptReferenceType" minOccurs="0" maxOccurs="unbounded">
            <xs:annotation>
              <xs:documentation>Role is used to specify the role of the dimension.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="PrimaryMeasureWhereType">
    <xs:annotation>
      <xs:documentation>MeasureWhereType describes the structure of a measure query. The primary measure can be queried based on the concept from which it takes its semantic, and the code list it uses as the enumeration of its representation. This is an implicit set of "and" parameters, that is the conditions within this must all be met in order to return a match.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="DataStructureComponentWhereType">
        <xs:sequence>
          <xs:element name="Annotation" type="AnnotationWhereType" minOccurs="0"/>
          <xs:element name="ConceptIdentity" type="common:ConceptReferenceType" minOccurs="0"/>
          <xs:element name="Enumeration" type="common:CodelistReferenceType" minOccurs="0"/>
        </xs:sequence>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:annotation>
    <xs:appinfo>SDMX Hierarchical Code List Query Module</xs:appinfo>
    <xs:documentation>The hierarchical code list query module provides the construct of a query for a hierarchical code list.</xs:documentation>
  </xs:annotation>

  <xs:complexType name="HierarchicalCodelistQueryType">
    <xs:annotation>
      <xs:documentation>HierarchicalCodelistQueryType defines the structure of a hierarchical codelist query. The parameters for the query are contained in the HierarchicalCodelistWhere element. The References element is used to indicate how objects that are referenced from the matched hierarchical codelist should be returned.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="StructuralMetadataQueryType">
        <xs:sequence>
          <xs:element name="ReturnDetails" type="MaintainableReturnDetailsType"/>
          <xs:element ref="HierarchicalCodelistWhere"/>
        </xs:sequence>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:element name="HierarchicalCodelistWhere" type="HierarchicalCodelistWhereType" substitutionGroup="StructuralMetadataWhere">
    <xs:annotation>
      <xs:documentation>HierarchicalCodelistWhere defines the parameters for a hierarchical codelist query. All parameters must be matched for an object to satisfy the query. In addition to querying based on the basic maintainable properties, it is also possible to search for a hierarchical codelist based on the codelists it arranges into hierarchies.</xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:complexType name="HierarchicalCodelistWhereBaseType" abstract="true">
    <xs:annotation>
      <xs:documentation>HierarchicalCodelistWhereBaseType is an abstract base type which forms the basis for the HierarchicalCodelistWhereType.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="MaintainableWhereType">
        <xs:sequence>
          <xs:element name="Annotation" type="AnnotationWhereType" minOccurs="0"/>
          <xs:element name="URN" type="xs:anyURI" minOccurs="0"/>
          <xs:element name="ID" type="QueryIDType" minOccurs="0"/>
          <xs:element name="Name" type="QueryTextType" minOccurs="0"/>
          <xs:element name="Description" type="QueryTextType" minOccurs="0"/>
          <xs:element name="Version" type="common:VersionQueryType" minOccurs="0"/>
          <xs:element name="VersionTo" type="common:TimeRangeValueType" minOccurs="0"/>
          <xs:element name="VersionFrom" type="common:TimeRangeValueType" minOccurs="0"/>
          <xs:element name="VersionActive" type="xs:boolean" minOccurs="0"/>
          <xs:element name="AgencyID" type="QueryNestedIDType" minOccurs="0"/>
        </xs:sequence>
        <xs:attribute name="type" type="common:MaintainableTypeCodelistType" use="optional" fixed="HierarchicalCodelist">
          <xs:annotation>
            <xs:documentation>The type attribute indicates the type of constraint that is being queried for, with a default of Any, meaning both content and attachment constraints will be searched.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="HierarchicalCodelistWhereType">
    <xs:annotation>
      <xs:documentation>HierarchicalCodelistWhereType contains the parameters of a hierarchical codelist query. All supplied parameters must be matched in order for an object to satisfy the query.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="HierarchicalCodelistWhereBaseType">
        <xs:sequence>
          <xs:element name="IncludedCodelist" type="common:CodelistReferenceType" minOccurs="0" maxOccurs="unbounded">
            <xs:annotation>
              <xs:documentation>IncludedCodelist is used to reference a codelist which the hierarchical codelist to be matched references.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:annotation>
    <xs:appinfo>SDMX Metadata Query Module</xs:appinfo>
    <xs:documentation>The metadata query module provides the construct of a query for metadata.</xs:documentation>
  </xs:annotation>

  <xs:complexType name="MetadataQueryType">
    <xs:annotation>
      <xs:documentation>MetadataQueryType defines the structure of a reference metadata query. Reference metadata is queried as individual reports. The result of this query will be a collection of metadata sets, with only the relevant metadata reports contained within them. If no report level parameters are specified, then the query will result in entire metadata sets being returned.</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="ReturnDetails" type="MetadataReturnDetailsType">
        <xs:annotation>
          <xs:documentation>ReturnDetails specifies the details of how the reference metadata should be returned.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="MetadataParameters" type="MetadataParametersAndType">
        <xs:annotation>
          <xs:documentation>MetadataParameters contains the parameters that are to be matched in order to determine which metadata reports are to be returned as the result of the query.</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="MetadataReturnDetailsType">
    <xs:annotation>
      <xs:documentation>MetadataReturnDetailsType is a structure for detailing how reference metadata should be returned. Only a default size limit can be specified.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ReturnDetailsBaseType"/>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="MetadataParametersType" abstract="true">
    <xs:annotation>
      <xs:documentation>MetadataParametersType defines the parameters for querying for reference metadata. This structure is refined by separate And/Or constructs which make logical restrictions on which parameters apply in such cases.</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="MetadataSetID" type="QueryIDType" minOccurs="0" maxOccurs="unbounded">
        <xs:annotation>
          <xs:documentation>MetadataSetID is used to match the id of the metadata set. Only metadata reports from data sets with an identifier satisfying these conditions will be matched.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="DataProvider" type="common:DataProviderReferenceType" minOccurs="0" maxOccurs="unbounded">
        <xs:annotation>
          <xs:documentation>DataProviderReference is used to match the provider of reference metadata to the referenced data provider. Only metadata reports from metadata sets provided by the referenced data provider will be matched.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="MetadataStructure" type="common:MetadataStructureReferenceType" minOccurs="0" maxOccurs="unbounded">
        <xs:annotation>
          <xs:documentation>MetadataStructureReference is used to match the underlying structure of the data. Only metadata reports from metadata sets that conform to referenced metadata structure definition will be matched.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="Metadataflow" type="common:MetadataflowReferenceType" minOccurs="0" maxOccurs="unbounded">
        <xs:annotation>
          <xs:documentation>MetadataflowReference is used to match the flow which reference metadata is reported against. Only metadata reports from metadata sets report against referenced metadata flow will be matched.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="ProvisionAgreement" type="common:ProvisionAgreementReferenceType" minOccurs="0" maxOccurs="unbounded">
        <xs:annotation>
          <xs:documentation>ProvisionAgreement is used to match the provision agreement which metadata is reported against. Only metadata from metadata sets report against the referenced provision agreement will be matched.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="Category" type="common:CategoryReferenceType" minOccurs="0" maxOccurs="unbounded">
        <xs:annotation>
          <xs:documentation>CategoryReference is used to match a reference metadata based on the categorization of its underlying structure (metadata structure definition), or the usage of that structure (metadata flow). Only metadata reports whose underlying structure or structure usage are categorized against the referenced category will be matched.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="Updated" type="common:TimeRangeValueType" minOccurs="0" maxOccurs="unbounded">
        <xs:annotation>
          <xs:documentation>Updated is used to match reference metadata based on when it was last updated. Only metadata reports which satisfy the conditions for the last update parameters supplied here will be matched.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="ConceptValue" type="ConceptValueType" minOccurs="0" maxOccurs="unbounded">
        <xs:annotation>
          <xs:documentation>ConceptValue is used to match reference metadata based on the value of a particular concept which defines a metadata attribute. So long as the referenced concept has the specified value for a metadata attribute anywhere within the report structure, the metadata report which contains that attribute will be matched.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="RepresentationValue" type="CodeValueType" minOccurs="0" maxOccurs="unbounded">
        <xs:annotation>
          <xs:documentation>RepresentationValue is used to match reference metadata based on a codelist having a particular value. This codelist only applies in the context of the representation of a metadata attribute. So long as the value of any metadata attribute within the report structure which uses the referenced codelist has the value specified, any metadata report containing the attribute will be matched.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="MetadataTargetValue" type="MetadataTargetValueType" minOccurs="0" maxOccurs="unbounded">
        <xs:annotation>
          <xs:documentation>MetadataTargetValue is used to match reference metadata based on the target object values of a particular metadata target. If not report structure is specified in the query, this will result in a search across all metadata reports which may use this metadata target. If a value is not given for a target object which is part of this metadata target, it is assumed that all values are allowed for that target object. Thus, if no target object values are given in the entire metadata target, the query will simply match ant report where the reference metadata target is used. All target object value conditions must be met to constitute a match.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="ReportStructureValue" type="ReportStructureValueType" minOccurs="0" maxOccurs="unbounded">
        <xs:annotation>
          <xs:documentation>ReportStructureValue is used to match particular reference metadata reports. Only metadata reports based on the referenced report structure will be matched. It is also possible to detail the values of the metadata attributes contained within the reference report. In this case, only metadata reports based on the referenced report structure which have the metadata attribute values specified will be matched.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="AttachmentConstraint" type="common:AttachmentConstraintReferenceType" minOccurs="0" maxOccurs="unbounded">
        <xs:annotation>
          <xs:documentation>AttachmentConstraint references an attachment constraint in order to match reference metadata which matches the effective metadata keys or metadata target regions defined in the constraint. Metadata will be returned by first matching metadata on the keys and metadata target regions that are marked as included (or all metadata if none), and then excluding the metadata that satisfies the conditions of the excluded keys and metadata target regions.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="AttachedObject" type="common:ObjectReferenceType" minOccurs="0" maxOccurs="unbounded">
        <xs:annotation>
          <xs:documentation>AttachedObject is used to match reference metadata based on an object which it is attached to, regardless of the report structure or metadata target in which the object is referenced. Any metadata reports attached to the referenced objects will be matched.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="AttachedDataKey" type="common:DataKeyType" minOccurs="0" maxOccurs="unbounded">
        <xs:annotation>
          <xs:documentation>AttachedDataKey is used to match reference metadata based on a data key it is attached to, regardless of the report structure or metadata target in which the data key is referenced. Any metadata reports attached to the supplied data key will be matched.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="AttachedDataSet" type="common:SetReferenceType" minOccurs="0" maxOccurs="unbounded">
        <xs:annotation>
          <xs:documentation>AttachedDataSet is used to query for reference metadata based on a data set it is attached to, regardless of the report structure or metadata target in which the data set is referenced. Any metadata reports attached to the supplied metadata key will be matched.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="AttachedReportingPeriod" type="common:TimeRangeValueType" minOccurs="0" maxOccurs="unbounded">
        <xs:annotation>
          <xs:documentation>AttachedReportingPeriod is used to query for reference metadata based on the reporting period to which it is attached, regardless of the report structure or metadata target in which the reference period is referenced. Any metadata reports attached to a reporting period which falls within the range specified will be matched.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="Or" type="MetadataParametersOrType" minOccurs="0" maxOccurs="unbounded">
        <xs:annotation>
          <xs:documentation>Or contains a collection of additional parameters, any one of which can be satisfied to result in a match.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="And" type="MetadataParametersAndType" minOccurs="0" maxOccurs="unbounded">
        <xs:annotation>
          <xs:documentation>And contains a collection of additional parameters, all of which must be satisfied to result in a match.</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="MetadataParametersOrType">
    <xs:annotation>
      <xs:documentation>MetadataParametersOrType refines the base data parameters to define a set of parameters joined by an "or" condition. Only one of the parameters supplied in an instance of this type can be satisfied to result in a match.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="MetadataParametersType">
        <xs:sequence>
          <xs:element name="MetadataSetID" type="QueryIDType" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element name="DataProvider" type="common:DataProviderReferenceType" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element name="MetadataStructure" type="common:MetadataStructureReferenceType" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element name="Metadataflow" type="common:MetadataflowReferenceType" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element name="ProvisionAgreement" type="common:ProvisionAgreementReferenceType" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element name="Category" type="common:CategoryReferenceType" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element name="Updated" type="common:TimeRangeValueType" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element name="ConceptValue" type="ConceptValueType" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element name="RepresentationValue" type="CodeValueType" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element name="MetadataTargetValue" type="MetadataTargetValueType" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element name="ReportStructureValue" type="ReportStructureValueType" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element name="AttachmentConstraint" type="common:AttachmentConstraintReferenceType" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element name="AttachedObject" type="common:ObjectReferenceType" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element name="AttachedDataKey" type="common:DataKeyType" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element name="AttachedDataSet" type="common:SetReferenceType" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element name="AttachedReportingPeriod" type="common:TimeRangeValueType" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element name="And" type="MetadataParametersAndType" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="MetadataParametersAndType">
    <xs:annotation>
      <xs:documentation>MetadataParametersAndType refines the base data parameters to define a set of parameters joined by an "and" conditions. All of the parameters supplied in an instance of this type must be satisfied to result in a match. As a result of this condition, the maximum occurrence of some parameters has been reduced so as to not allow for impossible conditions to be specified (for example data cannot be matched is it is specified that the data set identifier should be "xyz" and the data identifier should be "abc".</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="MetadataParametersType">
        <xs:sequence>
          <xs:element name="MetadataSetID" type="QueryIDType" minOccurs="0"/>
          <xs:element name="DataProvider" type="common:DataProviderReferenceType" minOccurs="0"/>
          <xs:element name="MetadataStructure" type="common:MetadataStructureReferenceType" minOccurs="0"/>
          <xs:element name="Metadataflow" type="common:MetadataflowReferenceType" minOccurs="0"/>
          <xs:element name="ProvisionAgreement" type="common:ProvisionAgreementReferenceType" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element name="Category" type="common:CategoryReferenceType" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element name="Updated" type="common:TimeRangeValueType" minOccurs="0"/>
          <xs:element name="ConceptValue" type="ConceptValueType" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element name="RepresentationValue" type="CodeValueType" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element name="MetadataTargetValue" type="MetadataTargetValueType" minOccurs="0"/>
          <xs:element name="ReportStructureValue" type="ReportStructureValueType" minOccurs="0"/>
          <xs:element name="AttachmentConstraint" type="common:AttachmentConstraintReferenceType" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element name="AttachedObject" type="common:ObjectReferenceType" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element name="AttachedDataKey" type="common:DataKeyType" minOccurs="0"/>
          <xs:element name="AttachedDataSet" type="common:SetReferenceType" minOccurs="0"/>
          <xs:element name="AttachedReportingPeriod" type="common:TimeRangeValueType" minOccurs="0"/>
          <xs:element name="Or" type="MetadataParametersOrType" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="MetadataTargetValueType">
    <xs:annotation>
      <xs:documentation>MetadataTargetValueType describes the structure that is used to match reference metadata where a given metadata target's target object have particular values. If a value is not given for a target object which is part of the metadata target, it is assumed that all values are allowed for that target object. Thus, if no target object values are given in the entire metadata target, the query will simply match ant report where the reference metadata target is used. All target object value conditions must be met to constitute a match.</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="ID" type="common:NCNameIDType"/>
      <xs:element name="TargetObjectValue" type="TargetObjectValueType" minOccurs="0" maxOccurs="unbounded">
        <xs:annotation>
          <xs:documentation>TargetObjectValue is used to match reference metadata where a given target object in a metadata target references a particular object or time period.</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="TargetObjectValueType">
    <xs:annotation>
      <xs:documentation>IdentifierComponentValueType describes the structure that is used to match reference metadata where a given identifier component has a particular value.</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="ID" type="common:NCNameIDType">
        <xs:annotation>
          <xs:documentation>ID identifies the metadata target object.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:choice>
        <xs:element name="DataSet" type="common:SetReferenceType">
          <xs:annotation>
            <xs:documentation>DataSet provides a reference to a data set which the target object should reference to result in a match.</xs:documentation>
          </xs:annotation>
        </xs:element>
        <xs:element name="DataKey" type="common:DataKeyType">
          <xs:annotation>
            <xs:documentation>DataKey provides a data key (set of dimension values) which the target object should reference to result in a match.</xs:documentation>
          </xs:annotation>
        </xs:element>
        <xs:element name="Object" type="common:ObjectReferenceType">
          <xs:annotation>
            <xs:documentation>Object provides a reference to any SDMX identifiable object which the target object should reference to result in a match.</xs:documentation>
          </xs:annotation>
        </xs:element>
        <xs:element ref="TimeValue" maxOccurs="2">
          <xs:annotation>
            <xs:documentation>TimeValue is used to provide a time value or range for matching a reporting period which the target object should reference to result in a match.</xs:documentation>
          </xs:annotation>
        </xs:element>
      </xs:choice>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="ReportStructureValueType">
    <xs:annotation>
      <xs:documentation>ReportStructureValueType describes the structure that is used to match reference metadata where the metadata attributes of a report structure have particular values. All metadata attribute value conditions must be met to constitute a match.</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="ID" type="common:NCNameIDType"/>
      <xs:element name="MetadataAttributeValue" type="MetadataAttributeValueType" minOccurs="0" maxOccurs="unbounded">
        <xs:annotation>
          <xs:documentation>MetadataAttributeValue is used to match reference metadata where a metadata attribute has a particular value within the referenced report structure.</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="MetadataAttributeValueType">
    <xs:annotation>
      <xs:documentation>MetadataAttributeValueType describes the structure that is used to match reference metadata where a metadata attribute has a particular value. Metadata attribute value queries can be nested for querying nested metadata attributes. If no value is provided, then simply the presence of the metadata attribute within the given context will result in a match. All nested metadata attribute value conditions must be met to constitute a match.</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="ID" type="common:NCNameIDType"/>
      <xs:choice minOccurs="0">
        <xs:element ref="Value"/>
        <xs:element ref="TextValue" maxOccurs="unbounded"/>
        <xs:element ref="NumericValue" maxOccurs="2"/>
        <xs:element ref="TimeValue" maxOccurs="2"/>
      </xs:choice>
      <xs:element name="MetadataAttributeValue" type="MetadataAttributeValueType" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>

  <xs:annotation>
    <xs:appinfo>SDMX Metadata Flow Query Module</xs:appinfo>
    <xs:documentation>The metadata flow query module provides the construct of a query for a metadata flow.</xs:documentation>
  </xs:annotation>

  <xs:complexType name="MetadataflowQueryType">
    <xs:annotation>
      <xs:documentation>MetadataflowQueryType defines the structure of a metadataflow query. The parameters for the query are contained in the MetadataflowWhere element. The References element is used to indicate how objects that reference or are referenced from the matched metadataflow should be returned.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="StructuralMetadataQueryType">
        <xs:sequence>
          <xs:element name="ReturnDetails" type="MaintainableReturnDetailsType"/>
          <xs:element ref="MetadataflowWhere"/>
        </xs:sequence>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:element name="MetadataflowWhere" type="MetadataflowWhereType" substitutionGroup="StructuralMetadataWhere">
    <xs:annotation>
      <xs:documentation>MetadataflowWhere contains the parameters for a metadataflow query. All parameters must be matched for an object to satisfy the query. In addition to querying based on the basic maintainable properties, it is also possible to search for a metadataflow based on the metadata structure definition it defines the usage of.</xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:complexType name="MetadataflowWhereType">
    <xs:annotation>
      <xs:documentation>MetadataflowWhereType contains the parameters of a metadataflow query. All supplied parameters must be matched in order for an object to satisfy the query.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="StructureUsageWhereType">
        <xs:sequence>
          <xs:element name="Annotation" type="AnnotationWhereType" minOccurs="0"/>
          <xs:element name="URN" type="xs:anyURI" minOccurs="0"/>
          <xs:element name="ID" type="QueryIDType" minOccurs="0"/>
          <xs:element name="Name" type="QueryTextType" minOccurs="0"/>
          <xs:element name="Description" type="QueryTextType" minOccurs="0"/>
          <xs:element name="Version" type="common:VersionQueryType" minOccurs="0"/>
          <xs:element name="VersionTo" type="common:TimeRangeValueType" minOccurs="0"/>
          <xs:element name="VersionFrom" type="common:TimeRangeValueType" minOccurs="0"/>
          <xs:element name="VersionActive" type="xs:boolean" minOccurs="0"/>
          <xs:element name="AgencyID" type="QueryNestedIDType" minOccurs="0"/>
          <xs:element name="Structure" type="common:MetadataStructureReferenceType" minOccurs="0">
            <xs:annotation>
              <xs:documentation>MetadataStructureReference is used to indicate which metadata structure definition the metadataflow must define a usage for in order to constitute a match.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
        <xs:attribute name="type" type="common:MaintainableTypeCodelistType" use="optional" fixed="Metadataflow"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:annotation>
    <xs:appinfo>SDMX Metadata Structure Definition Query Module</xs:appinfo>
    <xs:documentation>The metadata structure definition query module provides the construct of a query for a metadata structure definition.</xs:documentation>
  </xs:annotation>

  <xs:complexType name="MetadataStructureQueryType">
    <xs:annotation>
      <xs:documentation>MetadataStructureQueryType defines the structure of a metadata structure definition query. The parameters for the query are contained in the MetadataStructureDefinitionWhere element. The References element is used to indicate how objects that reference or are referenced from the matched metadata structure definition should be returned.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="StructuralMetadataQueryType">
        <xs:sequence>
          <xs:element name="ReturnDetails" type="MaintainableReturnDetailsType"/>
          <xs:element ref="MetadataStructureWhere"/>
        </xs:sequence>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:element name="MetadataStructureWhere" type="MetadataStructureWhereType" substitutionGroup="StructuralMetadataWhere">
    <xs:annotation>
      <xs:documentation>MetadataStructureWhere contains the parameters for a metadata structure definition query. All parameters must be matched for an object to satisfy the query. The query is simply a refinement of the base structure query to make the parameters specific to the metadata structure definition.</xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:complexType name="MetadataStructureWhereBaseType" abstract="true">
    <xs:annotation>
      <xs:documentation>MetadataStructureWhereBaseType is an abstract base type the forms the basis for the MetadataStructureWhereType.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="StructureWhereType">
        <xs:sequence>
          <xs:element name="Annotation" type="AnnotationWhereType" minOccurs="0"/>
          <xs:element name="URN" type="xs:anyURI" minOccurs="0"/>
          <xs:element name="ID" type="QueryIDType" minOccurs="0"/>
          <xs:element name="Name" type="QueryTextType" minOccurs="0"/>
          <xs:element name="Description" type="QueryTextType" minOccurs="0"/>
          <xs:element name="Version" type="common:VersionQueryType" minOccurs="0"/>
          <xs:element name="VersionTo" type="common:TimeRangeValueType" minOccurs="0"/>
          <xs:element name="VersionFrom" type="common:TimeRangeValueType" minOccurs="0"/>
          <xs:element name="VersionActive" type="xs:boolean" minOccurs="0"/>
          <xs:element name="AgencyID" type="QueryNestedIDType" minOccurs="0"/>
          <xs:element name="UsedConcept" type="common:ConceptReferenceType" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element name="UsedRepresentation" type="common:ItemSchemeReferenceType" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
        <xs:attribute name="type" type="common:MaintainableTypeCodelistType" use="optional" fixed="MetadataStructure"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="MetadataStructureWhereType">
    <xs:annotation>
      <xs:documentation>MetadataStructureWhereType defines the parameters of a metadata structure definition query. In addition to querying based on the identification, it is also possible to search for metadata structure definitions based on information about its components.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="MetadataStructureWhereBaseType">
        <xs:sequence>
          <xs:element ref="MetadataTargetWhere" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element ref="TargetObjectWhere" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element ref="ReportStructureWhere" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element ref="MetadataAttributeWhere" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:element name="MetadataTargetWhere" type="MetadataTargetWhereType" substitutionGroup="ComponentListWhere">
    <xs:annotation>
      <xs:documentation>MetadataTargetWhere is used to query for a metadata structure definition that contains a metadata target meeting the conditions contained in this structure. The metadata target can be queried based on its identification and/or the details of its target objects. This is an implicit set of "and" parameters, that is the conditions within this must all be met in order to return a match.</xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:complexType name="MetadataTargetWhereType">
    <xs:annotation>
      <xs:documentation>MetadataTargetWhereType describes the structure that is used to query for metadata structure definitions containing a metadata target meeting the conditions detailed. Conditions include the identification and the details of the target objects which make up the metadata target.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="ComponentListWhereType">
        <xs:sequence>
          <xs:sequence>
            <xs:element name="Annotation" type="AnnotationWhereType" minOccurs="0"/>
            <xs:element name="ID" type="QueryIDType" minOccurs="0"/>
            <xs:sequence minOccurs="0" maxOccurs="unbounded">
              <xs:element ref="TargetObjectWhere"/>
            </xs:sequence>
          </xs:sequence>
        </xs:sequence>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:element name="TargetObjectWhere" type="TargetObjectWhereType" substitutionGroup="ComponentWhere">
    <xs:annotation>
      <xs:documentation>IdentifierComponentWhere is used to query for specific target identifiers or metadata structure definitions where a contained identifier component meets the conditions detailed. This is an implicit set of "and" parameters, that is the conditions within this must all be met in order to return a match.</xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:complexType name="TargetObjectWhereBaseType" abstract="true">
    <xs:annotation>
      <xs:documentation>TargetObjectWhereBaseType is an abstract base type that forms the basis for the TargetObjectWhereType.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="ComponentWhereType">
        <xs:sequence>
          <xs:element name="Annotation" type="AnnotationWhereType" minOccurs="0"/>
          <xs:element name="ID" type="QueryIDType" minOccurs="0"/>
          <xs:element name="Enumeration" type="common:ItemSchemeReferenceType" minOccurs="0"/>
        </xs:sequence>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="TargetObjectWhereType">
    <xs:annotation>
      <xs:documentation>TargetObjectWhereType describes the structure of a target object query. A target object can be queried based on its identification, its type (i.e. data set target, key descriptor values target, report period target, or identifiable object target), and in the case of an identifiable object target, an item scheme which enumerates the possible values and/or the class of the target object reference.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="TargetObjectWhereBaseType">
        <xs:attribute name="type" type="common:TargetObjectTypeCodelistType" use="optional">
          <xs:annotation>
            <xs:documentation>The type attribute is used to query for a target object of a given type (i.e. data set target, key descriptor values target, report period target, or identifiable object target)</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="targetClass" type="common:ObjectTypeCodelistType" use="optional">
          <xs:annotation>
            <xs:documentation>The targetClass attribute is used to query for an identifiable object target based on the class its target object.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:element name="ReportStructureWhere" type="ReportStructureWhereType" substitutionGroup="ComponentListWhere">
    <xs:annotation>
      <xs:documentation>ReportStructureWhere is used to query for metadata structure definitions where a given report structure meets the conditions specified. A report structure can be queried based on identification or details about its metadata attributes. This is an implicit set of "and" parameters, that is the conditions within this must all be met in order to return a match.</xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:complexType name="ReportStructureWhereType">
    <xs:annotation>
      <xs:documentation>ReportStructureWhereType defines the parameters for matching based on the details of a report structure. This is used to query for metadata structure definitions where a given report structure meets the conditions specified. A report structure can be queried based on identification and details about its metadata attributes. This is an implicit set of "and" parameters, that is the conditions within this must all be met in order to return a match.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="ComponentListWhereType">
        <xs:sequence>
          <xs:element name="Annotation" type="AnnotationWhereType" minOccurs="0"/>
          <xs:element name="ID" type="QueryIDType" minOccurs="0"/>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element ref="MetadataAttributeWhere"/>
          </xs:sequence>
        </xs:sequence>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:element name="MetadataAttributeWhere" type="MetadataAttributeWhereType" substitutionGroup="ComponentWhere">
    <xs:annotation>
      <xs:documentation>MetadataAttributeWhere is a parameter which is used in a report structure parameter or to query metadata structure definitions where a contained metadata attribute meets the conditions specified. A metadata attribute can be queried based on its identification, the concept from which it takes its semantic, and an item scheme it uses as its representation. Nested metadata attributes allow for the querying of metadata attributes explicitly at nested level, although a top level metadata attribute query will be processed by querying metadata attributes at any level. This is an implicit set of "and" parameters, that is the conditions within this must all be met in order to return a match.</xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:complexType name="MetadataAttributeWhereBaseType" abstract="true">
    <xs:annotation>
      <xs:documentation>MetadataAttributeWhereBaseType is an abstract base type that forms the basis for the MetadataAttributeWhereType.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="ComponentWhereType">
        <xs:sequence>
          <xs:element name="Annotation" type="AnnotationWhereType" minOccurs="0"/>
          <xs:element name="ID" type="QueryIDType" minOccurs="0"/>
          <xs:element name="Enumeration" type="common:CodelistReferenceType" minOccurs="0"/>
        </xs:sequence>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="MetadataAttributeWhereType">
    <xs:annotation>
      <xs:documentation>MetadataAttributeWhereType describes the parameters for a metadata attribute. A metadata attribute can be queried based on its identification, the concept from which it takes its semantic, and an item scheme it uses as its representation. Nested metadata attributes allow for the querying of metadata attributes explicitly at nested level, although a top level metadata attribute query will be processed by querying metadata attributes at any level. This is an implicit set of "and" parameters, that is the conditions within this must all be met in order to return a match.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="MetadataAttributeWhereBaseType">
        <xs:sequence>
          <xs:element ref="MetadataAttributeWhere" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:annotation>
    <xs:appinfo>SDMX Organisation Query Module</xs:appinfo>
    <xs:documentation>The organisation query module provides the construct of a query for any type of organisation scheme.</xs:documentation>
  </xs:annotation>

  <xs:complexType name="OrganisationSchemeQueryType">
    <xs:annotation>
      <xs:documentation>OrganisationSchemeQueryType defines the structure of an organisation scheme query. The parameters for the query are contained in the OrganisationSchemeWhere element. The References element is used to indicate how objects that reference the matched organisation scheme should be returned.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="StructuralMetadataQueryType">
        <xs:sequence>
          <xs:element name="ReturnDetails" type="StructureReturnDetailsType"/>
          <xs:element ref="OrganisationSchemeWhere"/>
        </xs:sequence>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:element name="OrganisationSchemeWhere" type="OrganisationSchemeWhereType" substitutionGroup="StructuralMetadataWhere">
    <xs:annotation>
      <xs:documentation>OrganisationSchemeWhere defines the parameters for an organisation scheme query, regardless of the specific type of organisation scheme being sought. All parameters must be matched for an object to satisfy the query. In addition to querying based on the basic maintainable properties, it is also possible to search for an organisation scheme based on the details of its organisations. In any case, the organisation scheme will be returned according the indicated return detail.</xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:complexType name="OrganisationSchemeWhereType">
    <xs:annotation>
      <xs:documentation>OrganisationSchemeWhereType contains the parameters of an organisation scheme query. All supplied parameters must be matched in order for an object to satisfy the query.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="ItemSchemeWhereType">
        <xs:sequence>
          <xs:element name="Annotation" type="AnnotationWhereType" minOccurs="0"/>
          <xs:element name="URN" type="xs:anyURI" minOccurs="0"/>
          <xs:element name="ID" type="QueryIDType" minOccurs="0"/>
          <xs:element name="Name" type="QueryTextType" minOccurs="0"/>
          <xs:element name="Description" type="QueryTextType" minOccurs="0"/>
          <xs:element name="Version" type="common:VersionQueryType" minOccurs="0"/>
          <xs:element name="VersionTo" type="common:TimeRangeValueType" minOccurs="0"/>
          <xs:element name="VersionFrom" type="common:TimeRangeValueType" minOccurs="0"/>
          <xs:element name="VersionActive" type="xs:boolean" minOccurs="0"/>
          <xs:element name="AgencyID" type="QueryNestedIDType" minOccurs="0"/>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element ref="OrganisationWhere"/>
          </xs:sequence>
        </xs:sequence>
        <xs:attribute name="type" type="OrganisationSchemeTypeCodeType" use="optional" default="OrganisationScheme">
          <xs:annotation>
            <xs:documentation>The type attribute indicates the type of organisation scheme which is being queried for, with the default being any organisation scheme. Note that agency, data consumer, and data provider scheme all have fixed identifiers and versions, so specifying these types with parameters for the identifier and/or version which do not match these fixed values will never return a result.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:element name="OrganisationWhere" type="OrganisationWhereType" substitutionGroup="ItemWhere">
    <xs:annotation>
      <xs:documentation>OrganisationWhere is used to query for organisations matching the parameters supplied. This is an implicit set of "and" parameters, meaning all of the conditions must be met in order to return a match.</xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:complexType name="OrganisationWhereType">
    <xs:annotation>
      <xs:documentation>OrganisationWhereType defines a set of parameters for matching an organisation. In addition to the base parameters for any item, there is an additional parameter for matching an organisation based on the roles it serves. All supplied parameters must be matched in order for an object to satisfy the query.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="ItemWhereType">
        <xs:sequence>
          <xs:element name="Annotation" type="AnnotationWhereType" minOccurs="0"/>
          <xs:element name="ID" type="QueryIDType" minOccurs="0"/>
          <xs:element name="Name" type="QueryTextType" minOccurs="0"/>
          <xs:element name="Description" type="QueryTextType" minOccurs="0"/>
          <xs:choice minOccurs="0">
            <xs:element name="Parent" type="common:LocalOrganisationUnitReferenceType">
              <xs:annotation>
                <xs:documentation>Parent is only applicable when searching for organisation units, and is used to match organisations which have a parent organisation unit which is referenced here.</xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:choice>
        </xs:sequence>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:simpleType name="OrganisationSchemeTypeCodeType">
    <xs:annotation>
      <xs:documentation>OrganisationSchemeTypeCodeType enumerates the possible types of organisation schemes that can be queried for.</xs:documentation>
    </xs:annotation>
    <xs:restriction base="common:MaintainableTypeCodelistType">
      <xs:enumeration value="OrganisationScheme"/>
      <xs:enumeration value="AgencyScheme"/>
      <xs:enumeration value="DataConsumerScheme"/>
      <xs:enumeration value="DataProviderScheme"/>
      <xs:enumeration value="OrganisationUnitScheme"/>
    </xs:restriction>
  </xs:simpleType>

  <xs:annotation>
    <xs:appinfo>SDMX Process Query Module</xs:appinfo>
    <xs:documentation>The process query module provides the construct of a query for a process.</xs:documentation>
  </xs:annotation>

  <xs:complexType name="ProcessQueryType">
    <xs:annotation>
      <xs:documentation>ProcessQueryType defines the structure of a process query. The parameters for the query are contained in the ProcessWhere element. The References element is used to indicate how objects that are referenced from the matched process scheme should be returned.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="StructuralMetadataQueryType">
        <xs:sequence>
          <xs:element name="ReturnDetails" type="MaintainableReturnDetailsType"/>
          <xs:element ref="ProcessWhere"/>
        </xs:sequence>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:element name="ProcessWhere" type="ProcessWhereType" substitutionGroup="StructuralMetadataWhere">
    <xs:annotation>
      <xs:documentation>ProcessWhere contains the parameters for a process query. All parameters must be matched for an object to satisfy the query. In addition to querying based on the basic maintainable properties, it is also possible to query based on the details of the process steps defined within the process. In any case, the entire process will be returned according the indicated return detail.</xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:complexType name="ProcessWhereBaseType" abstract="true">
    <xs:annotation>
      <xs:documentation>ProcessWhereBaseType is an abstract base type which forms the basis for the ProcessWhereType.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="MaintainableWhereType">
        <xs:sequence>
          <xs:element name="Annotation" type="AnnotationWhereType" minOccurs="0"/>
          <xs:element name="URN" type="xs:anyURI" minOccurs="0"/>
          <xs:element name="ID" type="QueryIDType" minOccurs="0"/>
          <xs:element name="Name" type="QueryTextType" minOccurs="0"/>
          <xs:element name="Description" type="QueryTextType" minOccurs="0"/>
          <xs:element name="Version" type="common:VersionQueryType" minOccurs="0"/>
          <xs:element name="VersionTo" type="common:TimeRangeValueType" minOccurs="0"/>
          <xs:element name="VersionFrom" type="common:TimeRangeValueType" minOccurs="0"/>
          <xs:element name="VersionActive" type="xs:boolean" minOccurs="0"/>
          <xs:element name="AgencyID" type="QueryNestedIDType" minOccurs="0"/>
        </xs:sequence>
        <xs:attribute name="type" type="common:MaintainableTypeCodelistType" use="optional" fixed="Process">
          <xs:annotation>
            <xs:documentation>The type attribute indicates the type of constraint that is being queried for, with a default of Any, meaning both content and attachment constraints will be searched.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="ProcessWhereType">
    <xs:annotation>
      <xs:documentation>ProcessWhereType defines the parameters of a process query. All supplied parameters must be matched in order for an object to satisfy the query.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ProcessWhereBaseType">
        <xs:sequence>
          <xs:element name="ProcessStepWhere" type="ProcessStepWhereType" minOccurs="0" maxOccurs="unbounded">
            <xs:annotation>
              <xs:documentation>ProcessStepWhere is used to query for process steps matching the parameters supplied. It allows for nested process step queries so that hierarchical steps can be queried explicitly by their nested level, although a top level step will always result in a search for process steps at any level. This is an implicit set of "and" parameters, meaning all of the conditions must be met in order to return a match.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="ProcessStepWhereType">
    <xs:annotation>
      <xs:documentation>ProcessStepWhereType defines a set of parameters for matching a category. All supplied parameters must be matched in order for an object to satisfy the query. In addition to the base item parameters, there are also parameters for matching based on the objects which serve as the input or output to the process step.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="IdentifiableWhereType">
        <xs:sequence>
          <xs:element name="InputOrOutputObject" type="InputOrOutputObjectType" minOccurs="0" maxOccurs="unbounded">
            <xs:annotation>
              <xs:documentation>InputOrOutputObject is a parameter for matching a process step based on the referenced object, and whether it is an input or an output to the step.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="ProcessStepWhere" type="ProcessStepWhereType" minOccurs="0" maxOccurs="unbounded">
            <xs:annotation>
              <xs:documentation>ProcessStepWhere is used to query for process steps within a the particular process step. This is an implicit set of "and" parameters, meaning all of the conditions must be met in order to return a match.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="InputOrOutputObjectType">
    <xs:annotation>
      <xs:documentation>InputOrOutputObjectType describes the structure of input or output condition for a process step query. It contains reference to an object, as will as an attribute indicates whether the object should be an input, output, or either of the two to the step.</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="ObjectReference" type="common:ObjectReferenceType">
        <xs:annotation>
          <xs:documentation>ObjectReference is used to query for a process containing process steps where the referenced object is input or output to the process step.</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
    <xs:attribute name="type" type="InputOutputTypeCodeType" default="Any">
      <xs:annotation>
        <xs:documentation>The type attribute is used to indicate whether the referenced object should be an input, output, or either of the two to the process step. The default for this is Any.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>

  <xs:simpleType name="InputOutputTypeCodeType">
    <xs:annotation>
      <xs:documentation>InputOutputTypeCodeType enumerates the role an object plays in a process step.</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="Input">
        <xs:annotation>
          <xs:documentation>Input - referenced object is an input to the process step.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="Output">
        <xs:annotation>
          <xs:documentation>Output - referenced object is an output to the process step.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="Any">
        <xs:annotation>
          <xs:documentation>Any - referenced object is either an input or an output to the process step.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>

  <xs:annotation>
    <xs:appinfo>SDMX Provision Agreement Query Module</xs:appinfo>
    <xs:documentation>The provision agreement query module provides the construct of a query for a provision agreement.</xs:documentation>
  </xs:annotation>

  <xs:complexType name="ProvisionAgreementQueryType">
    <xs:annotation>
      <xs:documentation>ProvisionAgreementQueryType defines the structure of a provision agreement query. The parameters for the query are contained in the ProvisionAgreementWhere element. The References element is used to indicate how objects that reference or are referenced from the matched provision agreement should be returned.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="StructuralMetadataQueryType">
        <xs:sequence>
          <xs:element name="ReturnDetails" type="MaintainableReturnDetailsType"/>
          <xs:element ref="ProvisionAgreementWhere"/>
        </xs:sequence>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:element name="ProvisionAgreementWhere" type="ProvisionAgreementWhereType" substitutionGroup="StructuralMetadataWhere">
    <xs:annotation>
      <xs:documentation>ProvisionAgreementWhere contains the parameters for a provision agreement query. All parameters must be matched for an object to satisfy the query. In addition to querying based on the basic maintainable properties, it is also possible to search for a provision agreement based on the data provider and the structure usage it pairs.</xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:complexType name="ProvisionAgreementWhereBaseType" abstract="true">
    <xs:annotation>
      <xs:documentation>ProvisionAgreementWhereBaseType is an abstract base type which forms the basis for the ProvisionAgreementWhereType.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="MaintainableWhereType">
        <xs:sequence>
          <xs:element name="Annotation" type="AnnotationWhereType" minOccurs="0"/>
          <xs:element name="URN" type="xs:anyURI" minOccurs="0"/>
          <xs:element name="ID" type="QueryIDType" minOccurs="0"/>
          <xs:element name="Name" type="QueryTextType" minOccurs="0"/>
          <xs:element name="Description" type="QueryTextType" minOccurs="0"/>
          <xs:element name="Version" type="common:VersionQueryType" minOccurs="0"/>
          <xs:element name="VersionTo" type="common:TimeRangeValueType" minOccurs="0"/>
          <xs:element name="VersionFrom" type="common:TimeRangeValueType" minOccurs="0"/>
          <xs:element name="VersionActive" type="xs:boolean" minOccurs="0"/>
          <xs:element name="AgencyID" type="QueryNestedIDType" minOccurs="0"/>
        </xs:sequence>
        <xs:attribute name="type" type="common:MaintainableTypeCodelistType" use="optional" fixed="ProvisionAgreement">
          <xs:annotation>
            <xs:documentation>The type attribute indicates the type of constraint that is being queried for, with a default of Any, meaning both content and attachment constraints will be searched.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="ProvisionAgreementWhereType">
    <xs:annotation>
      <xs:documentation>ProvisionAgreementWhereType defines the parameters of a provision agreement query. All supplied parameters must be matched in order for an object to satisfy the query.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ProvisionAgreementWhereBaseType">
        <xs:sequence>
          <xs:element name="StructureUsage" type="common:StructureUsageReferenceType" minOccurs="0">
            <xs:annotation>
              <xs:documentation>StructureUsage is used to indicate which structure usage the provision agreement must reference in order to constitute a match.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="DataProvider" type="common:DataProviderReferenceType" minOccurs="0">
            <xs:annotation>
              <xs:documentation>DataProvider is used to indicate which data provider the provision agreement must reference in order to constitute a match.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:annotation>
    <xs:appinfo>SDMX Reporting Taxonomy Query Module</xs:appinfo>
    <xs:documentation>The reporting taxonomy query module provides the construct of a query for a reporting taxonomy.</xs:documentation>
  </xs:annotation>

  <xs:complexType name="ReportingTaxonomyQueryType">
    <xs:annotation>
      <xs:documentation>ReportingTaxonomyQueryType defines the structure of a reporting taxonomy query. The parameters for the query are contained in the ReportingTaxonomyWhere element. The References element is used to indicate how objects that are referenced from the reporting taxonomy should be returned.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="StructuralMetadataQueryType">
        <xs:sequence>
          <xs:element name="ReturnDetails" type="StructureReturnDetailsType"/>
          <xs:element ref="ReportingTaxonomyWhere"/>
        </xs:sequence>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:element name="ReportingTaxonomyWhere" type="ReportingTaxonomyWhereType" substitutionGroup="StructuralMetadataWhere">
    <xs:annotation>
      <xs:documentation>ReportingTaxonomyWhere contains the parameters for a reporting taxonomy query. All parameters must be matched for an object to satisfy the query. In addition to querying based on the basic maintainable properties, it is also possible to search for a reporting taxonomy based on the details of its reporting categories. In any case, the reporting taxonomy will be returned according the indicated return detail.</xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:complexType name="ReportingTaxonomyWhereType">
    <xs:annotation>
      <xs:documentation>ReportingTaxonomyWhereType defines the parameters of a reporting taxonomy query. All supplied parameters must be matched in order for an object to satisfy the query. In addition to querying based on the base maintainable parameters, it is also possible to search for taxonomies that contain particular reporting categories, and on the root level structure definitions of the taxonomy.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="ItemSchemeWhereType">
        <xs:sequence>
          <xs:element name="Annotation" type="AnnotationWhereType" minOccurs="0"/>
          <xs:element name="URN" type="xs:anyURI" minOccurs="0"/>
          <xs:element name="ID" type="QueryIDType" minOccurs="0"/>
          <xs:element name="Name" type="QueryTextType" minOccurs="0"/>
          <xs:element name="Description" type="QueryTextType" minOccurs="0"/>
          <xs:element name="Version" type="common:VersionQueryType" minOccurs="0"/>
          <xs:element name="VersionTo" type="common:TimeRangeValueType" minOccurs="0"/>
          <xs:element name="VersionFrom" type="common:TimeRangeValueType" minOccurs="0"/>
          <xs:element name="VersionActive" type="xs:boolean" minOccurs="0"/>
          <xs:element name="AgencyID" type="QueryNestedIDType" minOccurs="0"/>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element ref="ReportingCategoryWhere"/>
          </xs:sequence>
        </xs:sequence>
        <xs:attribute name="type" type="common:MaintainableTypeCodelistType" use="optional" fixed="ReportingTaxonomy"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:element name="ReportingCategoryWhere" type="ReportingCategoryWhereType" substitutionGroup="ItemWhere">
    <xs:annotation>
      <xs:documentation>ReportingCategoryWhere is used to query for reporting categories matching the parameters supplied. It allows for nested reporting category queries so that hierarchical reporting categories can be queried explicitly by their nested level, although a top level reporting category will always result in a search for reporting categories at any level. This is an implicit set of "and" parameters, meaning all of the conditions must be met in order to return a match.</xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:complexType name="ReportingCategoryWhereBaseType" abstract="true">
    <xs:annotation>
      <xs:documentation>ReportingCategoryWhereBaseType is an abstract base type that forms the basis for the ReportingCategoryQueryType.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="ItemWhereType">
        <xs:sequence>
          <xs:element name="Annotation" type="AnnotationWhereType" minOccurs="0"/>
          <xs:element name="ID" type="QueryIDType" minOccurs="0"/>
          <xs:element name="Name" type="QueryTextType" minOccurs="0"/>
          <xs:element name="Description" type="QueryTextType" minOccurs="0"/>
          <xs:choice minOccurs="0">
            <xs:sequence maxOccurs="unbounded">
              <xs:element ref="ReportingCategoryWhere"/>
            </xs:sequence>
          </xs:choice>
        </xs:sequence>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="ReportingCategoryWhereType">
    <xs:annotation>
      <xs:documentation>ReportingCategoryWhereType contains a set of parameters for matching a reporting category. All supplied parameters must be matched in order for an object to satisfy the query.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ReportingCategoryWhereBaseType">
        <xs:choice>
          <xs:element name="ProvisioningMetadata" type="common:StructureUsageReferenceType" minOccurs="0" maxOccurs="unbounded">
            <xs:annotation>
              <xs:documentation>ProvisioningMetadata is used to query for a reporting category where the structure usages referenced are referenced by the reporting category.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="StructuralMetadata" type="common:StructureReferenceType" minOccurs="0" maxOccurs="unbounded">
            <xs:annotation>
              <xs:documentation>StructuralMetadata is used to query for a reporting category where the structures referenced are referenced by the reporting category.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:annotation>
    <xs:appinfo>SDMX Schema Query Module</xs:appinfo>
    <xs:documentation>The schema query module provides the construct of a query for data structure or metadata structure definition specific schemas.</xs:documentation>
  </xs:annotation>

  <xs:complexType name="DataSchemaQueryType">
    <xs:annotation>
      <xs:documentation>DataSchemaQueryType defines the structure of a query for a structured data schema. This query consists of a single data structure which provides the full details of what type of structured data schema should be returned.</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="DataStructure" type="DataStructureRequestType">
        <xs:annotation>
          <xs:documentation>DataStructure references a data structure either explicitly or through a usage (dataflow) or agreement based on the flow (provision agreement). An observation dimension must be specifies as well as indicators for using explicit measures, deriving the type from the time series specific data set, and processing constraints. The explicit measure option is only applicable if the observation dimension is the measure dimension; otherwise the value provided will be ignored. The time series option is only applicable  if the observation dimension is the time dimension; otherwise the value provided will be ignored. Constraints will only be applied in the returned schemas if specifically requested. This means that even if the request specifies a provision agreement, the returned schema will not take into account the constraints on that agreement unless the request explicitly requests this.</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="MetadataSchemaQueryType">
    <xs:annotation>
      <xs:documentation>MetadataSchemaQueryType defines the structure of a query for a structured metadata schema. This query consists of a single metadata structure which simply provides a reference to a metadata structure.</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="MetadataStructure" type="common:GenericMetadataStructureType">
        <xs:annotation>
          <xs:documentation>MetadataStructure references a metadata structure either explicitly or through it usage (metadataflow) or an application of that usage (provision agreement).</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="DataStructureRequestType">
    <xs:annotation>
      <xs:documentation>DataStructureRequestType extends the base DataStructureRequestType to add additional parameters that are necessary when querying for a schema.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="common:DataStructureRequestType">
        <xs:attribute name="timeSeries" type="xs:boolean" use="optional" default="false">
          <xs:annotation>
            <xs:documentation>The timeSeries attribute indicates that the requested schema should derived from the time series specific data set. If the observation dimension is anything but the time dimension, this field will be ignored.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="processConstraints" type="xs:boolean" use="optional" default="false">
          <xs:annotation>
            <xs:documentation>The processConstraints attribute indicates that constraints should be processed when returning the schema. If this value is false, then the schema will be based on the data structure deflation, regardless of whether the reference was specified as a provision agreement, dataflow, or data structure. If this is true, then the constraints at the requested level will be processed and the returned schema will take these constraints into account (i.e. the appropriate code lists will be sub-setted</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:annotation>
    <xs:appinfo>SDMX Structures Query Module</xs:appinfo>
    <xs:documentation>The structures query module provides the construct of a query for all structures, regardless of their type.</xs:documentation>
  </xs:annotation>

  <xs:complexType name="StructuresQueryType">
    <xs:annotation>
      <xs:documentation>StructuresQueryType defines the structure of a structures query. The parameters for the query are contained in the StructuresWhere element. The References element, typically used to indicate which objects should be returned, is fixed so that all object matching the parameters are returned..</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="StructuralMetadataQueryType">
        <xs:sequence>
          <xs:element name="ReturnDetails" type="MaintainableReturnDetailsType"/>
          <xs:element ref="StructuresWhere"/>
        </xs:sequence>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:element name="StructuresWhere" type="StructuresWhereType" substitutionGroup="StructuralMetadataWhere">
    <xs:annotation>
      <xs:documentation>StructuresWhere defines the parameters for a structures query. All parameters must be matched for an object to satisfy the query. Only the basic maintainable parameters are available.</xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:complexType name="StructuresWhereType">
    <xs:annotation>
      <xs:documentation>StructuresWhereType contains a set of parameters for a structures query. All supplied parameters must be matched in order for an object to satisfy the query.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="MaintainableWhereType">
        <xs:sequence>
          <xs:element name="Annotation" type="AnnotationWhereType" minOccurs="0"/>
          <xs:element name="URN" type="xs:anyURI" minOccurs="0"/>
          <xs:element name="ID" type="QueryIDType" minOccurs="0"/>
          <xs:element name="Name" type="QueryTextType" minOccurs="0"/>
          <xs:element name="Description" type="QueryTextType" minOccurs="0"/>
          <xs:element name="Version" type="common:VersionQueryType" minOccurs="0"/>
          <xs:element name="VersionTo" type="common:TimeRangeValueType" minOccurs="0"/>
          <xs:element name="VersionFrom" type="common:TimeRangeValueType" minOccurs="0"/>
          <xs:element name="VersionActive" type="xs:boolean" minOccurs="0"/>
          <xs:element name="AgencyID" type="QueryNestedIDType" minOccurs="0"/>
        </xs:sequence>
        <xs:attribute name="type" type="common:MaintainableTypeCodelistType" use="optional" fixed="Any"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:annotation>
    <xs:appinfo>SDMX Structure Set Query Module</xs:appinfo>
    <xs:documentation>The structure set query module provides the construct of a query for a structure set.</xs:documentation>
  </xs:annotation>

  <xs:complexType name="StructureSetQueryType">
    <xs:annotation>
      <xs:documentation>StructureSetQueryType defines the structure of a structure set query. The parameters for the query are contained in the StructureSetWhere element. The References element is used to indicate how objects that are referenced from the structure set should be returned.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="StructuralMetadataQueryType">
        <xs:sequence>
          <xs:element name="ReturnDetails" type="MaintainableReturnDetailsType"/>
          <xs:element ref="StructureSetWhere"/>
        </xs:sequence>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:element name="StructureSetWhere" type="StructureSetWhereType" substitutionGroup="StructuralMetadataWhere">
    <xs:annotation>
      <xs:documentation>StructureSetWhere contains the parameters for a structure query. All parameters must be matched for an object to satisfy the query. In addition to querying based on the basic maintainable properties, it is also possible to search based on the structures that are related by the set or the objects which are mapped by the set's maps. In any case, the structure set will be returned according the indicated return detail.</xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:complexType name="StructureSetWhereBaseType" abstract="true">
    <xs:annotation>
      <xs:documentation>StructureSetWhereBaseType is an abstract base type which forms the basis for the StructureSetWhereType.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="MaintainableWhereType">
        <xs:sequence>
          <xs:element name="Annotation" type="AnnotationWhereType" minOccurs="0"/>
          <xs:element name="URN" type="xs:anyURI" minOccurs="0"/>
          <xs:element name="ID" type="QueryIDType" minOccurs="0"/>
          <xs:element name="Name" type="QueryTextType" minOccurs="0"/>
          <xs:element name="Description" type="QueryTextType" minOccurs="0"/>
          <xs:element name="Version" type="common:VersionQueryType" minOccurs="0"/>
          <xs:element name="VersionTo" type="common:TimeRangeValueType" minOccurs="0"/>
          <xs:element name="VersionFrom" type="common:TimeRangeValueType" minOccurs="0"/>
          <xs:element name="VersionActive" type="xs:boolean" minOccurs="0"/>
          <xs:element name="AgencyID" type="QueryNestedIDType" minOccurs="0"/>
        </xs:sequence>
        <xs:attribute name="type" type="common:MaintainableTypeCodelistType" use="optional" fixed="StructureSet">
          <xs:annotation>
            <xs:documentation>The type attribute indicates the type of constraint that is being queried for, with a default of Any, meaning both content and attachment constraints will be searched.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="StructureSetWhereType">
    <xs:annotation>
      <xs:documentation>StructureSetWhereType defines the parameters of a structure set query. All supplied parameters must be matched in order for an object to satisfy the query. In addition to querying based on the base maintainable parameters, it is also possible to search based on the structures that are related by the set or the objects which are mapped by the set's maps.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="StructureSetWhereBaseType">
        <xs:sequence>
          <xs:element name="RelatedStructures" type="common:StructureOrUsageReferenceType" minOccurs="0" maxOccurs="unbounded">
            <xs:annotation>
              <xs:documentation>RelatedStructure is used to query for structure sets where the referenced key families, metadata structure definitions, dataflows, and metadataflows are related to another by the structure set.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="MappedObject" type="MappedObjectType" minOccurs="0" maxOccurs="unbounded">
            <xs:annotation>
              <xs:documentation>MappedObject is used to query for structure sets where the reference object is mapped in one of the maps defined by the structure set. The referenced object can be specified as being either a source, a target, or either in the queried map.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="MappedObjectType">
    <xs:annotation>
      <xs:documentation>MappedObjectType defines a structure for referencing an object and indicating whether it is the source, target, or either for the purposes of query for structure set containing the referenced object in one of the maps it defines.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="MappedObjectReferenceType">
        <xs:attribute name="type" type="SourceTargetType" use="optional" default="Any">
          <xs:annotation>
            <xs:documentation>The type attribute indicates whether the referenced object should be queried as the source, target, or both of a map.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="MappedObjectReferenceType">
    <xs:annotation>
      <xs:documentation>MappedObjectReferenceType is a type for referencing any mappable object. It consists of a URN and/or a complete set of reference fields; agency, id, and version.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="common:MaintainableReferenceType">
        <xs:choice>
          <xs:sequence>
            <xs:element name="Ref" type="MappedObjectRefType" form="unqualified"/>
            <xs:element name="URN" type="xs:anyURI" form="unqualified" minOccurs="0"/>
          </xs:sequence>
          <xs:element name="URN" type="xs:anyURI" form="unqualified"/>
        </xs:choice>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="MappedObjectRefType">
    <xs:annotation>
      <xs:documentation>MappedObjectRefType defines a set of reference fields for any type of mappable object.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="common:MaintainableRefType">
        <xs:attribute name="class" type="MappedObjectTypeCodelistType" use="required"/>
        <xs:attribute name="package" type="common:PackageTypeCodelistType" use="required"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:simpleType name="MappedObjectTypeCodelistType">
    <xs:annotation>
      <xs:documentation>MappedObjectTypeCodelistType is a restriction of the MaintainableTypeCodelistType which contains only the object types which can be mapped in a structure set.</xs:documentation>
    </xs:annotation>
    <xs:restriction base="common:ConcreteMaintainableTypeCodelistType">
      <xs:enumeration value="AgencyScheme"/>
      <xs:enumeration value="CategoryScheme"/>
      <xs:enumeration value="Codelist"/>
      <xs:enumeration value="ConceptScheme"/>
      <xs:enumeration value="Dataflow"/>
      <xs:enumeration value="DataConsumerScheme"/>
      <xs:enumeration value="DataProviderScheme"/>
      <xs:enumeration value="DataStructure"/>
      <xs:enumeration value="HierarchicalCodelist"/>
      <xs:enumeration value="Metadataflow"/>
      <xs:enumeration value="MetadataStructure"/>
      <xs:enumeration value="OrganisationUnitScheme"/>
      <xs:enumeration value="ReportingTaxonomy"/>
    </xs:restriction>
  </xs:simpleType>

  <xs:simpleType name="SourceTargetType">
    <xs:annotation>
      <xs:documentation>SourceTargetType is an enumeration to indicate whether an object is the source, target, or either of the two options.</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="Any"/>
      <xs:enumeration value="Source"/>
      <xs:enumeration value="Target"/>
    </xs:restriction>
  </xs:simpleType>

</xs:schema>