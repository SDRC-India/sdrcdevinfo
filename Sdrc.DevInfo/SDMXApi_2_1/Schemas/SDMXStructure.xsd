<?xml version="1.0" encoding="UTF-8"?>
<!-- Copyright SDMX 2010 - http://www.sdmx.org -->
<xs:schema targetNamespace="http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"
           elementFormDefault="qualified"
           xmlns:xs="http://www.w3.org/2001/XMLSchema"
           xmlns="http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"
           xmlns:structure="http://www.sdmx.org/resources/sdmxml/schemas/v2_1/structure"
           xmlns:common="http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common">
  <xs:import namespace="http://www.sdmx.org/resources/sdmxml/schemas/v2_1/common" schemaLocation="SDMXCommon.xsd"/>
  <xs:annotation>
    <xs:appinfo>SDMX Structure Namespace Module</xs:appinfo>
    <xs:documentation>The structure namespace module contains the descriptions of structural metadata such as key families, concepts, and codelists. For convenience, this module has been broken down into sub-modules for the different type of structural constructs.</xs:documentation>
  </xs:annotation>

  <xs:element name="Structures" type="StructuresType">
    <xs:annotation>
      <xs:documentation>Structures contains constructs for all structural metadata components.</xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:complexType name="StructuresType">
    <xs:annotation>
      <xs:documentation>StructuresType describes the structure of the container for all structural metadata components. The structural components may be explicitly detailed, or referenced from an external structure document or registry service. Best practices dictate that, at a minimum, any structural component that is referenced by another structural component be included by reference.</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="OrganisationSchemes" type="OrganisationSchemesType" minOccurs="0">
        <xs:annotation>
          <xs:documentation>OrganisationSchemes contains a collection of organisation scheme descriptions. The organisation schemes may be detailed in full, or referenced from an external structure document or registry service.</xs:documentation>
        </xs:annotation>
        <xs:unique name="UniqueAgencyScheme">
          <xs:selector xpath="structure:AgencyScheme"/>
          <xs:field xpath="@id"/>
          <xs:field xpath="@agencyID"/>
          <xs:field xpath="@version"/>
        </xs:unique>
        <xs:unique name="UniqueDataConsumerScheme">
          <xs:selector xpath="structure:DataConsumerScheme"/>
          <xs:field xpath="@id"/>
          <xs:field xpath="@agencyID"/>
          <xs:field xpath="@version"/>
        </xs:unique>
        <xs:unique name="UniqueDataProviderScheme">
          <xs:selector xpath="structure:DataProviderScheme"/>
          <xs:field xpath="@id"/>
          <xs:field xpath="@agencyID"/>
          <xs:field xpath="@version"/>
        </xs:unique>
        <xs:unique name="UniqueOrganisationUnitScheme">
          <xs:selector xpath="structure:OrganisationUnitScheme"/>
          <xs:field xpath="@id"/>
          <xs:field xpath="@agencyID"/>
          <xs:field xpath="@version"/>
        </xs:unique>
      </xs:element>
      <xs:element name="Dataflows" type="DataflowsType" minOccurs="0">
        <xs:annotation>
          <xs:documentation>Dataflows contains a collection of data flow descriptions. The data flows may be detailed in full, or referenced from an external structure document or registry service.</xs:documentation>
        </xs:annotation>
        <xs:unique name="UniqueDataflow">
          <xs:selector xpath="structure:Dataflow"/>
          <xs:field xpath="@id"/>
          <xs:field xpath="@agencyID"/>
          <xs:field xpath="@version"/>
        </xs:unique>
      </xs:element>
      <xs:element name="Metadataflows" type="MetadataflowsType" minOccurs="0">
        <xs:annotation>
          <xs:documentation>Metadataflows contains a collection of metadata flow descriptions. The metadata flows may be detailed in full, or referenced from an external structure document or registry service.</xs:documentation>
        </xs:annotation>
        <xs:unique name="UniqueMetadataflow">
          <xs:selector xpath="structure:Metadataflow"/>
          <xs:field xpath="@id"/>
          <xs:field xpath="@agencyID"/>
          <xs:field xpath="@version"/>
        </xs:unique>
      </xs:element>
      <xs:element name="CategorySchemes" type="CategorySchemesType" minOccurs="0">
        <xs:annotation>
          <xs:documentation>CategorySchemes contains a collection of category scheme descriptions. The category schemes may be detailed in full, or referenced from an external structure document or registry service.</xs:documentation>
        </xs:annotation>
        <xs:unique name="UniqueCategoryScheme">
          <xs:selector xpath="structure:CategoryScheme"/>
          <xs:field xpath="@id"/>
          <xs:field xpath="@agencyID"/>
          <xs:field xpath="@version"/>
        </xs:unique>
      </xs:element>
      <xs:element name="Categorisations" type="CategorisationsType" minOccurs="0">
        <xs:annotation>
          <xs:documentation>Categorisations contains a collection of structural object categorisations. This container may contain categorisations for many types of objects. The categorisations may be detailed in full, or referenced from an external structure document or registry service.</xs:documentation>
        </xs:annotation>
        <xs:unique name="UniqueCategorisation">
          <xs:selector xpath="structure:Categorisation"/>
          <xs:field xpath="@id"/>
          <xs:field xpath="@agencyID"/>
          <xs:field xpath="@version"/>
        </xs:unique>
      </xs:element>
      <xs:element name="Codelists" type="CodelistsType" minOccurs="0">
        <xs:annotation>
          <xs:documentation>Codelists contains a collection of code list descriptions. The code lists may be detailed in full, or referenced from an external structure document or registry service.</xs:documentation>
        </xs:annotation>
        <xs:unique name="UniqueCodelist">
          <xs:selector xpath="structure:Codelist"/>
          <xs:field xpath="@id"/>
          <xs:field xpath="@agencyID"/>
          <xs:field xpath="@version"/>
        </xs:unique>
      </xs:element>
      <xs:element name="HierarchicalCodelists" type="HierarchicalCodelistsType" minOccurs="0">
        <xs:annotation>
          <xs:documentation>HierarchicalCodelists contains a collection of hierarchical code list descriptions. The hierarchical code lists may be detailed in full, or referenced from an external structure document or registry service.</xs:documentation>
        </xs:annotation>
        <xs:unique name="UniqueHierarchicalCodelist">
          <xs:selector xpath="structure:HierarchicalCodelist"/>
          <xs:field xpath="@id"/>
          <xs:field xpath="@agencyID"/>
          <xs:field xpath="@version"/>
        </xs:unique>
      </xs:element>
      <xs:element name="Concepts" type="ConceptsType" minOccurs="0">
        <xs:annotation>
          <xs:documentation>Concepts contains a collection of concept descriptions. The concepts described may be both stand-alone concepts and concepts contained within schemes. The concepts may be detailed in full, or referenced from an external structure document or registry service.</xs:documentation>
        </xs:annotation>
        <xs:unique name="UniqueConceptScheme">
          <xs:selector xpath="structure:ConceptScheme"/>
          <xs:field xpath="@id"/>
          <xs:field xpath="@agencyID"/>
          <xs:field xpath="@version"/>
        </xs:unique>
      </xs:element>
      <xs:element name="MetadataStructures" type="MetadataStructuresType" minOccurs="0">
        <xs:annotation>
          <xs:documentation>MetadataStructures contains a collection of metadata structure definition descriptions. The metadata structure definitions may be detailed in full, or referenced from an external structure document or registry service.</xs:documentation>
        </xs:annotation>
        <xs:unique name="UniqueMetadataStructure">
          <xs:selector xpath="structure:MetadataStructure"/>
          <xs:field xpath="@id"/>
          <xs:field xpath="@agencyID"/>
          <xs:field xpath="@version"/>
        </xs:unique>
      </xs:element>
      <xs:element name="DataStructures" type="DataStructuresType" minOccurs="0">
        <xs:annotation>
          <xs:documentation>DataStructures contains a collection of data structure definitions. The data structure definitions may be detailed in full, or referenced from an external structure document or registry service.</xs:documentation>
        </xs:annotation>
        <xs:unique name="UniqueDataStructure">
          <xs:selector xpath="structure:DataStructure"/>
          <xs:field xpath="@id"/>
          <xs:field xpath="@agencyID"/>
          <xs:field xpath="@version"/>
        </xs:unique>
      </xs:element>
      <xs:element name="StructureSets" type="StructureSetsType" minOccurs="0">
        <xs:annotation>
          <xs:documentation>StructureSets contains a collection of structure set descriptions. The structure sets may be detailed in full, or referenced from an external structure document or registry service.</xs:documentation>
        </xs:annotation>
        <xs:unique name="UniqueStructureSet">
          <xs:selector xpath="structure:StructureSet"/>
          <xs:field xpath="@id"/>
          <xs:field xpath="@agencyID"/>
          <xs:field xpath="@version"/>
        </xs:unique>
      </xs:element>
      <xs:element name="ReportingTaxonomies" type="ReportingTaxonomiesType" minOccurs="0">
        <xs:annotation>
          <xs:documentation>ReportingTaxonomies contains a collection of reporting taxonomy descriptions. The reporting taxonomies may be detailed in full, or referenced from an external structure document or registry service.</xs:documentation>
        </xs:annotation>
        <xs:unique name="UniqueReportingTaxonomy">
          <xs:selector xpath="structure:ReportingTaxonomy"/>
          <xs:field xpath="@id"/>
          <xs:field xpath="@agencyID"/>
          <xs:field xpath="@version"/>
        </xs:unique>
      </xs:element>
      <xs:element name="Processes" type="ProcessesType" minOccurs="0">
        <xs:annotation>
          <xs:documentation>Processes contains a collection of process descriptions. The processes may be detailed in full, or referenced from an external structure document or registry service.</xs:documentation>
        </xs:annotation>
        <xs:unique name="UniqueProcess">
          <xs:selector xpath="structure:Process"/>
          <xs:field xpath="@id"/>
          <xs:field xpath="@agencyID"/>
          <xs:field xpath="@version"/>
        </xs:unique>
      </xs:element>
      <xs:element name="Constraints" type="ConstraintsType" minOccurs="0">
        <xs:annotation>
          <xs:documentation>Constraints contains a collection of constraint descriptions. This container may contain both attachment and content constraints. The constraints may be detailed in full, or referenced from an external structure document or registry service.</xs:documentation>
        </xs:annotation>
        <xs:unique name="UniqueAttachmentConstraint">
          <xs:selector xpath="structure:AttachmentConstraint"/>
          <xs:field xpath="@id"/>
          <xs:field xpath="@agencyID"/>
          <xs:field xpath="@version"/>
        </xs:unique>
        <xs:unique name="UniqueContentConstraint">
          <xs:selector xpath="structure:ContentConstraint"/>
          <xs:field xpath="@id"/>
          <xs:field xpath="@agencyID"/>
          <xs:field xpath="@version"/>
        </xs:unique>
      </xs:element>
      <xs:element name="ProvisionAgreements" type="ProvisionAgreementsType" minOccurs="0">
        <xs:annotation>
          <xs:documentation>ProvisionAgreements contains a collection of provision agreements. The provision agreements may be detailed in full, or referenced from an external structure document or registry service.</xs:documentation>
        </xs:annotation>
        <xs:unique name="UniqueProvisionAgreement">
          <xs:selector xpath="structure:ProvisionAgreement"/>
          <xs:field xpath="@id"/>
          <xs:field xpath="@agencyID"/>
          <xs:field xpath="@version"/>
        </xs:unique>
      </xs:element>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="OrganisationSchemesType">
    <xs:annotation>
      <xs:documentation>OrganisationSchemesType describes the structure of the organisation schemes container. It contains one or more organisation scheme, which can be explicitly detailed or referenced from an external structure document or registry service.</xs:documentation>
    </xs:annotation>
    <xs:choice maxOccurs="unbounded">
      <xs:element name="AgencyScheme" type="AgencySchemeType">
        <xs:annotation>
          <xs:documentation>AgencyScheme provides the details of an agency scheme, in which agencies are described.</xs:documentation>
        </xs:annotation>
        <xs:unique name="AgencyScheme_UniqueAgency">
          <xs:selector xpath="structure:Agency"/>
          <xs:field xpath="@id"/>
        </xs:unique>
      </xs:element>
      <xs:element name="DataConsumerScheme" type="DataConsumerSchemeType">
        <xs:annotation>
          <xs:documentation>DataConsumerScheme provides the details of an data consumer scheme, in which data consumers are described.</xs:documentation>
        </xs:annotation>
        <xs:unique name="DataConsumerScheme_UniqueDataConsumer">
          <xs:selector xpath="structure:DataConsumer"/>
          <xs:field xpath="@id"/>
        </xs:unique>
      </xs:element>
      <xs:element name="DataProviderScheme" type="DataProviderSchemeType">
        <xs:annotation>
          <xs:documentation>DataProviderScheme provides the details of an data provider scheme, in which data providers are described.</xs:documentation>
        </xs:annotation>
        <xs:unique name="DataProviderScheme_UniqueDataProvider">
          <xs:selector xpath="structure:DataProvider"/>
          <xs:field xpath="@id"/>
        </xs:unique>
      </xs:element>
      <xs:element name="OrganisationUnitScheme" type="OrganisationUnitSchemeType">
        <xs:annotation>
          <xs:documentation>OrganisationUnitScheme provides the details of an organisation unit scheme, in which organisation units are described.</xs:documentation>
        </xs:annotation>
        <xs:unique name="OrganisationUnitScheme_UniqueOrganisationUnit">
          <xs:selector xpath="structure:OrganisationUnit"/>
          <xs:field xpath="@id"/>
        </xs:unique>
      </xs:element>
    </xs:choice>
  </xs:complexType>

  <xs:complexType name="DataflowsType">
    <xs:annotation>
      <xs:documentation>DataflowsType describes the structure of the data flows container. It contains one or more data flow, which can be explicitly detailed or referenced from an external structure document or registry service.</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="Dataflow" type="DataflowType" maxOccurs="unbounded">
        <xs:annotation>
          <xs:documentation>Dataflow provides the details of a data flow, which is defined as the structure of data that will be provided for different reference periods.</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="MetadataflowsType">
    <xs:annotation>
      <xs:documentation>MetadataflowsType describes the structure of the metadata flows container. It contains one or more metadata flow, which can be explicitly detailed or referenced from an external structure document or registry service.</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="Metadataflow" type="MetadataflowType" maxOccurs="unbounded">
        <xs:annotation>
          <xs:documentation>Metadataflow provides the details of a metadata flow, which is defined as the structure of reference metadata that will be provided for different reference periods</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="CategorySchemesType">
    <xs:annotation>
      <xs:documentation>CategorySchemesType describes the structure of the category schemes container. It contains one or more category scheme, which can be explicitly detailed or referenced from an external structure document or registry service.</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="CategoryScheme" type="CategorySchemeType" maxOccurs="unbounded">
        <xs:annotation>
          <xs:documentation>CategoryScheme provides the details of a category scheme, which is the descriptive information for an arrangement or division of categories into groups based on characteristics, which the objects have in common. This provides for a simple, leveled hierarchy or categories.</xs:documentation>
        </xs:annotation>
        <xs:unique name="CategoryScheme_UniqueCategory">
          <xs:selector xpath="structure:Category"/>
          <xs:field xpath="@id"/>
        </xs:unique>
      </xs:element>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="CategorisationsType">
    <xs:annotation>
      <xs:documentation>CategorisationsType describes the structure of the categorisations container. It contains one or more categorisation of a specific object type, which can be explicitly detailed or referenced from an external structure document or registry service. This container may contain categorisations for multiple types of structural objects.</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="Categorisation" type="CategorisationType" maxOccurs="unbounded">
        <xs:annotation>
          <xs:documentation>Categorisation allows for the association of an identifiable object to a category, providing for the classifications of the reference identifiable object. This must either contain the full details of the categorisation, or provide a name and identification information and reference the full details from an external structure document or registry service.</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="CodelistsType">
    <xs:annotation>
      <xs:documentation>CodelistsType describes the structure of the code lists container. It contains one or more code list, which can be explicitly detailed or referenced from an external structure document or registry service.</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="Codelist" type="CodelistType" maxOccurs="unbounded">
        <xs:annotation>
          <xs:documentation>Codelist provides the details of a code list, which is defined as a list from which some statistical concepts (coded concepts) take their values.</xs:documentation>
        </xs:annotation>
        <xs:unique name="Codelist_UniqueCode">
          <xs:selector xpath="structure:Code"/>
          <xs:field xpath="@id"/>
        </xs:unique>
      </xs:element>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="HierarchicalCodelistsType">
    <xs:annotation>
      <xs:documentation>HierarchicalCodelistsType describes the structure of the hierarchical code lists container. It contains one or more hierarchical code list, which can be explicitly detailed or referenced from an external structure document or registry service.</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="HierarchicalCodelist" type="HierarchicalCodelistType" maxOccurs="unbounded">
        <xs:annotation>
          <xs:documentation>HierarchicalCodelist provides the details of a hierarchical code list, which is defined as an organised collection of codes that may participate in many parent/child relationships with other codes in the list, as defined by one or more hierarchy of the list.</xs:documentation>
        </xs:annotation>
        <xs:unique name="HierarchicalCodelist_UniqueHierarchy">
          <xs:selector xpath="structure:Hierarchy"/>
          <xs:field xpath="@id"/>
        </xs:unique>
        <xs:unique name="HierarchicalCodelist_UniqueCodelistAlias">
          <xs:selector xpath="structure:IncludedCodelistReference"/>
          <xs:field xpath="@alias"/>
        </xs:unique>
      </xs:element>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="ConceptsType">
    <xs:annotation>
      <xs:documentation>ConceptsType describes the structure of the concepts container. It contains one or more stand-alone concept or concept scheme, which can be explicitly detailed or referenced from an external structure document or registry service. This container may contain a mix of both stand-alone concepts and concept schemes.</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="ConceptScheme" type="ConceptSchemeType" minOccurs="0" maxOccurs="unbounded">
        <xs:annotation>
          <xs:documentation>ConceptScheme provides the details of a concept scheme, which is the descriptive information for an arrangement or division of concepts into groups based on characteristics, which the objects have in common. It contains a collection of concept definitions, that may be arranged in simple hierarchies.</xs:documentation>
        </xs:annotation>
        <xs:unique name="ConceptScheme_UniqueConcept">
          <xs:selector xpath="structure:Concept"/>
          <xs:field xpath="@id"/>
        </xs:unique>
      </xs:element>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="MetadataStructuresType">
    <xs:annotation>
      <xs:documentation>MetadataStructuresType describes the structure of the metadata structure definitions container. It contains one or more metadata structure definition, which can be explicitly detailed or referenced from an external structure document or registry service.</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="MetadataStructure" type="MetadataStructureType" maxOccurs="unbounded">
        <xs:annotation>
          <xs:documentation>MetadataStructure provides the details of a metadata structure definition, which is defined as a collection of metadata concepts, their structure and usage when used to collect or disseminate reference metadata. A metadata structure definition performs several functions: it groups sets of objects into "targets" against which reference metadata may be reported. Targets define the structure of the reference metadata "keys" which identify specific types of reported metadata, and describe the valid values for populating the keys. Also, metadata structure definitions provide a presentational organization of concepts for reporting purposes. The structure of a reference metadata report is derived from this presentational structure.</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="DataStructuresType">
    <xs:annotation>
      <xs:documentation>DataStructuresType describes the structure of the data structure definitions container. It contains one or more data structure definition, which can be explicitly detailed or referenced from an external structure document or registry service.</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="DataStructure" type="DataStructureType" maxOccurs="unbounded">
        <xs:annotation>
          <xs:documentation>DataStructure provides the details of a data structure definition, which is defined as a collection of metadata concepts, their structure and usage when used to collect or disseminate data.</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="StructureSetsType">
    <xs:annotation>
      <xs:documentation>StructureSetsType describes the structure of the structure sets container. It contains one or more structure set, which can be explicitly detailed or referenced from an external structure document or registry service.</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="StructureSet" type="StructureSetType" maxOccurs="unbounded">
        <xs:annotation>
          <xs:documentation>StructureSet provides the details or a structure set, which allows components in one structure, structure usage, or item scheme to be mapped to components in another structural component of the same type.</xs:documentation>
        </xs:annotation>
        <xs:unique name="StructureSetUniqueCategorySchemeMap">
          <xs:selector xpath="structure:CategorySchemeMap"/>
          <xs:field xpath="@id"/>
        </xs:unique>
        <xs:unique name="StructureSetUniqueCodelistMap">
          <xs:selector xpath="structure:CodelistMap"/>
          <xs:field xpath="@id"/>
        </xs:unique>
        <xs:unique name="StructureSetUniqueConceptsMap">
          <xs:selector xpath="structure:ConceptsMap"/>
          <xs:field xpath="@id"/>
        </xs:unique>
        <xs:unique name="StructureSetUniqueOrganisationSchemeMap">
          <xs:selector xpath="structure:OrganisationSchemeMap"/>
          <xs:field xpath="@id"/>
        </xs:unique>
        <xs:unique name="StructureSetUniqueStructureMap">
          <xs:selector xpath="structure:StructureMap"/>
          <xs:field xpath="@id"/>
        </xs:unique>
      </xs:element>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="ReportingTaxonomiesType">
    <xs:annotation>
      <xs:documentation>ReportingTaxonomiesType describes the structure of the reporting taxonomies container. It contains one or more reporting taxonomy, which can be explicitly detailed or referenced from an external structure document or registry service.</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="ReportingTaxonomy" type="ReportingTaxonomyType" maxOccurs="unbounded">
        <xs:annotation>
          <xs:documentation>ReportingTaxonomy provides the details of a reporting taxonomy, which is a scheme which defines the composition structure of a data report where each component can be described by an independent data or metadata flow definition.</xs:documentation>
        </xs:annotation>
        <xs:unique name="ReportingTaxonomy_UniqueReportingCategory">
          <xs:selector xpath="structure:ReportingCategory"/>
          <xs:field xpath="@id"/>
        </xs:unique>
      </xs:element>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="ProcessesType">
    <xs:annotation>
      <xs:documentation>ProcessesType describes the structure of the processes container. It contains one or more process, which can be explicitly detailed or referenced from an external structure document or registry service.</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="Process" type="ProcessType" maxOccurs="unbounded">
        <xs:annotation>
          <xs:documentation>Process provides the details of a process, which is a scheme which defines or documents the operations performed on data in order to validate data or to derive new information according to a given set of rules. It is not meant to support process automation, but serves as a description of how processes occur. The primary use for this structural mechanism is the attachment of reference metadata regarding statistical processing. This must either contain the full details of the category scheme, or provide a name and identification information and reference the full details from an external structure document or registry service.</xs:documentation>
        </xs:annotation>
        <xs:unique name="Process_UniqueProcessStep">
          <xs:selector xpath="structure:ProcessStep"/>
          <xs:field xpath="@id"/>
        </xs:unique>
        <xs:unique name="Process_UniqueTransition">
          <xs:selector xpath="structure:Transition"/>
          <xs:field xpath="@id"/>
        </xs:unique>
      </xs:element>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="ConstraintsType">
    <xs:annotation>
      <xs:documentation>ConstraintsType describes the structure of the constraints container. It contains one or more constraint, which can be explicitly detailed or referenced from an external structure document or registry service. This container may contain both attachment and content constraints.</xs:documentation>
    </xs:annotation>
    <xs:choice maxOccurs="unbounded">
      <xs:element name="AttachmentConstraint" type="AttachmentConstraintType">
        <xs:annotation>
          <xs:documentation>AttachmentConstraint describes sub sets of the content of a data or metadata set in terms of the content regions or in terms of the set of key combinations to which attributes or reference metadata (as defined by structure definitions) may be attached.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="ContentConstraint" type="ContentConstraintType">
        <xs:annotation>
          <xs:documentation>ContentConstraint specifies a sub set of the definition of the allowable or available content of a data or metadata set in terms of the content or in terms of the set of key combinations.</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:choice>
  </xs:complexType>

  <xs:complexType name="ProvisionAgreementsType">
    <xs:annotation>
      <xs:documentation>ProvisionAgreementsType describes the structure of the provision agreements container. It contains one or more provision agreement, which can be explicitly detailed or referenced from an external structure document or registry service.</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="ProvisionAgreement" type="ProvisionAgreementType" maxOccurs="unbounded">
        <xs:annotation>
          <xs:documentation>ProvisionAgreement provides the details of a provision agreement, which is an agreement for a data provider to report data or reference metadata against a flow.</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>

  <xs:annotation>
    <xs:appinfo>SDMX Base Structure Module</xs:appinfo>
    <xs:documentation>The base structure module contains the descriptions of base structural metadata constructs, such as item schemes, structures, and structure usages, as well as constructs reused by multiple types of structural components.</xs:documentation>
  </xs:annotation>

  <xs:complexType name="IdentifiableType" abstract="true">
    <xs:annotation>
      <xs:documentation>IdentifiableType is an abstract base type for all identifiable objects.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="common:AnnotableType">
        <xs:attribute name="id" type="common:IDType" use="optional">
          <xs:annotation>
            <xs:documentation>The id is the identifier for the object.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="urn" type="xs:anyURI" use="optional">
          <xs:annotation>
            <xs:documentation>The urn attribute holds a valid SDMX Registry URN (see SDMX Registry Specification for details).</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="uri" type="xs:anyURI" use="optional">
          <xs:annotation>
            <xs:documentation>The uri attribute holds a URI that contains a link to a resource with additional information about the object, such as a web page. This uri is not a SDMX message.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="NameableType" abstract="true">
    <xs:annotation>
      <xs:documentation>NameableType is an abstract base type for  all nameable objects.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="IdentifiableType">
        <xs:sequence>
          <xs:element ref="common:Name" maxOccurs="unbounded">
            <xs:annotation>
              <xs:documentation>Name provides for a human-readable name for the object. This may be provided in multiple, parallel language-equivalent forms.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element ref="common:Description" minOccurs="0" maxOccurs="unbounded">
            <xs:annotation>
              <xs:documentation>Description provides for a longer human-readable description of the object. This may be provided in multiple, parallel language-equivalent forms.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="VersionableType" abstract="true">
    <xs:annotation>
      <xs:documentation>VersionableType is an abstract base type for all versionable objects.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="NameableType">
        <xs:attribute name="version" type="common:VersionType" use="optional" default="1.0">
          <xs:annotation>
            <xs:documentation>This version attribute holds a version number in the format of #[.#]+ (see common:VersionType definition for details). If not supplied, the version number is defaulted to 1.0.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="validFrom" type="xs:dateTime" use="optional">
          <xs:annotation>
            <xs:documentation>The validFrom attribute provides the inclusive start date for providing supplemental validity information about the version.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="validTo" type="xs:dateTime" use="optional">
          <xs:annotation>
            <xs:documentation>The validTo attribute provides the inclusive end date for providing supplemental validity information about the version.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="MaintainableBaseType" abstract="true">
    <xs:annotation>
      <xs:documentation>MaintainableBaseType is an abstract type that only serves the purpose of forming the base for the actual MaintainableType. The purpose of this type is to restrict the VersionableType to require the id attribute.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="VersionableType">
        <xs:sequence>
          <xs:element ref="common:Annotations" minOccurs="0"/>
          <xs:element ref="common:Name" maxOccurs="unbounded"/>
          <xs:element ref="common:Description" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
        <xs:attribute name="id" type="common:IDType" use="required"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="MaintainableType" abstract="true">
    <xs:annotation>
      <xs:documentation>MaintainableType is an abstract base type for all maintainable objects.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="MaintainableBaseType">
        <xs:attribute name="agencyID" type="common:NestedNCNameIDType" use="required">
          <xs:annotation>
            <xs:documentation>The agencyID must be provided, and identifies the maintenance agency of the object.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="isFinal" type="xs:boolean" use="optional" default="false">
          <xs:annotation>
            <xs:documentation>The isFinal attribute indicates whether the object is unchangeable without versioning. If the value is true, the object must be versioned upon change. If the final attribute is not supplied, then the object is assumed not to be final. Note that all production objects must be final.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="isExternalReference" type="xs:boolean" use="optional" default="false">
          <xs:annotation>
            <xs:documentation>The isExternalReference attribute, if true, indicates that the actual object is not defined the corresponding element, rather its full details are defined elsewhere - indicated by either the registryURL, the repositoryURL, or the structureURL. The purpose of this is so that each structure message does not have to redefine object that are already defined elsewhere. If the isExternalReference attribute is not set, then it is assumed to be false, and the object should contain the full definition of its contents. If more than one of the registryURL, the repositoryURL, and the structureURL are supplied, then the application processing the object can choose the method it finds best suited to retrieve the details of the object.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attributeGroup ref="common:ExternalReferenceAttributeGroup"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="ItemSchemeType" abstract="true">
    <xs:annotation>
      <xs:documentation>ItemSchemeType is an abstract base type for all item scheme objects. It contains a collection of items. Concrete instances of this type should restrict the actual types of items allowed within the scheme.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="MaintainableType">
        <xs:sequence>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element ref="Item"/>
          </xs:sequence>
        </xs:sequence>
        <xs:attribute name="isPartial" type="xs:boolean" use="optional" default="false">
          <xs:annotation>
            <xs:documentation>The isPartial, if true, indicates that only the relevant portion of the item scheme is being communicated. This is used in cases where a codelist is returned for a key family in the context of a constraint.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:element name="Item" type="ItemType" abstract="true">
    <xs:annotation>
      <xs:documentation>Item is an abstract element that serves as a substitution head for all items in an item scheme, including those items nested within other items. Concrete instances of this must use a concrete instance of ItemType.</xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:complexType name="ItemBaseType" abstract="true">
    <xs:annotation>
      <xs:documentation>ItemBaseType is an abstract base type that forms the basis for the ItemType. It requires that at least an id be supplied for an item.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="NameableType">
        <xs:sequence>
          <xs:element ref="common:Annotations" minOccurs="0"/>
          <xs:element ref="common:Name" maxOccurs="unbounded"/>
          <xs:element ref="common:Description" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
        <xs:attribute name="id" type="common:IDType" use="required"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="ItemType" abstract="true">
    <xs:annotation>
      <xs:documentation>ItemType is an abstract base type for all items with in an item scheme. Concrete instances of this type may or may not utilize the nested item, but if so should restrict the actual types of item allowed.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ItemBaseType">
        <xs:choice minOccurs="0">
          <xs:element name="Parent" type="common:LocalItemReferenceType"/>
          <xs:sequence maxOccurs="unbounded">
            <xs:element ref="Item"/>
          </xs:sequence>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="StructureType" abstract="true">
    <xs:annotation>
      <xs:documentation>StructureType is an abstract base type for all structure objects. Concrete instances of this should restrict to a concrete grouping.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="MaintainableType">
        <xs:sequence>
          <xs:sequence minOccurs="0">
            <xs:element ref="Grouping"/>
          </xs:sequence>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:element name="Grouping" type="GroupingType" abstract="true">
    <xs:annotation>
      <xs:documentation>Grouping is an abstract element that serves as a substitution head for all structure groupings. Groupings contain a collection of component lists for a structure. Concrete instances of this must use a concrete instance of GroupingType.</xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:complexType name="GroupingType" abstract="true">
    <xs:annotation>
      <xs:documentation>GroupType is an abstract base type for specific structure groupings. It contains a collection of component lists. Concrete instances of this should restrict to specific concrete component lists.</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:sequence minOccurs="0" maxOccurs="unbounded">
        <xs:element ref="ComponentList"/>
      </xs:sequence>
    </xs:sequence>
  </xs:complexType>

  <xs:element name="ComponentList" type="ComponentListType" abstract="true">
    <xs:annotation>
      <xs:documentation>ComponentList is an abstract element that serves as a substitution head for all component lists. Concrete instances of this must use a concrete instance of ComponentListType.</xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:complexType name="ComponentListType" abstract="true">
    <xs:annotation>
      <xs:documentation>ComponentListType is an abstract base type for all component lists. It contains a collection of components. Concrete types should restrict this to specific concrete components.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="IdentifiableType">
        <xs:sequence>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element ref="Component"/>
          </xs:sequence>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:element name="Component" type="ComponentType" abstract="true">
    <xs:annotation>
      <xs:documentation>Component is an abstract element that serves as a substitution head for all components. Concrete instances of this must use a concrete instance of ComponentType.</xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:complexType name="ComponentBaseType" abstract="true">
    <xs:annotation>
      <xs:documentation>ComponentBaseType is an abstract type that only serves the purpose of forming the base for the actual ComponentType. It only restricts the format of the id attribute to the NCNameIDType.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="IdentifiableType">
        <xs:sequence>
          <xs:element ref="common:Annotations" minOccurs="0"/>
        </xs:sequence>
        <xs:attribute name="id" type="common:NCNameIDType" use="optional">
          <xs:annotation>
            <xs:documentation>The id attribute holds an explicit identification of the component. If this identifier is not supplied, then it is assumed to be the same as the identifier of the concept referenced from the concept identity. Because structures require that every component be given a unique identifier, it may be necessary to assign an explicit identifier when more than one component in a structure reference concepts with same identifier. It is important to note that this applies strictly to the identifier of concept and not the URN. Therefore if two concepts with the same identifier from different concept schemes are referenced in the same structure, one of the components will have to provide a unique explicit identifier. The type of this identifier is restricted to the common:NCNameIDType. This is necessary, since component identifiers are used to create XML elements and attributes in data and metadata structure specific schemas and therefore must be compliant with the NCName type in XML Schema (see common:NCNameIDType for further details).</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="ComponentType" abstract="true">
    <xs:annotation>
      <xs:documentation>ComponentType is an abstract base type for all components. It contains information pertaining to a component, including an optional reference to a concept, an optional role played by the concept, an optional text format description, and an optional local representation.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ComponentBaseType">
        <xs:sequence>
          <xs:element name="ConceptIdentity" type="common:ConceptReferenceType" minOccurs="0">
            <xs:annotation>
              <xs:documentation>ConceptIdentity allows for the referencing of a concept in a concept scheme. The component takes its semantic from this concept, and if an id is not specified, it takes its identification as well. If a representation (LocalRepresentation) is not supplied, then the representation of the component is also inherited from the concept. Note that in the case of the component representation being inherited from the concept, the allowable representations for the component still apply. Therefore, if a component references a concept with a core representation that is not allowed for the concept, that representation must be locally overridden. For components which can specify a concept role, it is implied that the concept which is referenced also identifies a role for the component.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="LocalRepresentation" type="RepresentationType" minOccurs="0">
            <xs:annotation>
              <xs:documentation>LocalRepresentation references item schemes that may be used to create the representation of a component. The type of this must be refined such that a concrete item scheme reference is used.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="StructureUsageType" abstract="true">
    <xs:annotation>
      <xs:documentation>StructureUsageType is an abstract base type for all structure usages. It contains a reference to a structure. Concrete instances of this type should restrict the type of structure referenced.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="MaintainableType">
        <xs:sequence>
          <xs:element name="Structure" type="common:StructureReferenceBaseType" minOccurs="0">
            <xs:annotation>
              <xs:documentation>Structure references the structure (data structure or metadata structure definition) which the structure usage is based upon. Implementations will have to refine the type to use a concrete structure reference (i.e. either a data structure or metadata structure definition reference).</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:simpleType name="UsageStatusType">
    <xs:annotation>
      <xs:documentation>UsageStatusType provides a list of enumerated types for indicating whether reporting a given attribute is mandatory or conditional.</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:NMTOKEN">
      <xs:enumeration value="Mandatory">
        <xs:annotation>
          <xs:documentation>Reporting the associated attribute is mandatory - a value must be supplied.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="Conditional">
        <xs:annotation>
          <xs:documentation>Reporting the associated attribute is not mandatory - a value may  be supplied, but is not required.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>

  <xs:complexType name="RepresentationType" abstract="true">
    <xs:annotation>
      <xs:documentation>RepresentationType is an abstract type that defines a representation. Because the type of item schemes that are allowed as the an enumeration vary based on the object in which this is defined, this type is abstract to force that the enumeration reference be restricted to the proper type of item scheme reference.</xs:documentation>
    </xs:annotation>
    <xs:choice>
      <xs:element name="TextFormat" type="TextFormatType">
        <xs:annotation>
          <xs:documentation>TextFormat describes an uncoded textual format.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:sequence>
        <xs:element name="Enumeration" type="common:ItemSchemeReferenceBaseType">
          <xs:annotation>
            <xs:documentation>Enumeration references an item scheme that enumerates the allowable values for this representation.</xs:documentation>
          </xs:annotation>
        </xs:element>
        <xs:element name="EnumerationFormat" type="CodededTextFormatType" minOccurs="0">
          <xs:annotation>
            <xs:documentation>EnumerationFormat describes the facets of the item scheme enumeration. This is for the most part, informational.</xs:documentation>
          </xs:annotation>
        </xs:element>
      </xs:sequence>
    </xs:choice>
  </xs:complexType>

  <xs:complexType name="TextFormatType">
    <xs:annotation>
      <xs:documentation>TextFormatType defines the information for describing a full range of text formats and may place restrictions on the values of the other attributes, referred to as "facets".</xs:documentation>
    </xs:annotation>
    <xs:attribute name="textType" type="common:DataType" default="String">
      <xs:annotation>
        <xs:documentation>The textType attribute provides a description of the datatype. If it is not specified, any valid characters may be included in the text field (it corresponds to the xs:string datatype of W3C XML Schema) within the constraints of the facets.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="isSequence" type="xs:boolean" use="optional">
      <xs:annotation>
        <xs:documentation>The isSequence attribute indicates whether the values are intended to be ordered, and it may work in combination with the interval, startValue, and endValue attributes or the timeInterval, startTime, and endTime, attributes. If this attribute holds a value of true, a start value or time and a numeric or time interval must supplied. If an end value is not given, then the sequence continues indefinitely.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="interval" type="xs:decimal" use="optional">
      <xs:annotation>
        <xs:documentation>The interval attribute specifies the permitted interval (increment) in a sequence. In order for this to be used, the isSequence attribute must have a value of true.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="startValue" type="xs:decimal" use="optional">
      <xs:annotation>
        <xs:documentation>The startValue attribute is used in conjunction with the isSequence and interval attributes (which must be set in order to use this attribute). This attribute is used for a numeric sequence, and indicates the starting  point of the sequence. This value is mandatory for a numeric sequence to be expressed.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="endValue" type="xs:decimal" use="optional">
      <xs:annotation>
        <xs:documentation>The endValue attribute is used in conjunction with the isSequence and interval attributes (which must be set in order to use this attribute). This attribute is used for a numeric sequence, and indicates that ending point (if any) of the sequence.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="timeInterval" type="xs:duration" use="optional">
      <xs:annotation>
        <xs:documentation>The timeInterval attribute indicates the permitted duration in a time sequence. In order for this to be used, the isSequence attribute must have a value of true.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="startTime" type="common:StandardTimePeriodType" use="optional">
      <xs:annotation>
        <xs:documentation>The startTime attribute is used in conjunction with the isSequence and timeInterval attributes (which must be set in order to use this attribute). This attribute is used for a time sequence, and indicates the start time of the sequence. This value is mandatory for a time sequence to be expressed.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="endTime" type="common:StandardTimePeriodType" use="optional">
      <xs:annotation>
        <xs:documentation>The endTime attribute is used in conjunction with the isSequence and timeInterval attributes (which must be set in order to use this attribute). This attribute is used for a time sequence, and indicates that ending point (if any) of the sequence.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="minLength" type="xs:positiveInteger" use="optional">
      <xs:annotation>
        <xs:documentation>The minLength attribute specifies the minimum and length of the value in characters.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="maxLength" type="xs:positiveInteger" use="optional">
      <xs:annotation>
        <xs:documentation>The maxLength attribute specifies the maximum length of the value in characters.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="minValue" type="xs:decimal" use="optional">
      <xs:annotation>
        <xs:documentation>The minValue attribute is used for inclusive and exclusive ranges, indicating what the lower bound of the range is. If this is used with an inclusive range, a valid value will be greater than or equal to the value specified here. If the inclusive and exclusive data type is not specified (e.g. this facet is used with an integer data type), the value is assumed to be inclusive.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="maxValue" type="xs:decimal" use="optional">
      <xs:annotation>
        <xs:documentation>The maxValue attribute is used for inclusive and exclusive ranges, indicating what the upper bound of the range is. If this is used with an inclusive range, a valid value will be less than or equal to the value specified here. If the inclusive and exclusive data type is not specified (e.g. this facet is used with an integer data type), the value is assumed to be inclusive.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="decimals" type="xs:positiveInteger" use="optional">
      <xs:annotation>
        <xs:documentation>The decimals attribute indicates the number of characters allowed after the decimal separator.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="pattern" type="xs:string" use="optional">
      <xs:annotation>
        <xs:documentation>The pattern attribute holds any regular expression permitted in the similar facet in W3C XML Schema.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="isMultiLingual" type="xs:boolean" use="optional" default="true">
      <xs:annotation>
        <xs:documentation>The isMultiLingual attribute indicates for a text format of type "string", whether the value should allow for multiple values in different languages.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>

  <xs:complexType name="BasicComponentTextFormatType">
    <xs:annotation>
      <xs:documentation>BasicComponentTextFormatType is a restricted version of the TextFormatType that restricts the text type to the representations allowed for all components except for target objects.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="TextFormatType">
        <xs:attribute name="textType" type="common:BasicComponentDataType" use="optional" default="String"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="SimpleComponentTextFormatType">
    <xs:annotation>
      <xs:documentation>SimpleComponentTextFormatType is a restricted version of the BasicComponentTextFormatType that does not allow for multi-lingual values.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="BasicComponentTextFormatType">
        <xs:attribute name="textType" type="common:SimpleDataType" use="optional" default="String"/>
        <xs:attribute name="isMultiLingual" type="xs:boolean" use="prohibited"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="CodededTextFormatType">
    <xs:annotation>
      <xs:documentation>CodededTextFormatType is a restricted version of the SimpleComponentTextFormatType that only allows factets and text types applicable to codes. Although the time facets permit any value, an actual code identifier does not support the necessary characters for time. Therefore these facets should not contain time in their values.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="SimpleComponentTextFormatType">
        <xs:attribute name="textType" type="CodeDataType" use="optional"/>
        <xs:attribute name="isSequence" type="xs:boolean" use="optional"/>
        <xs:attribute name="interval" type="xs:integer" use="optional"/>
        <xs:attribute name="startValue" type="xs:integer" use="optional"/>
        <xs:attribute name="endValue" type="xs:integer" use="optional"/>
        <xs:attribute name="timeInterval" type="xs:duration" use="optional"/>
        <xs:attribute name="startTime" type="common:StandardTimePeriodType" use="optional"/>
        <xs:attribute name="endTime" type="common:StandardTimePeriodType" use="optional"/>
        <xs:attribute name="minLength" type="xs:positiveInteger" use="optional"/>
        <xs:attribute name="maxLength" type="xs:positiveInteger" use="optional"/>
        <xs:attribute name="minValue" type="xs:integer" use="optional"/>
        <xs:attribute name="maxValue" type="xs:integer" use="optional"/>
        <xs:attribute name="decimals" type="xs:positiveInteger" use="prohibited"/>
        <xs:attribute name="pattern" type="xs:string" use="optional"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:simpleType name="CodeDataType">
    <xs:annotation>
      <xs:documentation>CodeDataType is a restriction of the basic data types that are applicable to codes. Although some of the higher level time period formats are perimitted, it should be noted that any value which contains time (which includes a time zone offset) is not allowable as a code identifier.</xs:documentation>
    </xs:annotation>
    <xs:restriction base="common:SimpleDataType">
      <xs:enumeration value="String"/>
      <xs:enumeration value="Alpha"/>
      <xs:enumeration value="AlphaNumeric"/>
      <xs:enumeration value="Numeric"/>
      <xs:enumeration value="BigInteger"/>
      <xs:enumeration value="Integer"/>
      <xs:enumeration value="Long"/>
      <xs:enumeration value="Short"/>
      <xs:enumeration value="Boolean"/>
      <xs:enumeration value="URI"/>
      <xs:enumeration value="Count"/>
      <xs:enumeration value="InclusiveValueRange"/>
      <xs:enumeration value="ExclusiveValueRange"/>
      <xs:enumeration value="Incremental"/>
      <xs:enumeration value="ObservationalTimePeriod"/>
      <xs:enumeration value="StandardTimePeriod"/>
      <xs:enumeration value="BasicTimePeriod"/>
      <xs:enumeration value="GregorianTimePeriod"/>
      <xs:enumeration value="GregorianYear"/>
      <xs:enumeration value="GregorianYearMonth"/>
      <xs:enumeration value="GregorianDay"/>
      <xs:enumeration value="ReportingTimePeriod"/>
      <xs:enumeration value="ReportingYear"/>
      <xs:enumeration value="ReportingSemester"/>
      <xs:enumeration value="ReportingTrimester"/>
      <xs:enumeration value="ReportingQuarter"/>
      <xs:enumeration value="ReportingMonth"/>
      <xs:enumeration value="ReportingWeek"/>
      <xs:enumeration value="ReportingDay"/>
      <xs:enumeration value="Month"/>
      <xs:enumeration value="MonthDay"/>
      <xs:enumeration value="Day"/>
      <xs:enumeration value="Duration"/>
    </xs:restriction>
  </xs:simpleType>

  <xs:complexType name="NonFacetedTextFormatType">
    <xs:annotation>
      <xs:documentation>NonFacetedTextFormatType is a restricted version of the SimpleComponentTextFormatType that does not allow for any facets.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="SimpleComponentTextFormatType">
        <xs:attribute name="textType" type="common:SimpleDataType" use="optional"/>
        <xs:attribute name="isSequence" type="xs:boolean" use="prohibited"/>
        <xs:attribute name="interval" type="xs:decimal" use="prohibited"/>
        <xs:attribute name="startValue" type="xs:decimal" use="prohibited"/>
        <xs:attribute name="endValue" type="xs:decimal" use="prohibited"/>
        <xs:attribute name="timeInterval" type="xs:duration" use="prohibited"/>
        <xs:attribute name="startTime" type="common:BasicTimePeriodType" use="prohibited"/>
        <xs:attribute name="endTime" type="common:BasicTimePeriodType" use="prohibited"/>
        <xs:attribute name="minLength" type="xs:positiveInteger" use="prohibited"/>
        <xs:attribute name="maxLength" type="xs:positiveInteger" use="prohibited"/>
        <xs:attribute name="minValue" type="xs:decimal" use="prohibited"/>
        <xs:attribute name="maxValue" type="xs:decimal" use="prohibited"/>
        <xs:attribute name="decimals" type="xs:positiveInteger" use="prohibited"/>
        <xs:attribute name="pattern" type="xs:string" use="prohibited"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="TimeTextFormatType">
    <xs:annotation>
      <xs:documentation>TimeTextFormat is a restricted version of the SimpleComponentTextFormatType that only allows time based format and specifies a default ObservationalTimePeriod representation and facets of a start and end time.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="SimpleComponentTextFormatType">
        <xs:attribute name="textType" type="common:TimeDataType" default="ObservationalTimePeriod"/>
        <xs:attribute name="startTime" type="common:StandardTimePeriodType" use="optional"/>
        <xs:attribute name="endTime" type="common:StandardTimePeriodType" use="optional"/>
        <xs:attribute name="isSequence" type="xs:boolean" use="prohibited"/>
        <xs:attribute name="interval" type="xs:decimal" use="prohibited"/>
        <xs:attribute name="startValue" type="xs:decimal" use="prohibited"/>
        <xs:attribute name="endValue" type="xs:decimal" use="prohibited"/>
        <xs:attribute name="timeInterval" type="xs:duration" use="prohibited"/>
        <xs:attribute name="minLength" type="xs:positiveInteger" use="prohibited"/>
        <xs:attribute name="maxLength" type="xs:positiveInteger" use="prohibited"/>
        <xs:attribute name="minValue" type="xs:decimal" use="prohibited"/>
        <xs:attribute name="maxValue" type="xs:decimal" use="prohibited"/>
        <xs:attribute name="decimals" type="xs:positiveInteger" use="prohibited"/>
        <xs:attribute name="pattern" type="xs:string" use="prohibited"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:annotation>
    <xs:appinfo>SDMX Categorisation Structure Module</xs:appinfo>
    <xs:documentation>The categorisation structure module defines the structure categorisation constructs.</xs:documentation>
  </xs:annotation>

  <xs:complexType name="CategorisationType">
    <xs:annotation>
      <xs:documentation>CategorisationType is defines the structure for a categorisation. A source object is referenced via an object reference and the target category is referenced via the target category.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="MaintainableType">
        <xs:sequence minOccurs="0">
          <xs:element name="Source" type="common:ObjectReferenceType">
            <xs:annotation>
              <xs:documentation>Source is a reference to an object to be categorized.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="Target" type="common:CategoryReferenceType">
            <xs:annotation>
              <xs:documentation>Target is reference to the category that the referenced object is to be mapped to.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:annotation>
    <xs:appinfo>SDMX Category Structure Module</xs:appinfo>
    <xs:documentation>The category structure module defines the structure of category scheme and category constructs.</xs:documentation>
  </xs:annotation>

  <xs:complexType name="CategorySchemeType">
    <xs:annotation>
      <xs:documentation>CategorySchemeType describes the structure of a category scheme. A category scheme is the descriptive information for an arrangement or division of categories into groups based on characteristics, which the objects have in common. This provides for a simple, leveled hierarchy or categories.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="ItemSchemeType">
        <xs:sequence>
          <xs:element ref="common:Annotations" minOccurs="0"/>
          <xs:element ref="common:Name" maxOccurs="unbounded"/>
          <xs:element ref="common:Description" minOccurs="0" maxOccurs="unbounded"/>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element ref="Category"/>
          </xs:sequence>
        </xs:sequence>
        <xs:attribute name="id" type="common:NCNameIDType" use="required">
          <xs:annotation>
            <xs:documentation>The id attribute holds the identification of the category scheme. The type of this id is restricted to the common:NCNNameIDType. This is necessary, since the category scheme may be used to create simple types in data and metadata structure specific schemas and therefore must be compliant with the NCName type in XML Schema (see common:NCNameIDType for further details).</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:element name="Category" type="CategoryType" substitutionGroup="Item">
    <xs:annotation>
      <xs:documentation>Category represents a set of nested categories which describe a simple classification hierarchy.</xs:documentation>
    </xs:annotation>
    <xs:unique name="Category_UniqueCategory">
      <xs:selector xpath="structure:Category"/>
      <xs:field xpath="@id"/>
    </xs:unique>
  </xs:element>

  <xs:complexType name="CategoryType">
    <xs:annotation>
      <xs:documentation>CategoryType describes the details of a category. A category is defined as an item at any level in a classification. The Category element represents a set of nested categories which are child categories.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="ItemType">
        <xs:sequence>
          <xs:element ref="common:Annotations" minOccurs="0"/>
          <xs:element ref="common:Name" maxOccurs="unbounded"/>
          <xs:element ref="common:Description" minOccurs="0" maxOccurs="unbounded"/>
          <xs:choice minOccurs="0">
            <xs:sequence maxOccurs="unbounded">
              <xs:element ref="Category"/>
            </xs:sequence>
          </xs:choice>
        </xs:sequence>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:annotation>
    <xs:appinfo>SDMX Code List Structure Module</xs:appinfo>
    <xs:documentation>The code list structure module defines the structure of code list and code constructs.</xs:documentation>
  </xs:annotation>

  <xs:complexType name="CodelistType">
    <xs:annotation>
      <xs:documentation>CodelistType defines the structure of a codelist. A codelist is defined as a list from which some statistical concepts (coded concepts) take their values.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="ItemSchemeType">
        <xs:sequence>
          <xs:element ref="common:Annotations" minOccurs="0"/>
          <xs:element ref="common:Name" maxOccurs="unbounded"/>
          <xs:element ref="common:Description" minOccurs="0" maxOccurs="unbounded"/>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element ref="Code"/>
          </xs:sequence>
        </xs:sequence>
        <xs:attribute name="id" type="common:NCNameIDType" use="required">
          <xs:annotation>
            <xs:documentation>The id attribute holds the identification of the code list. The type of this id is restricted to the common:NCNNameIDType. This is necessary, since the code list may be used to create simple types in data and metadata structure specific schemas and therefore must be compliant with the NCName type in XML Schema (see common:NCNameIDType for further details).</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:element name="Code" type="CodeType" substitutionGroup="Item">
    <xs:annotation>
      <xs:documentation>Code describes a code in a codelist. In addition to the identification and description of the code, basic presentational information is also available. Presentational information not present may be added through the use of annotations.</xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:complexType name="CodeType">
    <xs:annotation>
      <xs:documentation>CodeType describes the structure of a code. A code is defined as a language independent set of letters, numbers or symbols that represent a concept whose meaning is described in a natural language. Presentational information not present may be added through the use of annotations.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="ItemType">
        <xs:sequence>
          <xs:element ref="common:Annotations" minOccurs="0"/>
          <xs:element ref="common:Name" maxOccurs="unbounded">
            <xs:annotation>
              <xs:documentation>Name provides for a human-readable name for the object. This may be provided in multiple, parallel language-equivalent forms. It may be used in place of a short description.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element ref="common:Description" minOccurs="0" maxOccurs="unbounded">
            <xs:annotation>
              <xs:documentation>Description provides a plain text, human-readable description of the code. This may be provided in multiple, parallel language-equivalent forms.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:choice minOccurs="0">
            <xs:element name="Parent" type="common:LocalCodeReferenceType">
              <xs:annotation>
                <xs:documentation>Parent provides the ability to describe simple hierarchies within a single codelist, by referencing the id value of another code in the same codelist.</xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:choice>
        </xs:sequence>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:annotation>
    <xs:appinfo>SDMX Concept Structure Module</xs:appinfo>
    <xs:documentation>The concept structure module defines the structure of concept scheme, concept, and stand-alone concept constructs.</xs:documentation>
  </xs:annotation>

  <xs:complexType name="ConceptSchemeType">
    <xs:annotation>
      <xs:documentation>onceptSchemeType describes the structure of a concept scheme. A concept scheme is the descriptive information for an arrangement or division of concepts into groups based on characteristics, which the objects have in common. It contains a collection of concept definitions, that may be arranged in simple hierarchies.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="ItemSchemeType">
        <xs:sequence>
          <xs:element ref="common:Annotations" minOccurs="0"/>
          <xs:element ref="common:Name" maxOccurs="unbounded"/>
          <xs:element ref="common:Description" minOccurs="0" maxOccurs="unbounded"/>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element ref="Concept"/>
          </xs:sequence>
        </xs:sequence>
        <xs:attribute name="id" type="common:NCNameIDType" use="required">
          <xs:annotation>
            <xs:documentation>The id attribute holds the identification of the concept scheme. The type of this id is restricted to the common:NCNNameIDType. This is necessary, since the concept scheme may be used to create simple types in data and metadata structure specific schemas and therefore must be compliant with the NCName type in XML Schema (see common:NCNameIDType for further details).</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:element name="Concept" type="ConceptType" substitutionGroup="Item">
    <xs:annotation>
      <xs:documentation>Concept describes the details of a concept within a concept scheme.</xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:complexType name="ConceptBaseType" abstract="true">
    <xs:annotation>
      <xs:documentation>ConceptBaseType is an abstract base type the forms the basis of the ConceptType by requiring a name and id, and restricting the content of the id.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="ItemType">
        <xs:sequence>
          <xs:element ref="common:Annotations" minOccurs="0"/>
          <xs:element ref="common:Name" maxOccurs="unbounded"/>
          <xs:element ref="common:Description" minOccurs="0" maxOccurs="unbounded"/>
          <xs:choice minOccurs="0">
            <xs:element name="Parent" type="common:LocalConceptReferenceType">
              <xs:annotation>
                <xs:documentation>Parent captures the semantic relationships between concepts which occur within a single concept scheme. This identifies the concept of which the current concept is a qualification (in the ISO 11179 sense) or subclass.</xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:choice>
        </xs:sequence>
        <xs:attribute name="id" type="common:NCNameIDType" use="required">
          <xs:annotation>
            <xs:documentation>The id attribute holds the identification of the concept. The type of this id is restricted to the common:NCNNameIDType. This is necessary, since concept id may be used to create XML elements and attributes in data and metadata structure specific schemas and therefore must be compliant with the NCName type in XML Schema (see common:NCNameIDType for further details).</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="ConceptType">
    <xs:annotation>
      <xs:documentation>ConceptType describes the details of a concept. A concept is defined as a unit of knowledge created by a unique combination of characteristics. If a concept does not specify a TextFormat or a core representation, then the representation of the concept is assumed to be represented by any set of valid characters (corresponding to the xs:string datatype of W3C XML Schema).</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ConceptBaseType">
        <xs:sequence>
          <xs:element name="CoreRepresentation" type="ConceptRepresentation" minOccurs="0">
            <xs:annotation>
              <xs:documentation></xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="ISOConceptReference" type="ISOConceptReferenceType" minOccurs="0">
            <xs:annotation>
              <xs:documentation>Provides a reference to an ISO 11179 concept.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="ConceptRepresentation">
    <xs:annotation>
      <xs:documentation>ConceptRepresentation defines the core representation that are allowed for a concept. The text format allowed for a concept is that which is allowed for any non-target object component.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="RepresentationType">
        <xs:choice>
          <xs:element name="TextFormat" type="BasicComponentTextFormatType"/>
          <xs:sequence>
            <xs:element name="Enumeration" type="common:CodelistReferenceType">
              <xs:annotation>
                <xs:documentation>Enumeration references a codelist which enumerates the possible values that can be used as the representation of this concept.</xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="EnumerationFormat" type="CodededTextFormatType" minOccurs="0"/>
          </xs:sequence>
        </xs:choice>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="ISOConceptReferenceType">
    <xs:annotation>
      <xs:documentation>ISOConceptReferenceType provides a reference to and ISO 11179 concept.</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="ConceptAgency" type="xs:string"/>
      <xs:element name="ConceptSchemeID" type="xs:string"/>
      <xs:element name="ConceptID" type="xs:string"/>
    </xs:sequence>
  </xs:complexType>

  <xs:annotation>
    <xs:appinfo>SDMX Constraint Structure Module</xs:appinfo>
    <xs:documentation>The constraint structure module defines the structure of attachment and content constraint constructs.</xs:documentation>
  </xs:annotation>

  <xs:complexType name="ConstraintBaseType" abstract="true">
    <xs:annotation>
      <xs:documentation>ConstraintBaseType is an abstract base type that forms the basis of the main abstract ConstraintType. It requires that a name be provided.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="MaintainableType">
        <xs:sequence>
          <xs:element ref="common:Annotations" minOccurs="0"/>
          <xs:element ref="common:Name" maxOccurs="unbounded"/>
          <xs:element ref="common:Description" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="ConstraintType" abstract="true">
    <xs:annotation>
      <xs:documentation>ConstraintType is an abstract base type that specific types of constraints (content and attachment) restrict and extend to describe their details. The inclusion of a key or region in a constraint is determined by first processing the included key sets, and then removing those keys defined in the excluded key sets. If no included key sets are defined, then it is assumed the all possible keys or regions are included, and any excluded key or regions are removed from this complete set.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ConstraintBaseType">
        <xs:sequence>
          <xs:element name="ConstraintAttachment" type="ConstraintAttachmentType" minOccurs="0">
            <xs:annotation>
              <xs:documentation>ConstraintAttachment describes the collection of constrainable artefacts that the constraint is attached to.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:choice minOccurs="0" maxOccurs="unbounded">
            <xs:element name="DataKeySet" type="DataKeySetType">
              <xs:annotation>
                <xs:documentation></xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="MetadataKeySet" type="MetadataKeySetType">
              <xs:annotation>
                <xs:documentation></xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="CubeRegion" type="common:CubeRegionType">
              <xs:annotation>
                <xs:documentation></xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="MetadataTargetRegion" type="common:MetadataTargetRegionType">
              <xs:annotation>
                <xs:documentation></xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:choice>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="AttachmentConstraintType">
    <xs:annotation>
      <xs:documentation>AttachmentConstraintType describes the details of an attachment constraint by defining the data or metadata key sets or component regions that attributes or reference metadata may be attached in the constraint attachment objects.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="ConstraintType">
        <xs:sequence>
          <xs:element ref="common:Annotations" minOccurs="0"/>
          <xs:element ref="common:Name" maxOccurs="unbounded"/>
          <xs:element ref="common:Description" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element name="ConstraintAttachment" type="AttachmentConstraintAttachmentType" minOccurs="0"/>
          <xs:choice minOccurs="0" maxOccurs="unbounded">
            <xs:element name="DataKeySet" type="DataKeySetType"/>
            <xs:element name="MetadataKeySet" type="MetadataKeySetType"/>
          </xs:choice>
        </xs:sequence>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="ContentConstraintBaseType" abstract="true">
    <xs:annotation>
      <xs:documentation>ContentConstraintBaseType is an abstract base type that forms the basis for the ContentConstraintType.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="ConstraintType">
        <xs:sequence>
          <xs:element ref="common:Annotations" minOccurs="0"/>
          <xs:element ref="common:Name" maxOccurs="unbounded"/>
          <xs:element ref="common:Description" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element name="ConstraintAttachment" type="ContentConstraintAttachmentType" minOccurs="0">
            <xs:annotation>
              <xs:documentation>ConstraintAttachment describes the collection of constrainable artefacts that the constraint is attached to.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:choice minOccurs="0" maxOccurs="unbounded">
            <xs:element name="DataKeySet" type="DataKeySetType">
              <xs:annotation>
                <xs:documentation>DataKeySet defines a collection of full or partial data keys.</xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="MetadataKeySet" type="MetadataKeySetType">
              <xs:annotation>
                <xs:documentation>MetadataKeySet defines a collection of metadata keys.</xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="CubeRegion" type="common:CubeRegionType">
              <xs:annotation>
                <xs:documentation>CubeRegion describes a set of dimension values which define a region and attributes which relate to the region for the purpose of describing a constraint.</xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="MetadataTargetRegion" type="common:MetadataTargetRegionType">
              <xs:annotation>
                <xs:documentation>MetadataTargetRegion describes a set of target object values for a given report structure which define a region, and the metadata attribute which relate to the target for the purpose of describing a constraint.</xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:choice>
        </xs:sequence>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="ContentConstraintType">
    <xs:annotation>
      <xs:documentation>ContentConstraintType describes the details of a content constraint by defining the content regions, key sets, or release information for the constraint attachment objects. Note that if the constraint is for a data provider, then only release calendar information is relevant, as there is no reliable way of determining which key family is being used to frame constraints in terms of cube regions or key sets.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ContentConstraintBaseType">
        <xs:sequence>
          <xs:element name="ReleaseCalendar" type="ReleaseCalendarType" minOccurs="0">
            <xs:annotation>
              <xs:documentation>ReleaseCalendar defines dates on which the constrained data is to be made available.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="ReferencePeriod" type="common:ReferencePeriodType" minOccurs="0">
            <xs:annotation>
              <xs:documentation>ReferencePeriod is used to report start date and end date constraints.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
        <xs:attribute name="type" type="common:ContentConstraintTypeCodeType" use="optional" default="Actual">
          <xs:annotation>
            <xs:documentation>The type attribute indicates whether this constraint states what data is actually present for the constraint attachment, or if it defines what content is allowed. The default value is "Actual", meaning the data actually present for the constraint attachment.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="ReleaseCalendarType">
    <xs:annotation>
      <xs:documentation>ReleaseCalendarType describes information about the timing of releases of the constrained data. All of these values use the standard "P7D" - style format.</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="Periodicity" type="xs:string">
        <xs:annotation>
          <xs:documentation>Periodicity is the period between releases of the data set.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="Offset" type="xs:string">
        <xs:annotation>
          <xs:documentation>Offset is the interval between January first and the first release of data within the year.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="Tolerance" type="xs:string">
        <xs:annotation>
          <xs:documentation>Tolerance is the period after which the release of data may be deemed late.</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="KeySetType" abstract="true">
    <xs:annotation>
      <xs:documentation>KeySetType is an abstract base type for defining a collection of keys.</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="Key" type="common:DistinctKeyType" maxOccurs="unbounded">
        <xs:annotation>
          <xs:documentation>Key contains a data or metadata key, which are sets of component values which identify the data or metadata.</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
    <xs:attribute name="isIncluded" type="xs:boolean" use="required">
      <xs:annotation>
        <xs:documentation>The isIncluded attribute indicates whether the keys defined in this key set are inclusive or exclusive to the constraint.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>

  <xs:complexType name="DataKeySetType">
    <xs:annotation>
      <xs:documentation>DataKeySetType defines a collection of full or partial data keys (dimension values).</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="KeySetType">
        <xs:sequence>
          <xs:element name="Key" type="common:DataKeyType" maxOccurs="unbounded">
            <xs:annotation>
              <xs:documentation>Key contains a set of dimension values which identify a full set of data.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="MetadataKeySetType">
    <xs:annotation>
      <xs:documentation>MetadataKeySetType defines a collection of metadata keys (identifier component values).</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="KeySetType">
        <xs:sequence>
          <xs:element name="Key" type="common:MetadataKeyType" maxOccurs="unbounded">
            <xs:annotation>
              <xs:documentation>Key contains a set of target object values for a specified report structure which serve to identify which object reference metadata conforming to the specified report structure is available for.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="ConstraintAttachmentType" abstract="true">
    <xs:annotation>
      <xs:documentation>ConstraintAttachmentType describes a collection of references to constrainable artefacts.</xs:documentation>
    </xs:annotation>
    <xs:choice>
      <xs:element name="DataProvider" type="common:DataProviderReferenceType">
        <xs:annotation>
          <xs:documentation>DataProvider is reference to a data provider to which the constraint is attached. If this is used, then only the release calendar is relevant. The referenced is provided as a URN and/or a full set of reference fields.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="DataSet" type="common:SetReferenceType" maxOccurs="unbounded">
        <xs:annotation>
          <xs:documentation>DataSet is reference to a data set to which the constraint is attached. The referenced is provided as a URN and/or a full set of reference fields.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="MetadataSet" type="common:SetReferenceType" maxOccurs="unbounded">
        <xs:annotation>
          <xs:documentation>MetadataSet is reference to a metadata set to which the constraint is attached. The referenced is provided as a URN and/or a full set of reference fields.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="SimpleDataSource" type="xs:anyURI" maxOccurs="unbounded">
        <xs:annotation>
          <xs:documentation>SimpleDataSource describes a simple data source, which is a URL of a SDMX-ML data or metadata message.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:choice>
        <xs:sequence>
          <xs:element name="DataStructure" type="common:DataStructureReferenceType" maxOccurs="unbounded">
            <xs:annotation>
              <xs:documentation>DataStructure is reference to a data structure definition to which the constraint is attached. The referenced is provided as a URN and/or a full set of reference fields. A constraint which is attached to more than one data structure must only express key sets and/or cube regions where the identifiers of the dimensions are common across all structures to which the constraint is attached.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="QueryableDataSource" type="common:QueryableDataSourceType" minOccurs="0" maxOccurs="unbounded">
            <xs:annotation>
              <xs:documentation>QueryableDataSource describes a queryable data source to which the constraint is attached.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
        <xs:sequence>
          <xs:element name="MetadataStructure" type="common:MetadataStructureReferenceType" maxOccurs="unbounded">
            <xs:annotation>
              <xs:documentation>MetadataStructure is reference to a metadata structure definition to which the constraint is attached. The referenced is provided as a URN and/or a full set of reference fields. A constraint which is attached to more than one metadata structure must only express key sets and/or target regions where the identifiers of the target objects are common across all structures to which the constraint is attached.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="QueryableDataSource" type="common:QueryableDataSourceType" minOccurs="0" maxOccurs="unbounded">
            <xs:annotation>
              <xs:documentation>QueryableDataSource describes a queryable data source to which the constraint is attached.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
        <xs:sequence>
          <xs:element name="Dataflow" type="common:DataflowReferenceType" maxOccurs="unbounded">
            <xs:annotation>
              <xs:documentation>Dataflow is reference to a data flow to which the constraint is attached. The referenced is provided as a URN and/or a full set of reference fields. A constraint can be attached to more than one dataflow, and the dataflows do not necessarily have to be usages of the same data structure. However, a constraint which is attached to more than one data structure must only express key sets and/or cube regions where the identifiers of the dimensions are common across all structures to which the constraint is attached.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="QueryableDataSource" type="common:QueryableDataSourceType" minOccurs="0" maxOccurs="unbounded">
            <xs:annotation>
              <xs:documentation>QueryableDataSource describes a queryable data source to which the constraint is attached.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
        <xs:sequence>
          <xs:element name="Metadataflow" type="common:MetadataflowReferenceType" maxOccurs="unbounded">
            <xs:annotation>
              <xs:documentation>Metadataflow is reference to a metadata flow to which the constraint is attached. The referenced is provided as a URN and/or a full set of reference fields. A constraint can be attached to more than one metadataflow, and the metadataflows do not necessarily have to be usages of the same metadata structure. However, a constraint which is attached to more than one metadata structure must only express key sets and/or target regions where the identifiers of the target objects are common across all structures to which the constraint is attached.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="QueryableDataSource" type="common:QueryableDataSourceType" minOccurs="0" maxOccurs="unbounded">
            <xs:annotation>
              <xs:documentation>QueryableDataSource describes a queryable data source to which the constraint is attached.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
        <xs:sequence>
          <xs:element name="ProvisionAgreement" type="common:ProvisionAgreementReferenceType" maxOccurs="unbounded">
            <xs:annotation>
              <xs:documentation>ProvisionAgreementReference is reference to a provision agreement to which the constraint is attached. The referenced is provided as a URN and/or a full set of reference fields. A constraint can be attached to more than one provision aggreement, and the provision agreements do not necessarily have to be references structure usages based on the same structure. However, a constraint which is attached to more than one provision agreement must only express key sets and/or cube/target regions where the identifier of the components are common across all structures to which the constraint is attached.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="QueryableDataSource" type="common:QueryableDataSourceType" minOccurs="0" maxOccurs="unbounded">
            <xs:annotation>
              <xs:documentation>QueryableDataSource describes a queryable data source to which the constraint is attached.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:choice>
    </xs:choice>
  </xs:complexType>

  <xs:complexType name="AttachmentConstraintAttachmentType">
    <xs:annotation>
      <xs:documentation>AttachmentConstraintAttachmentType defines the structure for specifying the object to which an attachment constraints applies.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="ConstraintAttachmentType">
        <xs:choice>
          <xs:element name="DataSet" type="common:SetReferenceType" maxOccurs="unbounded">
            <xs:annotation>
              <xs:documentation>DataSet is reference to a data set to which the constraint is attached. The referenced is provided as a URN and/or a full set of reference fields. Multiple instance can only be used if they have the same underlying structure.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="MetadataSet" type="common:SetReferenceType" maxOccurs="unbounded">
            <xs:annotation>
              <xs:documentation>MetadataSet is reference to a metadata set to which the constraint is attached. The referenced is provided as a URN and/or a full set of reference fields. Multiple instance can only be used if they have the same underlying structure.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="SimpleDataSource" type="xs:anyURI" maxOccurs="unbounded">
            <xs:annotation>
              <xs:documentation>SimpleDataSource describes a simple data source, which is a URL of a SDMX-ML data or metadata message. Multiple instance can only be used if they have the same underlying structure.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:choice>
            <xs:element name="DataStructure" type="common:DataStructureReferenceType" maxOccurs="unbounded"/>
            <xs:element name="MetadataStructure" type="common:MetadataStructureReferenceType" maxOccurs="unbounded"/>
            <xs:element name="Dataflow" type="common:DataflowReferenceType" maxOccurs="unbounded"/>
            <xs:element name="Metadataflow" type="common:MetadataflowReferenceType" maxOccurs="unbounded"/>
            <xs:element name="ProvisionAgreement" type="common:ProvisionAgreementReferenceType" maxOccurs="unbounded"/>
          </xs:choice>
        </xs:choice>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="ContentConstraintAttachmentType">
    <xs:annotation>
      <xs:documentation>ContentConstraintAttachmentType defines the structure for specifying the target object(s) of a content constraint.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="ConstraintAttachmentType">
        <xs:choice>
          <xs:element name="DataProvider" type="common:DataProviderReferenceType"/>
          <xs:element name="DataSet" type="common:SetReferenceType"/>
          <xs:element name="MetadataSet" type="common:SetReferenceType"/>
          <xs:element name="SimpleDataSource" type="xs:anyURI"/>
          <xs:choice>
            <xs:sequence>
              <xs:element name="DataStructure" type="common:DataStructureReferenceType" maxOccurs="unbounded"/>
              <xs:element name="QueryableDataSource" type="common:QueryableDataSourceType" minOccurs="0" maxOccurs="unbounded"/>
            </xs:sequence>
            <xs:sequence>
              <xs:element name="MetadataStructure" type="common:MetadataStructureReferenceType" maxOccurs="unbounded"/>
              <xs:element name="QueryableDataSource" type="common:QueryableDataSourceType" minOccurs="0" maxOccurs="unbounded"/>
            </xs:sequence>
            <xs:sequence>
              <xs:element name="Dataflow" type="common:DataflowReferenceType" maxOccurs="unbounded"/>
              <xs:element name="QueryableDataSource" type="common:QueryableDataSourceType" minOccurs="0" maxOccurs="unbounded"/>
            </xs:sequence>
            <xs:sequence>
              <xs:element name="Metadataflow" type="common:MetadataflowReferenceType" maxOccurs="unbounded"/>
              <xs:element name="QueryableDataSource" type="common:QueryableDataSourceType" minOccurs="0" maxOccurs="unbounded"/>
            </xs:sequence>
            <xs:sequence>
              <xs:element name="ProvisionAgreement" type="common:ProvisionAgreementReferenceType" maxOccurs="unbounded"/>
              <xs:element name="QueryableDataSource" type="common:QueryableDataSourceType" minOccurs="0" maxOccurs="unbounded"/>
            </xs:sequence>
          </xs:choice>
        </xs:choice>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:annotation>
    <xs:appinfo>SDMX Dataflow Structure Module</xs:appinfo>
    <xs:documentation>The data flow structure module defines the structure of data flow constructs.</xs:documentation>
  </xs:annotation>

  <xs:complexType name="DataflowType">
    <xs:annotation>
      <xs:documentation>DataflowType describes the structure of a data flow. A data flow is defined as the structure of data that will provided for different reference periods. If this type is not referenced externally, then a reference to a key family definition must be provided.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="StructureUsageType">
        <xs:sequence>
          <xs:element ref="common:Annotations" minOccurs="0"/>
          <xs:element ref="common:Name" maxOccurs="unbounded"/>
          <xs:element ref="common:Description" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element name="Structure" type="common:DataStructureReferenceType" minOccurs="0">
            <xs:annotation>
              <xs:documentation>Structure provides a reference to the data structure definition which defines the structure of all data for this flow.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:annotation>
    <xs:appinfo>SDMX Data Structure Structure Module</xs:appinfo>
    <xs:documentation>The Data Structure structure module defines the structure of data structure definition constructs.</xs:documentation>
  </xs:annotation>

  <xs:complexType name="DataStructureType">
    <xs:annotation>
      <xs:documentation>DataStructureType describes the structure of a data structure definition. A data structure definition is defined as a collection of metadata concepts, their structure and usage when used to collect or disseminate data.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="StructureType">
        <xs:sequence>
          <xs:element ref="common:Annotations" minOccurs="0"/>
          <xs:element ref="common:Name" maxOccurs="unbounded"/>
          <xs:element ref="common:Description" minOccurs="0" maxOccurs="unbounded"/>
          <xs:sequence minOccurs="0">
            <xs:element ref="DataStructureComponents"/>
          </xs:sequence>
        </xs:sequence>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:element name="DataStructureComponents" type="DataStructureComponentsType" substitutionGroup="Grouping">
    <xs:annotation>
      <xs:documentation>DataStructureComponents defines the grouping of the sets of metadata concepts that have a defined structural role in the data structure definition. Note that for any component or group defined in a data structure definition, its id must be unique. This applies to the identifiers explicitly defined by the components as well as those inherited from the concept identity of a component. For example, if two dimensions take their identity from concepts with same identity (regardless of whether the concepts exist in different schemes) one of the dimensions must be provided a different explicit identifier. Although there are XML schema constraints to help enforce this, these only apply to explicitly assigned identifiers. Identifiers inherited from a concept from which a component takes its identity cannot be validated against this constraint. Therefore, systems processing data structure definitions will have to perform this check outside of the XML validation. There are also three reserved identifiers in a data structure definition; OBS_VALUE, TIME_PERIOD, and REPORTING_PERIOD_START_DAY. These identifiers may not be used outside of their respective defintions (PrimaryMeasure, TimeDimension, and ReportingYearStartDay). This applies to both the explicit identifiers that can be assigned to the components or groups as well as an identifier inherited by a component from its concept identity. For example, if an ordinary dimension (i.e. not the time dimension) takes its concept identity from a concept with the identifier TIME_PERIOD, that dimension must provide a different explicit identifier.</xs:documentation>
    </xs:annotation>
    <xs:unique name="DataStructureUniqueComponent">
      <xs:selector xpath="structure:Group | structure:DimensionList/structure:Dimension | structure:DimensionList/structure:TimeDimension | structure:DimensionList/structure:MeasureDimension | structure:AttributeList/structure:Attribute | structure:AttributeList/structure:ReportingYearStartDay| structure:MeasureList/structure:PrimaryMeasure"/>
      <xs:field xpath="@id"/>
    </xs:unique>
  </xs:element>

  <xs:complexType name="DataStructureComponentsBaseType" abstract="true">
    <xs:annotation>
      <xs:documentation>DataStructureComponentsBaseType is an abstract base type the serves as the basis for the DataStructureComponentsType. This type is necessary to allow for valid substitutions of component lists.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="GroupingType">
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="DataStructureComponentsType">
    <xs:annotation>
      <xs:documentation>DataStructureComponentsType describes the structure of the grouping to the sets of metadata concepts that have a defined structural role in the data structure definition. At a minimum at least one dimension and a primary measure must be defined.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="DataStructureComponentsBaseType">
        <xs:sequence>
          <xs:element ref="DimensionList"/>
          <xs:element ref="Group" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element ref="AttributeList" minOccurs="0"/>
          <xs:element ref="MeasureList"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:element name="AttributeList" type="AttributeListType" substitutionGroup="ComponentList">
    <xs:annotation>
      <xs:documentation>AttributeList describes the attribute descriptor for the data structure definition. It is a collection of metadata concepts that define the attributes of the data structure definition.</xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:complexType name="AttributeListBaseType" abstract="true">
    <xs:annotation>
      <xs:documentation>AttributeListBaseType is an abstract base type used as the basis for the AttributeListType.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="ComponentListType">
        <xs:sequence>
          <xs:element ref="common:Annotations" minOccurs="0"/>
        </xs:sequence>
        <xs:attribute name="id" type="common:IDType" use="optional" fixed="AttributeDescriptor">
          <xs:annotation>
            <xs:documentation>The id attribute is provided in this case for completeness. However, its value is fixed to AttributeDescriptor.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="AttributeListType">
    <xs:annotation>
      <xs:documentation>AttributeListType describes the attribute descriptor for the data structure definition.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="AttributeListBaseType">
        <xs:choice maxOccurs="unbounded">
          <xs:element ref="Attribute"/>
          <xs:element ref="ReportingYearStartDay"/>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:element name="Attribute" type="AttributeType" substitutionGroup="Component">
    <xs:annotation>
      <xs:documentation>Attribute describes the definition of a data attribute, which is defined as a characteristic of an object or entity.</xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:complexType name="AttributeBaseType" abstract="true">
    <xs:annotation>
      <xs:documentation>AttributeBaseType is an abstract base type that serves as the basis for the AttributeType. It restricts the text format base to a text format valid  for data components (that does not allow for XHTML representation). The local representation is restricted to the values defined in codelist. The concept role is restricted to the values valid for a data attribute.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="ComponentType">
        <xs:sequence>
          <xs:element ref="common:Annotations" minOccurs="0"/>
          <xs:element name="ConceptIdentity" type="common:ConceptReferenceType"/>
          <xs:element name="LocalRepresentation" type="SimpleDataStructureRepresentationType" minOccurs="0"/>
        </xs:sequence>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="AttributeType">
    <xs:annotation>
      <xs:documentation>AttributeType describes the structure of a data attribute, which is defined as a characteristic of an object or entity. The attribute takes its semantic, and in some cases it representation, from its concept identity. An attribute can be coded by referencing a code list from its coded local representation. It can also specify its text format, which is used as the representation of the attribute if a coded representation is not defined. Neither the coded or uncoded representation are necessary, since the attribute may take these from the referenced concept. An attribute specifies its relationship with other data structure components and is given an assignment status. These two properties dictate where in a data message the attribute will be attached, and whether or not the attribute will be required to be given a value. A set of roles defined in concept scheme can be assigned to the attribute.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="AttributeBaseType">
        <xs:sequence>
          <xs:element name="ConceptRole" type="common:ConceptReferenceType" minOccurs="0" maxOccurs="unbounded">
            <xs:annotation>
              <xs:documentation>ConceptRole references concepts which define roles which this attribute serves. If the concept from which the attribute takes its identity also defines a role the concept serves, then the isConceptRole indicator can be set to true on the concept identity rather than repeating the reference here.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="AttributeRelationship" type="AttributeRelationshipType">
            <xs:annotation>
              <xs:documentation>AttributeRelationship describes how the value of this attribute varies with the values of other components. These relationships will be used to determine the attachment level of the attribute in the various data formats.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
        <xs:attribute name="assignmentStatus" type="UsageStatusType" use="required">
          <xs:annotation>
            <xs:documentation>The assignmentStatus attribute indicates whether a value must be provided for the attribute when sending documentation along with the data.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="AttributeRelationshipType">
    <xs:annotation>
      <xs:documentation>AttributeRelationshipType defines the structure for stating the relationship between an attribute and other data structure definition components.</xs:documentation>
    </xs:annotation>
    <xs:choice>
      <xs:element name="None" type="common:EmptyType">
        <xs:annotation>
          <xs:documentation>This means that value of the attribute will not vary with any of the other key family components. This will always be treated as a data set level attribute.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:sequence>
        <xs:element name="Dimension" type="common:LocalDimensionReferenceType" maxOccurs="unbounded">
          <xs:annotation>
            <xs:documentation>This is used to reference dimensions in the data structure definition on which the value of this attribute depends. An attribute using this relationship can be either a group, series (or section), or observation level attribute. The attachment level of the attribute will be determined by the data format and which dimensions are referenced.</xs:documentation>
          </xs:annotation>
        </xs:element>
        <xs:element name="AttachmentGroup" type="common:LocalGroupKeyDescriptorReferenceType" minOccurs="0" maxOccurs="unbounded">
          <xs:annotation>
            <xs:documentation>This is used to specify that the attribute should always be attached to the groups referenced here. Note that if one of the referenced dimensions is the time dimension, the groups referenced here will be ignored.</xs:documentation>
          </xs:annotation>
        </xs:element>
      </xs:sequence>
      <xs:element name="Group" type="common:LocalGroupKeyDescriptorReferenceType">
        <xs:annotation>
          <xs:documentation>This is used as a convenience to referencing all of the dimension defined by the referenced group. The attribute will also be attached to this group.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="PrimaryMeasure" type="common:LocalPrimaryMeasureReferenceType">
        <xs:annotation>
          <xs:documentation>This is used to specify that the value of the attribute is dependent upon the observed value. An attribute with this relationship will always be treated as an observation level attribute.</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:choice>
  </xs:complexType>

  <xs:element name="ReportingYearStartDay" type="ReportingYearStartDayType" substitutionGroup="Component">
    <xs:annotation>
      <xs:documentation>ReportingYearStartDay is a specialized data attribute which provides important context to the time dimension. If the value of the time dimension is one of the standard reporting periods (see common:ReportingTimePeriodType) then this attribute is used to state the month and day that the reporting year begins. This provides a reference point from which the actual calendar dates covered by these periods can be determined. If this attribute does not occur in a data set, then the reporting year start day will be assumed to be January 1.</xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:complexType name="ReportingYearStartDayType">
    <xs:annotation>
      <xs:documentation>ReportingYearStartDayType defines the structure of the reporting year start day attribute. The reporting year start day attribute takes its semantic from its concept identity (usually the REPORTING_YEAR_START_DAY concept), yet is always has a fixed identifier (REPORTING_YEAR_START_DAY). The reporting year start day attribute always has a fixed text format, which specifies that the format of its value is always a day and month in the ISO 8601 format of '--MM-DD'. As with any other attribute, an attribute relationship must be specified. this relationship should be carefully selected as it will determin what type of data the data structure definition will allow. For example, if an attribute relationship of none is specified, this will mean the data sets conforming to this data structure definition can only contain data with standard reporting periods where the all reporting periods have the same start day. In this case, data reported as standard reporting periods from two entities with different fiscal year start days could not be contained in the same data set.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="AttributeType">
        <xs:sequence>
          <xs:element ref="common:Annotations" minOccurs="0"/>
          <xs:element name="ConceptIdentity" type="common:ConceptReferenceType"/>
          <xs:element name="LocalRepresentation" type="ReportingYearStartDayRepresentationType"/>
          <xs:element name="AttributeRelationship" type="AttributeRelationshipType"/>
        </xs:sequence>
        <xs:attribute name="id" type="common:NCNameIDType" use="optional" fixed="REPORTING_YEAR_START_DAY"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="ReportingYearStartDayRepresentationType">
    <xs:annotation>
      <xs:documentation>ReportingYearStartDayRepresentationType defines the representation for the reporting year start day attribute. Enumerated values are not allowed and the text format is fixed to be a day and month in the ISO 8601 format of '--MM-DD'.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="SimpleDataStructureRepresentationType">
        <xs:sequence>
          <xs:element name="TextFormat" type="ReportingYearStartDayTextFormatType"/>
        </xs:sequence>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="ReportingYearStartDayTextFormatType">
    <xs:annotation>
      <xs:documentation>ReportingYearStartDayTextFormatType is a restricted version of the NonFacetedTextFormatType that fixes the value of the text type to be DayMonth. This type exists solely for the purpose of fixing the representation of the reporting year start day attribute.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="NonFacetedTextFormatType">
        <xs:attribute name="textType" type="common:SimpleDataType" fixed="MonthDay"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:element name="DimensionList" type="DimensionListType" substitutionGroup="ComponentList">
    <xs:annotation>
      <xs:documentation>DimensionList describes the key descriptor for the data structure definition. It is an ordered set of metadata concepts that, combined, classify a statistical series, such as a time series, and whose values, when combined (the key) in an instance such as a data set, uniquely identify a specific series.</xs:documentation>
    </xs:annotation>
    <xs:unique name="SingleMeasureDimension">
      <xs:selector xpath="structure:MeasureDimension"/>
      <xs:field xpath="@type"/>
    </xs:unique>
  </xs:element>

  <xs:complexType name="DimensionListBaseType" abstract="true">
    <xs:annotation>
      <xs:documentation>DimensionListBaseType is an abstract base type used as the basis for the DimensionListType.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="ComponentListType">
        <xs:sequence>
          <xs:element ref="common:Annotations" minOccurs="0"/>
        </xs:sequence>
        <xs:attribute name="id" type="common:IDType" use="optional" fixed="DimensionDescriptor">
          <xs:annotation>
            <xs:documentation>The id attribute is provided in this case for completeness. However, its value is fixed to DimensionDescriptor.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="DimensionListType">
    <xs:annotation>
      <xs:documentation>DimensionListType describes the key descriptor for a data structure definition. The order of the declaration of child dimensions is significant: it is used to describe the order in which they will appear in data formats for which key values are supplied in an ordered fashion (exclusive of the time dimension, which is not represented as a member of the ordered key). Any data structure definition which uses the time dimension should also declare a frequency dimension, conventionally the first dimension in the key (the set of ordered non-time dimensions). If is not necessary to assign a time dimension, as data can be organised in any fashion required.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="DimensionListBaseType">
        <xs:choice maxOccurs="unbounded">
          <xs:element ref="Dimension"/>
          <xs:element ref="MeasureDimension"/>
          <xs:element ref="TimeDimension"/>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="BaseDimensionBaseType" abstract="true">
    <xs:annotation>
      <xs:documentation>BaseDimensionBaseType is an abstract base type that serves as the basis for any dimension. It restricts the text format base to a text format valid  for data components (that does not allow for XHTML representation).</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="ComponentType">
        <xs:sequence>
          <xs:element ref="common:Annotations" minOccurs="0"/>
          <xs:element name="ConceptIdentity" type="common:ConceptReferenceType"/>
          <xs:element name="LocalRepresentation" type="DataStructureRepresentationType" minOccurs="0"/>
        </xs:sequence>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="BaseDimensionType" abstract="true">
    <xs:annotation>
      <xs:documentation>BaseDimensionType is an abstract base type which defines the basic structure of all dimensions.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="BaseDimensionBaseType">
        <xs:sequence>
          <xs:element name="ConceptRole" type="common:ConceptReferenceType" minOccurs="0" maxOccurs="unbounded">
            <xs:annotation>
              <xs:documentation>ConceptRole references concepts which define roles which this dimension serves. If the concept from which the attribute takes its identity also defines a role the concept serves, then the isConceptRole indicator can be set to true on the concept identity rather than repeating the reference here.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
        <xs:attribute name="position" type="xs:int" use="optional">
          <xs:annotation>
            <xs:documentation>The position attribute specifies the position of the dimension in the data structure definition. It is optional an the position of the dimension in the key descriptor (DimensionList element) always takes precedence over the value supplied here. This is strictly for informational purposes only.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="type" type="common:DimensionTypeType" use="optional">
          <xs:annotation>
            <xs:documentation>The type attribute identifies whether then dimension is a measure dimension, the time dimension, or a regular dimension. Although these are all apparent by the element names, this attribute allows for each dimension to be processed independent of its element as well as maintaining the restriction of only one measure and time dimension while still allowing dimension to occur in any order.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:element name="Dimension" type="DimensionType" substitutionGroup="Component">
    <xs:annotation>
      <xs:documentation>Dimension describes the structure of a dimension, which is defined as a statistical concept used (most probably together with other statistical concepts) to identify a statistical series, such as a time series, e.g. a statistical concept indicating certain economic activity or a geographical reference area.</xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:complexType name="DimensionType">
    <xs:annotation>
      <xs:documentation>DimensionType describes the structure of an ordinary dimension, which is defined as a statistical concept used (most probably together with other statistical concepts) to identify a statistical series, such as a time series, e.g. a statistical concept indicating certain economic activity or a geographical reference area. The dimension takes its semantic, and in some cases it representation, from its concept identity. A dimension can be coded by referencing a code list from its coded local representation. It can also specify its text format, which is used as the representation of the dimension if a coded representation is not defined. Neither the coded or uncoded representation are necessary, since the dimension may take these from the referenced concept.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="BaseDimensionType">
        <xs:sequence>
          <xs:element ref="common:Annotations" minOccurs="0"/>
          <xs:element name="ConceptIdentity" type="common:ConceptReferenceType"/>
          <xs:element name="LocalRepresentation" type="SimpleDataStructureRepresentationType" minOccurs="0"/>
          <xs:element name="ConceptRole" type="common:ConceptReferenceType" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
        <xs:attribute name="type" type="common:DimensionTypeType" use="optional" fixed="Dimension"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:element name="TimeDimension" type="TimeDimensionType" substitutionGroup="Component">
    <xs:annotation>
      <xs:documentation>TimeDimension is a special dimension which designates the period in time in which the data identified by the full series key applies.</xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:complexType name="TimeDimensionType">
    <xs:annotation>
      <xs:documentation>TimeDimensionType describes the structure of a time dimension. The time dimension takes its semantic from its concept identity (usually the TIME_PERIOD concept), yet is always has a fixed identifier (TIME_PERIOD). The time dimension always has a fixed text format, which specifies that its format is always the in the value set of the observational time period (see common:ObservationalTimePeriodType). It is possible that the format may be a sub-set of the observational time period value set. For example, it is possible to state that the representation might always be a calendar year. See the enumerations of the textType attribute in the LocalRepresentation/TextFormat for more details of the possible sub-sets. It is also possible to facet this representation with start and end dates. The purpose of such facts is to restrict the value of the time dimension to occur within the specified range. If the time dimension is expected to allow for the standard reporting periods (see common:ReportingTimePeriodType) to be used, then it is strongly recommended that the reporting year start day attribute also be included in the data structure definition. When the reporting year start day attribute is used, any standard reporting period values will be assumed to be based on the start day contained in this attribute. If the reporting year start day attribute is not included and standard reporting periods are used, these values will be assumed to be based on a reporting year which begins January 1.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="BaseDimensionType">
        <xs:sequence>
          <xs:element ref="common:Annotations" minOccurs="0"/>
          <xs:element name="ConceptIdentity" type="common:ConceptReferenceType"/>
          <xs:element name="LocalRepresentation" type="TimeDimensionRepresentationType"/>
        </xs:sequence>
        <xs:attribute name="id" type="common:NCNameIDType" use="optional" fixed="TIME_PERIOD"/>
        <xs:attribute name="type" type="common:DimensionTypeType" use="optional" fixed="TimeDimension"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:element name="MeasureDimension" type="MeasureDimensionType" substitutionGroup="Component">
    <xs:annotation>
      <xs:documentation>MeasureDimension is a special type of dimension which defines multiple measures in a key family. This is represented as any other dimension in a unless it is the observation dimension. It takes it representation from a concept scheme, and this scheme defines the measures and their representations. When data is formatted with this as the observation dimension, these measures can be made explicit or the value of the dimension can be treated as any other dimension. If the measures are explicit, the representation of the observation will be specific to the core representation for each concept in the representation concept scheme. Note that it is necessary that these representations are compliant (the same or derived from) with that of the primary measure.</xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:complexType name="MeasureDimensionType">
    <xs:annotation>
      <xs:documentation>MeasureDimensionType defines the structure of the measure dimension. It is derived from the base dimension structure, but requires that a coded representation taken from a concept scheme is given.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="BaseDimensionType">
        <xs:sequence>
          <xs:element ref="common:Annotations" minOccurs="0"/>
          <xs:element name="ConceptIdentity" type="common:ConceptReferenceType"/>
          <xs:element name="LocalRepresentation" type="MeasureDimensionRepresentationType"/>
          <xs:element name="ConceptRole" type="common:ConceptReferenceType" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
        <xs:attribute name="type" type="common:DimensionTypeType" use="optional" fixed="MeasureDimension"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:element name="Group" type="GroupType" substitutionGroup="ComponentList">
    <xs:annotation>
      <xs:documentation>Group describes a group descriptor in a data structure definition. It is a set metadata concepts (and possibly their values) that define a partial key derived from the key descriptor in a data structure definition.</xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:complexType name="GroupBaseType" abstract="true">
    <xs:annotation>
      <xs:documentation>GroupBaseType is an abstract base type that forms the basis for the GroupType.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="ComponentListType">
        <xs:sequence>
          <xs:element ref="common:Annotations" minOccurs="0"/>
        </xs:sequence>
        <xs:attribute name="id" type="common:IDType" use="required"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="GroupType">
    <xs:annotation>
      <xs:documentation>GroupType describes the structure of a group descriptor in a data structure definition. A group may consist of a of partial key, or collection of distinct cube regions or key sets to which attributes may be attached. The purpose of a group is to specify attributes values which have the same value based on some common dimensionality. All groups declared in the data structure must be unique - that is, you may not have duplicate partial keys. All groups must be given unique identifiers.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="GroupBaseType">
        <xs:choice>
          <xs:element ref="GroupDimension" maxOccurs="unbounded"/>
          <xs:element name="AttachmentConstraint" type="common:AttachmentConstraintReferenceType">
            <xs:annotation>
              <xs:documentation>AttachmentConstraint references an attachment constraint that defines the key sets and/or cube regions that attributes may be attached to. This is an alternative to referencing the dimensions, and allows attributes to be attached to data for given values of dimensions.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:element name="GroupDimension" type="GroupDimensionType" substitutionGroup="Component">
    <xs:annotation>
      <xs:documentation>GroupDimension is a component which contains only a reference to a dimension in the key descriptor (DimensionList). Although it is conventional to declare dimensions in the same order as they are declared in the ordered key, there is no requirement to do so - the ordering of the values of the key are taken from the order in which the dimensions are declared. Note that the id of a dimension may be inherited from its underlying concept - therefore this reference value may actually be the id of the concept.</xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:complexType name="GroupDimensionBaseType" abstract="true">
    <xs:annotation>
      <xs:documentation>GroupDimensionBaseType is an abstract base type which refines the base ComponentType in order to form the basis for the GroupDimensionType.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="ComponentType">
        <xs:attribute name="id" type="common:NCNameIDType" use="prohibited"/>
        <xs:attribute name="urn" type="xs:anyURI" use="prohibited"/>
        <xs:attribute name="uri" type="xs:anyURI" use="prohibited"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="GroupDimensionType">
    <xs:annotation>
      <xs:documentation>GroupDimensionType defines a dimension component with a group key descriptor component list. Although technically a component, this is essentially a reference to a dimension defined in the key descriptor. Therefore, the identification, name, and description, concept identity and representation properties that are typically available for a component are not allowed here, as they are all inherited from the referenced dimension.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="GroupDimensionBaseType">
        <xs:sequence>
          <xs:element name="DimensionReference" type="common:LocalDimensionReferenceType">
            <xs:annotation>
              <xs:documentation>DimensionReference provides a reference to a dimension defined in the key descriptor of the data structure definition in which this group key descriptor is defined.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:element name="MeasureList" type="MeasureListType" substitutionGroup="ComponentList">
    <xs:annotation>
      <xs:documentation>MeasureList describes the measure descriptor for a key family. It contains a single metadata concepts that define the primary measures of a data structure.</xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:complexType name="MeasureListType">
    <xs:annotation>
      <xs:documentation>MeasureListType describes the structure of the measure descriptor for a data structure definition. Only a primary may be defined.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="ComponentListType">
        <xs:sequence>
          <xs:element ref="common:Annotations" minOccurs="0"/>
          <xs:element ref="PrimaryMeasure"/>
        </xs:sequence>
        <xs:attribute name="id" type="common:IDType" use="optional" fixed="MeasureDescriptor"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:element name="PrimaryMeasure" type="PrimaryMeasureType" substitutionGroup="Component">
    <xs:annotation>
      <xs:documentation>PrimaryMeasure defines the structure of the primary measure, which is the concept that is the value of the phenomenon to be measured in a data set. Although this may take its semantic from any concept, this is provided a fixed identifier (OBS_VALUE) so that it may be easily distinguished in data messages.</xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:complexType name="PrimaryMeasureType">
    <xs:annotation>
      <xs:documentation>PrimaryMeasureType describes the structure of the primary measure. It describes the observation values for all presentations of the data. The primary measure takes its semantic, and in some cases it representation, from its concept identity (conventionally the OBS_VALUE concept). The primary measure can be coded by referencing a code list from its coded local representation. It can also specify its text format, which is used as the representation of the primary measure if a coded representation is not defined. Neither the coded or uncoded representation are necessary, since the primary measure may take these from the referenced concept. Note that if the data structure declares a measure dimension, the representation of this must be a superset of all possible measure concept representations.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="ComponentType">
        <xs:sequence>
          <xs:element ref="common:Annotations" minOccurs="0"/>
          <xs:element name="ConceptIdentity" type="common:ConceptReferenceType"/>
          <xs:element name="LocalRepresentation" type="SimpleDataStructureRepresentationType" minOccurs="0"/>
        </xs:sequence>
        <xs:attribute name="id" type="common:NCNameIDType" use="optional" fixed="OBS_VALUE"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="DataStructureRepresentationType" abstract="true">
    <xs:annotation>
      <xs:documentation>DataStructureRepresentationType is an abstract base type which defines the allowable representations for any data structure definition component. The enumeration must be restricted to the proper type for item scheme for a given component.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="RepresentationType">
        <xs:choice>
          <xs:element name="TextFormat" type="SimpleComponentTextFormatType"/>
          <xs:sequence>
            <xs:element name="Enumeration" type="common:ItemSchemeReferenceBaseType"/>
            <xs:element name="EnumerationFormat" type="CodededTextFormatType" minOccurs="0"/>
          </xs:sequence>
        </xs:choice>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="SimpleDataStructureRepresentationType">
    <xs:annotation>
      <xs:documentation>SimpleDataStructureRepresentationType defines the representation for any non-measure and non-time dimension data structure definition component.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="DataStructureRepresentationType">
        <xs:choice>
          <xs:element name="TextFormat" type="SimpleComponentTextFormatType"/>
          <xs:sequence>
            <xs:element name="Enumeration" type="common:CodelistReferenceType"/>
            <xs:element name="EnumerationFormat" type="CodededTextFormatType" minOccurs="0"/>
          </xs:sequence>
        </xs:choice>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="MeasureDimensionRepresentationType">
    <xs:annotation>
      <xs:documentation>BaseDimensionRepresentationType is an abstract base which defines the representation for a measure dimension.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="DataStructureRepresentationType">
        <xs:sequence>
          <xs:element name="Enumeration" type="common:ConceptSchemeReferenceType"/>
        </xs:sequence>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="TimeDimensionRepresentationType">
    <xs:annotation>
      <xs:documentation>TimeDimensionRepresentationType defines the representation for the time dimension. Enumerated values are not allowed.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="SimpleDataStructureRepresentationType">
        <xs:sequence>
          <xs:element name="TextFormat" type="TimeTextFormatType"/>
        </xs:sequence>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:annotation>
    <xs:appinfo>SDMX Hierarchical Code List Structure Module</xs:appinfo>
    <xs:documentation>The hierarchical code list structure module defines the structure of hierarchical code list constructs.</xs:documentation>
  </xs:annotation>

  <xs:complexType name="HierarchicalCodelistBaseType" abstract="true">
    <xs:annotation>
      <xs:documentation>HierarchicalCodelistBaseType is an abstract base class that is the basis for the HierarchicalCodelistType. It requires that a name be supplied.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="MaintainableType">
        <xs:sequence>
          <xs:element ref="common:Annotations" minOccurs="0"/>
          <xs:element ref="common:Name" maxOccurs="unbounded"/>
          <xs:element ref="common:Description" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="HierarchicalCodelistType">
    <xs:annotation>
      <xs:documentation>HierarchicalCodelistType describes the structure of a hierarchical codelist. A hierarchical code list is defined as an organised collection of codes that may participate in many parent/child relationships with other codes in the list, as defined by one or more hierarchy of the list.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="HierarchicalCodelistBaseType">
        <xs:sequence>
          <xs:element name="IncludedCodelist" type="IncludedCodelistReferenceType" minOccurs="0" maxOccurs="unbounded">
            <xs:annotation>
              <xs:documentation>IndludedCodelist provides a collection of references to the code lists whose codes are arranged in this hierarchical code list.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="Hierarchy" type="HierarchyType" minOccurs="0" maxOccurs="unbounded">
            <xs:annotation>
              <xs:documentation>Hierarchy describes a classification structure arranged in levels of detail from the broadest to the most detailed level. These levels can be formal or informal, and are not necessary to describe. If the hierarchy does contain levels, then each hierarchical code is assumed to exist in the level where the depths of nesting match.</xs:documentation>
            </xs:annotation>
            <xs:unique name="Hierarchy_UnqiueHierarchicalCode">
              <xs:selector xpath="structure:HierarchicalCode"/>
              <xs:field xpath="@id"/>
            </xs:unique>
            <xs:unique name="Hierarchy_UnqiueLevel">
              <xs:selector xpath=".//structure:Level"/>
              <xs:field xpath="@id"/>
            </xs:unique>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="HierarchyBaseType" abstract="true">
    <xs:annotation>
      <xs:documentation>HierarchyBaseType is an abstract base type that serves as the basis for the HierarchyType. It requires a name and id be provided.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="NameableType">
        <xs:sequence>
          <xs:element ref="common:Annotations" minOccurs="0"/>
          <xs:element ref="common:Name" maxOccurs="unbounded"/>
          <xs:element ref="common:Description" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
        <xs:attribute name="id" type="common:IDType" use="required"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="HierarchyType">
    <xs:annotation>
      <xs:documentation>The Hierarchy is an abstract type that provides for a classification structure of referenced codes arranged in levels of detail from the broadest to the most detailed level. The levels in which the code exist can be formal or informal.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="HierarchyBaseType">
        <xs:sequence>
          <xs:element name="HierarchicalCode" type="HierarchicalCodeType" maxOccurs="unbounded">
            <xs:annotation>
              <xs:documentation>HierarchicalCode is used to assemble the codes from the codelist(s) referenced into a hierarchy.</xs:documentation>
            </xs:annotation>
            <xs:unique name="HierarchicalCode_UnqiueHierarchicalCode">
              <xs:selector xpath="structure:HierarchicalCode"/>
              <xs:field xpath="@id"/>
            </xs:unique>
          </xs:element>
          <xs:element name="Level" type="LevelType" minOccurs="0">
            <xs:annotation>
              <xs:documentation>In a formally leveled hierarchy, Level describes a group of codes which are characterised by homogeneous coding, and where the parent of each code in the group is at the same higher level of the hierarchy. In a value based hierarchy Level describes information about the codes at the specified nesting level. This structure is recursive to indicate the hierarchy of the levels.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
        <xs:attribute name="leveled" type="xs:boolean" use="optional" default="false">
          <xs:annotation>
            <xs:documentation>The leveled attribute indicates that the hierarchy has formal levels. In this case, every code should have a level associated with it.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="HierarchicalCodeBaseType" abstract="true">
    <xs:annotation>
      <xs:documentation>HierarchicalCodeBaseType is an abstract base type the creates the basis for the HierarchicalCodeType. It removes the urn and uri.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="IdentifiableType">
        <xs:sequence>
          <xs:element ref="common:Annotations" minOccurs="0"/>
        </xs:sequence>
        <xs:attribute name="id" type="common:IDType" use="required">
          <xs:annotation>
            <xs:documentation>The id attribute allows for an id to be assigned to the use of the particular code at that specific point in the hierarchy. This value is unique within the hierarchy being created, and is used to map the hierarchy against external structures.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="HierarchicalCodeType">
    <xs:annotation>
      <xs:documentation>HierarchicalCodeType describes the structure of a hierarchical code. A hierarchical code provides for a reference to a code that is referenced within the hierarchical code list via either a complete reference to a code through either a URN or full set of reference fields, or a local reference which utilizes the included codelist reference alias and the identification of a code from the list. Codes are arranged in a hierarchy by this reference. Note that it is possible to reference a single code such that it has multiple parents within the hierarchy. Further, the hierarchy may or may not be a leveled one.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="HierarchicalCodeBaseType">
        <xs:sequence>
          <xs:choice>
            <xs:element name="Code" type="common:CodeReferenceType">
              <xs:annotation>
                <xs:documentation>Code provides a complete, explicit reference to a code through either its URN, or a complete reference to the codelist and code.</xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:sequence>
              <xs:element name="CodelistAliasRef" type="common:IDType">
                <xs:annotation>
                  <xs:documentation>CodelistAliasRef references an alias assigned in a IncludedCodelistReference element in the containing hierarchical codelist. This is used in conjunction with the CodeID element to reference a code from one of the included codelists.</xs:documentation>
                </xs:annotation>
              </xs:element>
              <xs:element name="CodeID" type="common:LocalCodeReferenceType">
                <xs:annotation>
                  <xs:documentation>CodeID references the id of a code from the codelist that is referenced through the CodelistAliaRef element.</xs:documentation>
                </xs:annotation>
              </xs:element>
            </xs:sequence>
          </xs:choice>
          <xs:element name="HierarchicalCode" type="HierarchicalCodeType" minOccurs="0" maxOccurs="unbounded">
            <xs:annotation>
              <xs:documentation>HierarchicalCode is used to nest referenced codes into a value based hierarchy.</xs:documentation>
            </xs:annotation>
            <xs:unique name="ChildHierarchicalCode_UnqiueHierarchicalCode">
              <xs:selector xpath="structure:HierarchicalCode"/>
              <xs:field xpath="@id"/>
            </xs:unique>
          </xs:element>
          <xs:element name="Level" type="common:LocalLevelReferenceType" minOccurs="0">
            <xs:annotation>
              <xs:documentation>Level references a formal level defined within the hierarchy which defines this hierarchical code. This is only necessary if the nesting depth of the hierarchical code does not correspond to the nesting depth of the level to which it belongs (i.e. the hieararchical code is to skip down a level). Otherwise, the code is assumed to exist at the level in which the nesting depth of the level matches the nesting depth of the code.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
        <xs:attribute name="version" type="common:VersionType" use="optional">
          <xs:annotation>
            <xs:documentation>The version attriubte contains a version number for the hierarchical code. A hierarchical code is not formally versionable, therefore each code must have a unique identifier. The version supplied here is for informational purposes only and is not used to uniquely identity the code.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="validFrom" type="xs:dateTime" use="optional">
          <xs:annotation>
            <xs:documentation>The validFrom attriubte indicates the point in time in which the hiearchical code became effective. This can be used to track the historicity of codes changing over time.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="validTo" type="xs:dateTime" use="optional">
          <xs:annotation>
            <xs:documentation>The validTo attriubte indicates the point in time in which the hiearchical code became no longer effective. This can be used to track the historicity of codes changing over time.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="LevelBaseType" abstract="true">
    <xs:annotation>
      <xs:documentation>LevelBaseType is an abstract base type that makes up the basis for the LevelType. It requires a name and id.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="NameableType">
        <xs:sequence>
          <xs:element ref="common:Annotations" minOccurs="0"/>
          <xs:element ref="common:Name" maxOccurs="unbounded"/>
          <xs:element ref="common:Description" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
        <xs:attribute name="id" type="common:IDType" use="required"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="LevelType">
    <xs:annotation>
      <xs:documentation>LevelType describes a level in a hierarchical codelist. Where level is defined as a group where codes can be characterised by homogeneous coding, and where the parent of each code in the group is at the same higher level of the hierarchy.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="LevelBaseType">
        <xs:sequence>
          <xs:element name="CodingFormat" type="CodingTextFormatType" minOccurs="0">
            <xs:annotation>
              <xs:documentation>CodingFormat specifies the text formatting of the codes in this level. This includes facets such as the expected characters and the length of the codes.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="Level" type="LevelType" minOccurs="0">
            <xs:annotation>
              <xs:documentation>Level describes the next level down in the hierarchy.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="IncludedCodelistReferenceType">
    <xs:annotation>
      <xs:documentation>IncludedCodelistReferenceType provides the structure for a referencing a codelist and optionally providing a local alias identification for this reference.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="common:CodelistReferenceType">
        <xs:attribute name="alias" type="common:IDType" use="optional">
          <xs:annotation>
            <xs:documentation>The alias attribute is used to carry the identifier for the referenced codelist, so that codes from that list can be easily referenced by the hierarchical codes contained in the parent hierarchy, without having to repeat the reference to the codelist itself. The alias attribute must be unique within the parent hierarchical codelist.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="CodingTextFormatType">
    <xs:complexContent>
      <xs:restriction base="SimpleComponentTextFormatType">
        <xs:attribute name="textType" type="SimpleCodeDataType" use="optional"/>
        <xs:attribute name="isSequence" type="xs:boolean" use="optional"/>
        <xs:attribute name="interval" type="xs:integer" use="optional"/>
        <xs:attribute name="startValue" type="xs:positiveInteger" use="optional"/>
        <xs:attribute name="endValue" type="xs:positiveInteger" use="optional"/>
        <xs:attribute name="timeInterval" type="xs:duration" use="prohibited"/>
        <xs:attribute name="startTime" type="common:BasicTimePeriodType" use="prohibited"/>
        <xs:attribute name="endTime" type="common:BasicTimePeriodType" use="prohibited"/>
        <xs:attribute name="minLength" type="xs:positiveInteger" use="optional"/>
        <xs:attribute name="maxLength" type="xs:positiveInteger" use="optional"/>
        <xs:attribute name="minValue" type="xs:positiveInteger" use="optional"/>
        <xs:attribute name="maxValue" type="xs:positiveInteger" use="optional"/>
        <xs:attribute name="decimals" type="xs:integer" use="prohibited"/>
        <xs:attribute name="pattern" type="xs:string" use="optional"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:simpleType name="SimpleCodeDataType">
    <xs:annotation>
      <xs:documentation>SimpleCodeDataType restricts SimpleDataType to specify the allowable data types for a simple code. The possible values are simply Alpha, AlphaNumeric, or Numeric.</xs:documentation>
    </xs:annotation>
    <xs:restriction base="common:SimpleDataType">
      <xs:enumeration value="Alpha"/>
      <xs:enumeration value="AlphaNumeric"/>
      <xs:enumeration value="Numeric"/>
    </xs:restriction>
  </xs:simpleType>

  <xs:annotation>
    <xs:appinfo>SDMX Metadataflow Structure Module</xs:appinfo>
    <xs:documentation>The metadata flow structure module defines the structure of metadata flow constructs.</xs:documentation>
  </xs:annotation>

  <xs:complexType name="MetadataflowType">
    <xs:annotation>
      <xs:documentation>MetadataflowType describes the structure of a metadata flow. A dataflow is defined as the structure of reference metadata that will be provided for different reference periods. If this type is not referenced externally, then a reference to a metadata structure definition must be provided</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="StructureUsageType">
        <xs:sequence>
          <xs:element ref="common:Annotations" minOccurs="0"/>
          <xs:element ref="common:Name" maxOccurs="unbounded"/>
          <xs:element ref="common:Description" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element name="Structure" type="common:MetadataStructureReferenceType" minOccurs="0">
            <xs:annotation>
              <xs:documentation>Structure provides a reference to the metadata structure definition describing the structure of all reference metadata for this flow.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:annotation>
    <xs:appinfo>SDMX Metadata Structure Structure Module</xs:appinfo>
    <xs:documentation>The Metadata Structure structure module defines the structure of metadata structure definition constructs.</xs:documentation>
  </xs:annotation>

  <xs:complexType name="MetadataStructureType">
    <xs:annotation>
      <xs:documentation>MetadataStructureType is used to describe a metadata structure definition, which is defined as a collection of metadata concepts, their structure and usage when used to collect or disseminate reference metadata.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="StructureType">
        <xs:sequence>
          <xs:element ref="common:Annotations" minOccurs="0"/>
          <xs:element ref="common:Name" maxOccurs="unbounded"/>
          <xs:element ref="common:Description" minOccurs="0" maxOccurs="unbounded"/>
          <xs:sequence minOccurs="0">
            <xs:element ref="MetadataStructureComponents"/>
          </xs:sequence>
        </xs:sequence>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:element name="MetadataStructureComponents" type="MetadataStructureComponentsType" substitutionGroup="Grouping">
    <xs:annotation>
      <xs:documentation>MetadataStructureComponents defines the grouping of the sets of the components that make up the metadata structure definition. All components and component list (target identifiers, identifier components, report structures, and metadata attributes) in the structure definition must have a unique identification.</xs:documentation>
    </xs:annotation>
    <xs:unique name="MetadataStructure_Unique_MetadataTarget">
      <xs:selector xpath="structure:MetadataTarget"/>
      <xs:field xpath="@id"/>
    </xs:unique>
    <xs:unique name="MetadataStructure_Unique_ReportStructure">
      <xs:selector xpath="structure:ReportStructure"/>
      <xs:field xpath="@id"/>
    </xs:unique>
  </xs:element>

  <xs:complexType name="MetadataStructureComponentsBaseType">
    <xs:annotation>
      <xs:documentation>MetadataStructureComponentsBaseType is an abstract base type that forms the basis for the MetadataStructureComponentsType.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="GroupingType"/>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="MetadataStructureComponentsType">
    <xs:annotation>
      <xs:documentation>MetadataStructureComponentsType describes the structure of the grouping of the sets of the components that make up the metadata structure definition. At a minimum, a full target identifier and at least one report structure must be defined.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="MetadataStructureComponentsBaseType">
        <xs:sequence>
          <xs:element ref="MetadataTarget" maxOccurs="unbounded"/>
          <xs:element ref="ReportStructure" maxOccurs="unbounded"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:element name="MetadataTarget" type="MetadataTargetType" substitutionGroup="ComponentList">
    <xs:annotation>
      <xs:documentation>MetadataTarget is a collection of target objects which when taken together describe a structure which defines the key of an object type to which metadata may be attached and serve to disambiguate reference metadata set reports.</xs:documentation>
    </xs:annotation>
    <xs:unique name="MetadataTarget_Unique_TargetObject">
      <xs:selector xpath="*"/>
      <xs:field xpath="@id"/>
    </xs:unique>
  </xs:element>

  <xs:complexType name="MetadataTargetBaseType" abstract="true">
    <xs:annotation>
      <xs:documentation>MetadataTargetBaseType is an abstract base type which forms the basis for the MetadataTargetType.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="ComponentListType">
        <xs:sequence>
          <xs:element ref="common:Annotations" minOccurs="0"/>
        </xs:sequence>
        <xs:attribute name="id" type="common:IDType" use="required"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="MetadataTargetType">
    <xs:annotation>
      <xs:documentation></xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="MetadataTargetBaseType">
        <xs:choice maxOccurs="unbounded">
          <xs:element ref="KeyDescriptorValuesTarget"/>
          <xs:element ref="DataSetTarget"/>
          <xs:element ref="ConstraintContentTarget"/>
          <xs:element ref="ReportPeriodTarget"/>
          <xs:element ref="IdentifiableObjectTarget"/>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="TargetObject" abstract="true">
    <xs:annotation>
      <xs:documentation>TargetObject is an abstract base type from which all target objects of a metadata target are derived. It is based on a component. Implementations of this will refined the local representation so that the allowed values accurately reflect the representation of the target object reference.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ComponentType"/>
    </xs:complexContent>
  </xs:complexType>

  <xs:element name="KeyDescriptorValuesTarget" type="KeyDescriptorValuesTargetType" substitutionGroup="Component">
    <xs:annotation>
      <xs:documentation>KeyDescriptorValuesTarget is target object which references a data key for the purpose of attach reference metadata to portions of data. A data key is a set of dimension references and values for those dimension. This component on its own is not of much use, as the data key only has local references to the dimensions. Therefore it is typical that this is used in combination with some sort of reference to the data (either a data set reference or a reference to the underlying structure, structure usage, or provision agreement of the data.</xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:complexType name="KeyDescriptorValuesTargetType">
    <xs:annotation>
      <xs:documentation>KeyDescriptorValuesTargetType defines the structure of a key descriptor values target object. The key descriptor values target object has a fixed representation and identifier.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="TargetObject">
        <xs:sequence>
          <xs:element ref="common:Annotations" minOccurs="0"/>
          <xs:element name="LocalRepresentation" type="KeyDescriptorValuesRepresentationType"/>
        </xs:sequence>
        <xs:attribute name="id" type="common:NCNameIDType" use="optional" fixed="DIMENSION_DESCRIPTOR_VALUES_TARGET"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:element name="DataSetTarget" type="DataSetTargetType" substitutionGroup="Component">
    <xs:annotation>
      <xs:documentation>DataSetTarget is target object which references a data set for the purpose of attaching reference metadata data. A data set reference is a full reference to a data provider and an identifier for the data set.</xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:complexType name="DataSetTargetType">
    <xs:annotation>
      <xs:documentation>DataSetTargetType defines the structure of a data set target object. The data set target object has a fixed representation and identifier.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="TargetObject">
        <xs:sequence>
          <xs:element ref="common:Annotations" minOccurs="0"/>
          <xs:element name="LocalRepresentation" type="DataSetRepresentationType"/>
        </xs:sequence>
        <xs:attribute name="id" type="common:NCNameIDType" use="optional" fixed="DATA_SET_TARGET"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:element name="ConstraintContentTarget" type="ConstraintContentTargetType" substitutionGroup="Component">
    <xs:annotation>
      <xs:documentation>ConstraintContentTarget is target object which references an attachment constraint for the purpose of attaching reference metadata data to data key sets or cube regions defined by the constraint.</xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:complexType name="ConstraintContentTargetType">
    <xs:annotation>
      <xs:documentation>ConstraintTargetType defines the structure of a constraint target object. The constraint target object has a fixed representation and identifier.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="TargetObject">
        <xs:sequence>
          <xs:element ref="common:Annotations" minOccurs="0"/>
          <xs:element name="LocalRepresentation" type="ConstraintRepresentationType"/>
        </xs:sequence>
        <xs:attribute name="id" type="common:NCNameIDType" use="optional" fixed="CONSTRAINT_CONTENT_TARGET"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:element name="ReportPeriodTarget" type="ReportPeriodTargetType" substitutionGroup="Component">
    <xs:annotation>
      <xs:documentation>ReportPeriodTarget is target object which specifies a reporting period to which a metadata report applies.</xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:complexType name="ReportPeriodTargetType">
    <xs:annotation>
      <xs:documentation>ReportPeriodTargetType defines the structure of a report period target object. The report period target object has a fixed representation and identifier.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="TargetObject">
        <xs:sequence>
          <xs:element ref="common:Annotations" minOccurs="0"/>
          <xs:element name="LocalRepresentation" type="ReportPeriodRepresentationType"/>
        </xs:sequence>
        <xs:attribute name="id" type="common:NCNameIDType" use="optional" fixed="REPORT_PERIOD_TARGET"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:element name="IdentifiableObjectTarget" type="IdentifiableObjectTargetType" substitutionGroup="Component">
    <xs:annotation>
      <xs:documentation>IdentifiableObjectTarget is target object which references an Identifiable object as defined in the SDMX Information Model. The reference must be complete (i.e. a URN or a complete set of reference fields). For an item object, it is possible to define a local representation of an item scheme from which the item must be referenced.</xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:complexType name="IdentifiableObjectTargetBaseType" abstract="true">
    <xs:annotation>
      <xs:documentation>IdentifiableObjectTargetBaseType is an abstract base type which forms the basis for the IdentifiableObjectTargetType.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="TargetObject">
        <xs:sequence>
          <xs:element ref="common:Annotations" minOccurs="0"/>
          <xs:element name="LocalRepresentation" type="IdentifiableObjectRepresentationType"/>
        </xs:sequence>
        <xs:attribute name="id" type="common:NCNameIDType" use="required"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="IdentifiableObjectTargetType">
    <xs:annotation>
      <xs:documentation>IdentifiableObjectTargetType defines the structure of an identifiable target object. The identifiable target object has a fixed representation of a reference and can specify a local representation of any item scheme for the purpose of restricting which items may be referenced. The identifiable object target must specify the object type which the target object is meant to reference.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="IdentifiableObjectTargetBaseType">
        <xs:attribute name="objectType" type="common:ObjectTypeCodelistType" use="required"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:element name="ReportStructure" type="ReportStructureType" substitutionGroup="ComponentList">
    <xs:annotation>
      <xs:documentation>ReportStructure defines a report structure, which comprises a set of metadata attributes that can be defined as a hierarchy, for reporting reference metadata about a target object. The identification of metadata attributes must be unique at any given level of the report structure. Although there are XML schema constraints to help enforce this, these only apply to explicitly assigned identifiers. Identifiers inherited from a concept from which a metadata attribute takes its identity cannot be validated against this constraint. Therefore, systems processing metadata structure definitions will have to perform this check outside of the XML validation.</xs:documentation>
    </xs:annotation>
    <xs:unique name="ReportStructure_Unique_MetadataAttribute">
      <xs:selector xpath="structure:MetadataAttribute"/>
      <xs:field xpath="@id"/>
    </xs:unique>
  </xs:element>

  <xs:complexType name="ReportStructureBaseType" abstract="true">
    <xs:annotation>
      <xs:documentation>ReportStructureBaseType is an abstract base type that serves as the basis for the ReportStructureType.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="ComponentListType">
        <xs:sequence>
          <xs:element ref="common:Annotations" minOccurs="0"/>
          <xs:sequence maxOccurs="unbounded">
            <xs:element ref="MetadataAttribute"/>
          </xs:sequence>
        </xs:sequence>
        <xs:attribute name="id" type="common:IDType" use="required"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="ReportStructureType">
    <xs:annotation>
      <xs:documentation>ReportStructureType describes the structure of a report structure. It comprises a set of metadata attributes that can be defined as a hierarchy, and identifies the potential attachment of these attributes to an object by referencing a target identifier.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ReportStructureBaseType">
        <xs:sequence>
          <xs:element name="MetadataTarget" type="common:LocalMetadataTargetReferenceType" maxOccurs="unbounded">
            <xs:annotation>
              <xs:documentation>MetadataTarget references a metadata target defined in the metadata structure definition. A report structure can reference multiple metadata targets which allows a report structure to be reused for attaching metadata to different types of targets.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:element name="MetadataAttribute" type="MetadataAttributeType" substitutionGroup="Component">
    <xs:annotation>
      <xs:documentation>MetadataAttribute defines the a metadata attribute, which is the value of an attribute, such as the instance of a coded or uncoded attribute in a metadata structure definition.</xs:documentation>
    </xs:annotation>
    <xs:unique name="MetadataAttribute_Unique_MetadataAttribute">
      <xs:selector xpath="structure:MetadataAttribute"/>
      <xs:field xpath="@id"/>
    </xs:unique>
  </xs:element>

  <xs:complexType name="MetadataAttributeBaseType" abstract="true">
    <xs:annotation>
      <xs:documentation>MetadataAttributeBaseType is an abstract base type the serves as the basis for the MetadataAttributeType.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="ComponentType">
        <xs:sequence>
          <xs:element ref="common:Annotations" minOccurs="0"/>
          <xs:element name="ConceptIdentity" type="common:ConceptReferenceType"/>
          <xs:element name="LocalRepresentation" type="MetadataAttributeRepresentationType" minOccurs="0"/>
        </xs:sequence>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="MetadataAttributeType">
    <xs:annotation>
      <xs:documentation>MetadataAttributeType describes the structure of a metadata attribute. The metadata attribute takes its semantic, and in some cases it representation, from its concept identity. A metadata attribute may be coded (via the local representation), uncoded (via the text format), or take no value. In addition to this value, the metadata attribute may also specify subordinate metadata attributes. If a metadata attribute only serves the purpose of containing subordinate metadata attributes, then the isPresentational attribute should be used. Otherwise, it is assumed to also take a value. If the metadata attribute does take a value, and a representation is not defined, it will be inherited from the concept it takes its semantic from. The optional id on the metadata attribute uniquely identifies it within the metadata structured definition. If this id is not supplied, its value is assumed to be that of the concept referenced from the concept identity. Note that a metadata attribute (as identified by the id attribute) definition  must be unique across the entire metadata structure definition (including target identifier, identifier component, and report structure ids). A metadata attribute may be used in multiple report structures and at different levels, but the content (value and/or child metadata attributes and their cardinality) of the metadata attribute cannot change.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="MetadataAttributeBaseType">
        <xs:sequence>
          <xs:element ref="MetadataAttribute" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
        <xs:attribute name="minOccurs" type="xs:nonNegativeInteger" default="1">
          <xs:annotation>
            <xs:documentation>The minOccurs attribute indicates the minimum number of times this metadata attribute can occur within its parent object.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="maxOccurs" type="common:OccurenceType" default="1">
          <xs:annotation>
            <xs:documentation>The maxOccurs attribute indicates the maximum number of times this metadata attribute can occur within its parent object.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="isPresentational" type="xs:boolean" use="optional" default="false">
          <xs:annotation>
            <xs:documentation>The isPresentational attribute indicates whether the metadata attribute should allow for a value. A value of true, meaning the metadata attribute is presentational means that the attribute only contains child metadata attributes, and does not contain a value. If this attribute is not set to true, and a representation (coded or uncoded) is not defined, then the representation of the metadata attribute will be inherited from the concept from which it takes its identity.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="KeyDescriptorValuesRepresentationType">
    <xs:annotation>
      <xs:documentation>KeyDescriptorValuesRepresentationType defines the possible local representations of a key descriptor values target object. The representation is fixed to always be a data key (KeyValues).</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="RepresentationType">
        <xs:sequence>
          <xs:element name="TextFormat" type="KeyDescriptorValuesTextFormatType"/>
        </xs:sequence>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="DataSetRepresentationType">
    <xs:annotation>
      <xs:documentation>DataSetRepresentationType defines the possible local representations of a data set reference target object. The representation is fixed to always be a data set reference.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="RepresentationType">
        <xs:sequence>
          <xs:element name="TextFormat" type="DataSetTextFormatType"/>
        </xs:sequence>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="ConstraintRepresentationType">
    <xs:annotation>
      <xs:documentation>ConstraintRepresentationType defines the possible local representations of a constraint reference target object. The representation is fixed to always be an attachment constraint reference.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="RepresentationType">
        <xs:sequence>
          <xs:element name="TextFormat" type="ConstraintTextFormatType"/>
        </xs:sequence>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="ReportPeriodRepresentationType">
    <xs:annotation>
      <xs:documentation>ReportPeriodRepresentationType defines the possible local representations of a report period target object. The reprentation must be a time period or a subset of this representation.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="RepresentationType">
        <xs:sequence>
          <xs:element name="TextFormat" type="TimeTextFormatType"/>
        </xs:sequence>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="IdentifiableObjectRepresentationType">
    <xs:annotation>
      <xs:documentation>IdentifiableObjectRepresentationType defines the possible local representations of an identifiable object target object.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="RepresentationType">
        <xs:choice>
          <xs:element name="TextFormat" type="IdentifiableObjectTextFormatType"/>
          <xs:sequence>
            <xs:element name="Enumeration" type="common:ItemSchemeReferenceType">
              <xs:annotation>
                <xs:documentation>Enumeration is only permissible if the object type of the identifiable object target is an item in an item scheme. This enumeration is meant to limit the referencable objects to the items defined in the referenced item scheme.</xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
        </xs:choice>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="MetadataAttributeRepresentationType">
    <xs:annotation>
      <xs:documentation>MetadataAttributeRepresentationType defines the possible local representations of a metadata attribute.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="RepresentationType">
        <xs:choice>
          <xs:element name="TextFormat" type="BasicComponentTextFormatType"/>
          <xs:sequence>
            <xs:element name="Enumeration" type="common:CodelistReferenceType"/>
            <xs:element name="EnumerationFormat" type="CodededTextFormatType" minOccurs="0"/>
          </xs:sequence>
        </xs:choice>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="TargetObjectTextFormatType">
    <xs:annotation>
      <xs:documentation>TargetObjectTextFormatType is a restricted version of the TextFormatType that does not allow for any facets and only allows the text types for target objects.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="TextFormatType">
        <xs:attribute name="textType" type="TargetObjectDataType" use="optional"/>
        <xs:attribute name="isSequence" type="xs:boolean" use="prohibited"/>
        <xs:attribute name="interval" type="xs:decimal" use="prohibited"/>
        <xs:attribute name="startValue" type="xs:decimal" use="prohibited"/>
        <xs:attribute name="endValue" type="xs:decimal" use="prohibited"/>
        <xs:attribute name="timeInterval" type="xs:duration" use="prohibited"/>
        <xs:attribute name="startTime" type="common:BasicTimePeriodType" use="prohibited"/>
        <xs:attribute name="endTime" type="common:BasicTimePeriodType" use="prohibited"/>
        <xs:attribute name="minLength" type="xs:positiveInteger" use="prohibited"/>
        <xs:attribute name="maxLength" type="xs:positiveInteger" use="prohibited"/>
        <xs:attribute name="minValue" type="xs:decimal" use="prohibited"/>
        <xs:attribute name="maxValue" type="xs:decimal" use="prohibited"/>
        <xs:attribute name="decimals" type="xs:positiveInteger" use="prohibited"/>
        <xs:attribute name="pattern" type="xs:string" use="prohibited"/>
        <xs:attribute name="isMultiLingual" type="xs:boolean" use="prohibited"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:simpleType name="TargetObjectDataType">
    <xs:annotation>
      <xs:documentation>TargetObjectDataType restricts DataType to specify the allowable data types for representing a target object value.</xs:documentation>
    </xs:annotation>
    <xs:restriction base="common:DataType">
      <xs:enumeration value="KeyValues"/>
      <xs:enumeration value="IdentifiableReference"/>
      <xs:enumeration value="DataSetReference"/>
      <xs:enumeration value="AttachmentConstraintReference"/>
    </xs:restriction>
  </xs:simpleType>

  <xs:complexType name="KeyDescriptorValuesTextFormatType">
    <xs:annotation>
      <xs:documentation>KeyDescriptorValuesTextFormatType is a restricted version of the NonFacetedTextFormatType that specifies a fixed KeyValues representation.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="TargetObjectTextFormatType">
        <xs:attribute name="textType" type="TargetObjectDataType" fixed="KeyValues"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="DataSetTextFormatType">
    <xs:annotation>
      <xs:documentation>DataSetTextFormatType is a restricted version of the NonFacetedTextFormatType that specifies a fixed DataSetReference representation.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="TargetObjectTextFormatType">
        <xs:attribute name="textType" type="TargetObjectDataType" fixed="DataSetReference"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="ConstraintTextFormatType">
    <xs:annotation>
      <xs:documentation>ConstraintTextFormatType is a restricted version of the NonFacetedTextFormatType that specifies a fixed AttachmentConstraintReference representation.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="TargetObjectTextFormatType">
        <xs:attribute name="textType" type="TargetObjectDataType" fixed="AttachmentConstraintReference"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="IdentifiableObjectTextFormatType">
    <xs:annotation>
      <xs:documentation>IdentifiableObjectTextFormatType is a restricted version of the NonFacetedTextFormatType that specifies a fixed IdentifiableReference representation.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="TargetObjectTextFormatType">
        <xs:attribute name="textType" type="TargetObjectDataType" fixed="IdentifiableReference"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:annotation>
    <xs:appinfo>SDMX Organisation Structure Module</xs:appinfo>
    <xs:documentation>The organisation structure module defines the structure of organisation schemes and organisation constructs.</xs:documentation>
  </xs:annotation>

  <xs:complexType name="OrganisationSchemeBaseType" abstract="true">
    <xs:annotation>
      <xs:documentation>OrganisationSchemeBaseType is an abstract base type for any organisation scheme.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="ItemSchemeType">
        <xs:sequence>
          <xs:element ref="common:Annotations" minOccurs="0"/>
          <xs:element ref="common:Name" maxOccurs="unbounded"/>
          <xs:element ref="common:Description" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="OrganisationSchemeType" abstract="true">
    <xs:annotation>
      <xs:documentation>OrganisationSchemeType describes the structure of an organisation scheme.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="OrganisationSchemeBaseType">
        <xs:sequence  minOccurs="0" maxOccurs="unbounded">
          <xs:element ref="Organisation"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:element name="Organisation" type="OrganisationType" substitutionGroup="Item" abstract="true">
    <xs:annotation>
      <xs:documentation>Organisation is an abstract substitution head for a generic organisation.</xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:complexType name="BaseOrganisationType" abstract="true">
    <xs:annotation>
      <xs:documentation>BaseOrganisationType is an abstract base type the forms the basis for the OrganisationType.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="ItemType">
        <xs:sequence>
          <xs:element ref="common:Annotations" minOccurs="0"/>
          <xs:element ref="common:Name" maxOccurs="unbounded"/>
          <xs:element ref="common:Description" minOccurs="0" maxOccurs="unbounded"/>
          <xs:choice minOccurs="0">
            <xs:element name="Parent" type="common:LocalOrganisationReferenceBaseType">
              <xs:annotation>
                <xs:documentation>If the particular organisation scheme allows, an organisation may reference a parent organisation defined in the same scheme. This does not affect the identification of the organisation, but rather only serves to state the relationship.</xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:choice>
        </xs:sequence>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="OrganisationType" abstract="true">
    <xs:annotation>
      <xs:documentation>OrganisationType in an abstract type which describes the structure of the details of an organisation. In addition to the basic organisation identification, contact details can be provided.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="BaseOrganisationType">
        <xs:sequence>
          <xs:element name="Contact" type="ContactType" minOccurs="0" maxOccurs="unbounded">
            <xs:annotation>
              <xs:documentation>Contact describes a contact for the organisation,</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="AgencySchemeType">
    <xs:annotation>
      <xs:documentation>AgencySchemeType defines a specific type of organisation scheme which contains only maintenance agencies. The agency scheme maintained by a particular maintenance agency is always provided a fixed identifier and version, and is never final. Therefore, agencies can be added or removed without have to version the scheme. Agencies schemes have no hierarchy, meaning that no agency may define a relationship with another agency in the scheme. In fact, the actual parent agency for an agency in a scheme is the agency which defines the scheme.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="OrganisationSchemeType">
        <xs:sequence>
          <xs:element ref="common:Annotations" minOccurs="0"/>
          <xs:element ref="common:Name" maxOccurs="unbounded"/>
          <xs:element ref="common:Description" minOccurs="0" maxOccurs="unbounded"/>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element ref="Agency"/>
          </xs:sequence>
        </xs:sequence>
        <xs:attribute name="id" type="common:IDType" use="required" fixed="AGENCIES"/>
        <xs:attribute name="version" type="common:VersionType" use="optional" fixed="1.0"/>
        <xs:attribute name="isFinal" type="xs:boolean" use="optional" fixed="false"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="DataConsumerSchemeType">
    <xs:annotation>
      <xs:documentation>DataConsumerSchemeType defines a type of organisation scheme which contains only data consumers. The data consumer scheme maintained by a particular maintenance agency is always provided a fixed identifier and version, and is never final. Therefore, consumers can be added or removed without have to version the scheme. This scheme has no hierarchy, meaning that no organisation may define a relationship with another organisation in the scheme.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="OrganisationSchemeType">
        <xs:sequence>
          <xs:element ref="common:Annotations" minOccurs="0"/>
          <xs:element ref="common:Name" maxOccurs="unbounded"/>
          <xs:element ref="common:Description" minOccurs="0" maxOccurs="unbounded"/>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element ref="DataConsumer"/>
          </xs:sequence>
        </xs:sequence>
        <xs:attribute name="id" type="common:IDType" use="required" fixed="DATA_CONSUMERS"/>
        <xs:attribute name="version" type="common:VersionType" use="optional" fixed="1.0"/>
        <xs:attribute name="isFinal" type="xs:boolean" use="optional" fixed="false"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="DataProviderSchemeType">
    <xs:annotation>
      <xs:documentation>DataProviderSchemeType defines a type of organisation scheme which contains only data providers. The data provider scheme maintained by a particular maintenance agency is always provided a fixed identifier and version, and is never final. Therefore, providers can be added or removed without have to version the scheme. This scheme has no hierarchy, meaning that no organisation may define a relationship with another organisation in the scheme</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="OrganisationSchemeType">
        <xs:sequence>
          <xs:element ref="common:Annotations" minOccurs="0"/>
          <xs:element ref="common:Name" maxOccurs="unbounded"/>
          <xs:element ref="common:Description" minOccurs="0" maxOccurs="unbounded"/>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element ref="DataProvider"/>
          </xs:sequence>
        </xs:sequence>
        <xs:attribute name="id" type="common:IDType" use="required" fixed="DATA_PROVIDERS"/>
        <xs:attribute name="version" type="common:VersionType" use="optional" fixed="1.0"/>
        <xs:attribute name="isFinal" type="xs:boolean" use="optional" fixed="false"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="OrganisationUnitSchemeType">
    <xs:annotation>
      <xs:documentation>OrganisationUnitSchemeType defines a type of organisation scheme which simply defines organisations and there parent child relationships. Organisations in this scheme are assigned no particular role, and may in fact exist within the other type of organisation schemes as well.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="OrganisationSchemeType">
        <xs:sequence>
          <xs:element ref="common:Annotations" minOccurs="0"/>
          <xs:element ref="common:Name" maxOccurs="unbounded"/>
          <xs:element ref="common:Description" minOccurs="0" maxOccurs="unbounded"/>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element ref="OrganisationUnit"/>
          </xs:sequence>
        </xs:sequence>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:element name="Agency" type="AgencyType" substitutionGroup="Organisation">
    <xs:annotation>
      <xs:documentation>Agency is an organisation which maintains structural metadata such as statistical classifications, glossaries, key family structural definitions, and metadata structure definitions..</xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:element name="DataConsumer" type="DataConsumerType" substitutionGroup="Organisation">
    <xs:annotation>
      <xs:documentation>DataConsumer describes an organisation using data as input for further processing.</xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:element name="DataProvider" type="DataProviderType" substitutionGroup="Organisation">
    <xs:annotation>
      <xs:documentation>DataProvider describes an organisation that produces data or reference metadata.</xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:element name="OrganisationUnit" type="OrganisationUnitType" substitutionGroup="Organisation">
    <xs:annotation>
      <xs:documentation>OrganisationUnit describes a generic organisation, which serves not predefined role in SDMX.</xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:complexType name="AgencyType">
    <xs:annotation>
      <xs:documentation>AgencyType defines the structure of an agency description. The contacts defined for the organisation are specific to the agency role the organisation is serving.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="OrganisationType">
        <xs:sequence>
          <xs:element ref="common:Annotations" minOccurs="0"/>
          <xs:element ref="common:Name" maxOccurs="unbounded"/>
          <xs:element ref="common:Description" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element name="Contact" type="ContactType" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
        <xs:attribute name="id" type="common:NCNameIDType" use="required">
          <xs:annotation>
            <xs:documentation>The id attribute holds the identification of the agency. The type of this id is restricted to the common:NCNNameIDType. This is necessary, since the agency identifier will be used as part of the name for simple types in data and metadata structure specific schemas and therefore must be compliant with the NCName type in XML Schema (see common:NCNameIDType for further details).</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="DataConsumerType">
    <xs:annotation>
      <xs:documentation>DataConsumerType defines the structure of a data consumer description. The contacts defined for the organisation are specific to the data consumer role the organisation is serving.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="OrganisationType">
        <xs:sequence>
          <xs:element ref="common:Annotations" minOccurs="0"/>
          <xs:element ref="common:Name" maxOccurs="unbounded"/>
          <xs:element ref="common:Description" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element name="Contact" type="ContactType" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="DataProviderType">
    <xs:annotation>
      <xs:documentation>DataProviderType defines the structure of a data provider description. The contacts defined for the organisation are specific to the data provider role the organisation is serving.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="OrganisationType">
        <xs:sequence>
          <xs:element ref="common:Annotations" minOccurs="0"/>
          <xs:element ref="common:Name" maxOccurs="unbounded"/>
          <xs:element ref="common:Description" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element name="Contact" type="ContactType" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="OrganisationUnitType">
    <xs:annotation>
      <xs:documentation>OrganisationUnitType defines the structure of an organisation unit description. In addition to general identification and contact information, an organisation unit can specify a relationship with another organisation unit from the same scheme which is its parent organisation.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="OrganisationType">
        <xs:sequence>
          <xs:element ref="common:Annotations" minOccurs="0"/>
          <xs:element ref="common:Name" maxOccurs="unbounded"/>
          <xs:element ref="common:Description" minOccurs="0" maxOccurs="unbounded"/>
          <xs:choice minOccurs="0">
            <xs:element name="Parent" type="common:LocalOrganisationUnitReferenceType"/>
          </xs:choice>
          <xs:element name="Contact" type="ContactType" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="ContactType">
    <xs:annotation>
      <xs:documentation>ContactType describes the structure of a contact's details.</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element ref="common:Name" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element name="Department" type="common:TextType" minOccurs="0" maxOccurs="unbounded">
        <xs:annotation>
          <xs:documentation>Department is designation of the organisational structure by a linguistic expression, within which the contact person works.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="Role" type="common:TextType" minOccurs="0" maxOccurs="unbounded">
        <xs:annotation>
          <xs:documentation>Role is the responsibility of the contact person with respect to the object for which this person is the contact.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:element name="Telephone" type="xs:string">
          <xs:annotation>
            <xs:documentation>Telephone holds the telephone number for the contact person.</xs:documentation>
          </xs:annotation>
        </xs:element>
        <xs:element name="Fax" type="xs:string">
          <xs:annotation>
            <xs:documentation>Fax holds the fax number for the contact person.</xs:documentation>
          </xs:annotation>
        </xs:element>
        <xs:element name="X400" type="xs:string">
          <xs:annotation>
            <xs:documentation>X400 holds the X.400 address for the contact person.</xs:documentation>
          </xs:annotation>
        </xs:element>
        <xs:element name="URI" type="xs:anyURI">
          <xs:annotation>
            <xs:documentation>URI holds an information URL for the contact person.</xs:documentation>
          </xs:annotation>
        </xs:element>
        <xs:element name="Email" type="xs:string">
          <xs:annotation>
            <xs:documentation>Email holds the email address for the contact person.</xs:documentation>
          </xs:annotation>
        </xs:element>
      </xs:choice>
    </xs:sequence>
    <xs:attribute name="id" type="common:IDType" use="optional">
      <xs:annotation>
        <xs:documentation>The id attribute is used to carry user id information for the contact.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>

  <xs:annotation>
    <xs:appinfo>SDMX Process Structure Module</xs:appinfo>
    <xs:documentation>The process structure module defines the structure of process and process step constructs.</xs:documentation>
  </xs:annotation>

  <xs:complexType name="ProcessType">
    <xs:annotation>
      <xs:documentation>ProcessType describes the structure of a process, which is a scheme which defines or documents the operations performed on data in order to validate data or to derive new information according to a given set of rules. Processes occur in order, and will continue in order unless a transition dictates another step should occur.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="MaintainableType">
        <xs:sequence>
          <xs:element name="ProcessStep" type="ProcessStepType" minOccurs="0" maxOccurs="unbounded">
            <xs:annotation>
              <xs:documentation>ProcessStep defines a process step, which is a specific operation, performed on data in order to validate or to derive new information according to a given set of rules.</xs:documentation>
            </xs:annotation>
            <xs:unique name="ProcessStep_UniqueProcessStep">
              <xs:selector xpath="structure:ProcessStep"/>
              <xs:field xpath="@id"/>
            </xs:unique>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="ProcessStepBaseType" abstract="true">
    <xs:annotation>
      <xs:documentation>ProcessStepBaseType is an abstract base type used as the basis for the ProcessStepType.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="NameableType">
        <xs:sequence>
          <xs:element ref="common:Annotations" minOccurs="0"/>
          <xs:element ref="common:Name" maxOccurs="unbounded"/>
          <xs:element ref="common:Description" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
        <xs:attribute name="id" type="common:IDType" use="required"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="ProcessStepType">
    <xs:annotation>
      <xs:documentation>ProcessStepType describes the structure of a process step. A nested process step is automatically sub-ordinate, and followed as the next step. If the following step is conditional, it should be referenced in a transition.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ProcessStepBaseType">
        <xs:sequence>
          <xs:element name="Input" type="InputOutputType" minOccurs="0" maxOccurs="unbounded">
            <xs:annotation>
              <xs:documentation>Input references an object which is an input to the process step.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="Output" type="InputOutputType" minOccurs="0" maxOccurs="unbounded">
            <xs:annotation>
              <xs:documentation>Output references an object which is an output form the process step.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="Computation" type="ComputationType" minOccurs="0">
            <xs:annotation>
              <xs:documentation>Computation describes the computations involved in the process, in any form desired by the user (these are informational rather than machine-actionable), and so may be supplied in multiple, parallel-language versions.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="Transition" type="TransitionType" minOccurs="0" maxOccurs="unbounded">
            <xs:annotation>
              <xs:documentation>Transition describes the next process steps. Each transition in a process step should be evaluated, allowing for multiple process step branches from a single process step.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="ProcessStep" type="ProcessStepType" minOccurs="0" maxOccurs="unbounded">
            <xs:annotation>
              <xs:documentation>ProcessStep defines a process step, which is a specific operation, performed on data in order to validate or to derive new information according to a given set of rules.</xs:documentation>
            </xs:annotation>
            <xs:unique name="ChildProcessStep_UniqueProcessStep">
              <xs:selector xpath="structure:ProcessStep"/>
              <xs:field xpath="@id"/>
            </xs:unique>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="TransitionType">
    <xs:annotation>
      <xs:documentation>TransitionType describes the details of a transition, which is an expression in a textual or formalised way of the transformation of data between two specific operations performed on the data.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="IdentifiableType">
        <xs:sequence>
          <xs:element name="TargetStep" type="common:LocalProcessStepReferenceType">
            <xs:annotation>
              <xs:documentation>TargetStep references a process step within the process that should be transitioned to, should the conditions described be met.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="Condition" type="common:TextType" maxOccurs="unbounded">
            <xs:annotation>
              <xs:documentation>Condition is a textual description of the conditions to be met in order for the target step to be proceeded to. It is informational only (not machine-actionable), and may be supplied in multiple, parallel-language form.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
        <xs:attribute name="localID" type="common:IDType" use="optional">
          <xs:annotation>
            <xs:documentation>The localID attribute is an optional identification for the transition within the process.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="ComputationType">
    <xs:annotation>
      <xs:documentation>ComputationType describes a computation in a process.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="common:AnnotableType">
        <xs:sequence>
          <xs:element ref="common:Description" maxOccurs="unbounded">
            <xs:annotation>
              <xs:documentation>Description describe the computation in any form desired by the user (these are informational rather than machine-actionable), and so may be supplied in multiple, parallel-language versions,</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
        <xs:attribute name="localID" type="common:IDType" use="optional">
          <xs:annotation>
            <xs:documentation>The localID attribute is an optional identification for the computation within the process.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="softwarePackage" type="xs:string" use="optional">
          <xs:annotation>
            <xs:documentation>The softwarePackage attribute holds the name of the software package that is used to perform the computation.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="softwareLanguage" type="xs:string" use="optional">
          <xs:annotation>
            <xs:documentation>The softwareLanguage attribute holds the coding language that the software package used to perform the computation is written in.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute name="softwareVersion" type="xs:string" use="optional">
          <xs:annotation>
            <xs:documentation>The softwareVersion attribute hold the version of the software package that is used to perform that computation.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="InputOutputType">
    <xs:annotation>
      <xs:documentation>InputOutputType describes the structure of an input or output to a process step. It provides a reference to the object that is the input or output.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="common:AnnotableType">
        <xs:sequence>
          <xs:element name="ObjectReference" type="common:ObjectReferenceType">
            <xs:annotation>
              <xs:documentation>ObjectReference is an abstract substitution head that references the object that is an input or output. It is substituted with a concrete reference to an explicit object type.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
        <xs:attribute name="localID" type="common:IDType" use="optional">
          <xs:annotation>
            <xs:documentation>The localID attribute is an optional identification for the input or output within the process.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:annotation>
    <xs:appinfo>SDMX Provision Agreement Module</xs:appinfo>
    <xs:documentation>The provision agreement module defines the structure of the provision agreement constructs.</xs:documentation>
  </xs:annotation>

  <xs:complexType name="ProvisionAgreementType">
    <xs:annotation>
      <xs:documentation>ProvisionAgreementType describes the structure of a provision agreement. A provision agreement defines an agreement for a data provider to report data or reference metadata against a flow. Attributes which describe how the registry must behave when data or metadata is registered against this provision agreement are supplied.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="MaintainableType">
        <xs:sequence>
          <xs:element name="StructureUsage" type="common:StructureUsageReferenceType">
            <xs:annotation>
              <xs:documentation>DataflowReference provides a reference to a pre-existing structure usage (i.e. a dataflow or metadataflow) in the registry. The reference is provided via a URN and/or a full set of reference fields.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="DataProvider" type="common:DataProviderReferenceType">
            <xs:annotation>
              <xs:documentation>DataProvider provides a reference to a pre-existing data (or metadata) provider in the registry. The reference is provided via a URN and/or a full set of reference fields.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:annotation>
    <xs:appinfo>SDMX Reporting Taxonomy Structure Module</xs:appinfo>
    <xs:documentation>The reporting taxonomy structure module defines the structure of reporting taxonomy and reporting category constructs.</xs:documentation>
  </xs:annotation>

  <xs:complexType name="ReportingTaxonomyType">
    <xs:annotation>
      <xs:documentation>ReportingTaxonomyType describes the structure of a reporting taxonomy, which is a scheme which defines the composition structure of a data report where each component can be described by an independent structure or structure usage description.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="ItemSchemeType">
        <xs:sequence>
          <xs:element ref="common:Annotations" minOccurs="0"/>
          <xs:element ref="common:Name" maxOccurs="unbounded"/>
          <xs:element ref="common:Description" minOccurs="0" maxOccurs="unbounded"/>
          <xs:sequence minOccurs="0" maxOccurs="unbounded">
            <xs:element ref="ReportingCategory"/>
          </xs:sequence>
        </xs:sequence>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:element name="ReportingCategory" type="ReportingCategoryType" substitutionGroup="Item">
    <xs:annotation>
      <xs:documentation>ReportingCateogry defines a reporting category, which is used to group structure usages into useful sub-packages.</xs:documentation>
    </xs:annotation>
    <xs:unique name="ReportingCategory_UnqiueReportingCategory">
      <xs:selector xpath="structure:ReportingCategory"/>
      <xs:field xpath="@id"/>
    </xs:unique>
  </xs:element>

  <xs:complexType name="ReportingCategoryBaseType" abstract="true">
    <xs:annotation>
      <xs:documentation>ReportingCategoryBaseType is an abstract base type that serves as the basis for the ReportingCategoryType.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="ItemType">
        <xs:sequence>
          <xs:element ref="common:Annotations" minOccurs="0"/>
          <xs:element ref="common:Name" maxOccurs="unbounded"/>
          <xs:element ref="common:Description" minOccurs="0" maxOccurs="unbounded"/>
          <xs:choice minOccurs="0">
            <xs:sequence maxOccurs="unbounded">
              <xs:element ref="ReportingCategory"/>
            </xs:sequence>
          </xs:choice>
        </xs:sequence>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="ReportingCategoryType">
    <xs:annotation>
      <xs:documentation>ReportingCategoryType describes the structure of a reporting category, which groups structure usages into useful sub-packages. Sub ordinate reporting categories can be nested within the category definition.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ReportingCategoryBaseType">
        <xs:choice>
          <xs:element name="StructuralMetadata" type="common:StructureReferenceType" minOccurs="0" maxOccurs="unbounded">
            <xs:annotation>
              <xs:documentation>StructuralMetadata provides a reference for data structure definition and metadata structure definition references which are grouped in the reporting category. It is assumed that all structural metadata objects referenced from a category will be of the same type.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="ProvisioningMetadata" type="common:StructureUsageReferenceType" minOccurs="0" maxOccurs="unbounded">
            <xs:annotation>
              <xs:documentation>ProvisioningMetadata provides a reference for dataflow and metadataflow references which are grouped in the reporting category. It is assumed that all provisioning metadata objects referenced from a category will be of the same type.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:annotation>
    <xs:appinfo>SDMX Structure Set Structure Module</xs:appinfo>
    <xs:documentation>The structure set structure module defines the structure of structure set and structure map constructs.</xs:documentation>
  </xs:annotation>

  <xs:complexType name="StructureSetBaseType" abstract="true">
    <xs:annotation>
      <xs:documentation>StructureSetBaseType is an abstract base type that forms the basis for the StructureSetType.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="MaintainableType">
        <xs:sequence>
          <xs:element ref="common:Annotations" minOccurs="0"/>
          <xs:element ref="common:Name" maxOccurs="unbounded"/>
          <xs:element ref="common:Description" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="StructureSetType">
    <xs:annotation>
      <xs:documentation>StructureSetType describes the structure of a structure set. It allows components in one structure, structure usage, or item scheme to be mapped to components in another structural component of the same type.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="StructureSetBaseType">
        <xs:sequence>
          <xs:element name="RelatedStructure" type="common:StructureOrUsageReferenceType" minOccurs="0" maxOccurs="unbounded">
            <xs:annotation>
              <xs:documentation>RelatedStructures contains references to structures (key families and metadata structure definitions) and structure usages (data flows and metadata flows) to indicate that a semantic relationship exist between them. The details of these relationships can be found in the structure maps.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:choice minOccurs="0" maxOccurs="unbounded">
            <xs:element name="OrganisationSchemeMap" type="OrganisationSchemeMapType">
              <xs:annotation>
                <xs:documentation>OrganisationSchemeMap links a source and target organisations from different schemes where there is a semantic equivalence between them. Organisations are mapped without regard to role.</xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="CategorySchemeMap" type="CategorySchemeMapType">
              <xs:annotation>
                <xs:documentation>CategorySchemeMap links a source and target categories from different schemes where there is a semantic equivalence between them.</xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="CodelistMap" type="CodelistMapType">
              <xs:annotation>
                <xs:documentation>CodelistMap links a source and target codes from different lists where there is a semantic equivalence between them.</xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="ConceptSchemeMap" type="ConceptSchemeMapType">
              <xs:annotation>
                <xs:documentation>ConceptSchemeMap links a source and target concepts from different schemes where there is a semantic equivalence between them.</xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="ReportingTaxonomyMap" type="ReportingTaxonomyMapType">
              <xs:annotation>
                <xs:documentation>ReportingTaxonomyMap links a source and target reporting categories from different taxonomies where there is a semantic equivalence between them.</xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="HybridCodelistMap" type="HybridCodelistMapType">
              <xs:annotation>
                <xs:documentation>HybridCodelistMap links a source and target codes from different codelists, which may be hierarchical or flat, where there is a semantic equivalence between them.</xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="StructureMap" type="StructureMapType">
              <xs:annotation>
                <xs:documentation>StructureMap maps components from one structure to components to another structure, and can describe how the value of the components are related.</xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:choice>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="ItemSchemeMapBaseType" abstract="true">
    <xs:annotation>
      <xs:documentation>ItemSchemeMapBaseType is an abstract base type which forms the basis for the ItemSchemeMapType.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="NameableType">
        <xs:sequence>
          <xs:element ref="common:Annotations" minOccurs="0"/>
          <xs:element ref="common:Name" maxOccurs="unbounded"/>
          <xs:element ref="common:Description" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
        <xs:attribute name="id" type="common:IDType" use="required"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="ItemSchemeMapType" abstract="true">
    <xs:annotation>
      <xs:documentation>ItemSchemeMapType is an abstract base type which forms the basis for mapping items between item schemes of the same type.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="ItemSchemeMapBaseType">
        <xs:sequence>
          <xs:element name="Source" type="common:ItemSchemeReferenceBaseType">
            <xs:annotation>
              <xs:documentation>Source provides a reference to the item scheme which items are mapped from.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="Target" type="common:ItemSchemeReferenceBaseType">
            <xs:annotation>
              <xs:documentation>Target provides a reference to the item scheme which items are mapped to.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:sequence maxOccurs="unbounded">
            <xs:element ref="ItemAssociation"/>
          </xs:sequence>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:element name="ItemAssociation" type="ItemAssociationType" abstract="true">
    <xs:annotation>
      <xs:documentation>ItemAssociation is an abstract description of the relation between two items for the purpose of mapping.</xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:complexType name="ItemAssociationType" abstract="true">
    <xs:annotation>
      <xs:documentation>ItemAssociationType is an abstract type which defines the relationship between two items from the source and target item schemes of an item scheme map.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="common:AnnotableType">
        <xs:sequence>
          <xs:element name="Source" type="common:LocalItemReferenceType">
            <xs:annotation>
              <xs:documentation>Source provides a local reference (id only) to an item from the source item scheme in the item scheme map which is being mapped to another item.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="Target" type="common:LocalItemReferenceType">
            <xs:annotation>
              <xs:documentation>Target provides a local reference (id only) to an item from the target item scheme in the item scheme map which is being mapped from another item.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="OrganisationSchemeMapType">
    <xs:annotation>
      <xs:documentation>OrganisationSchemeMapType defines the structure of a map which identifies relationships between organisations in different organisation schemes.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="ItemSchemeMapType">
        <xs:sequence>
          <xs:element ref="common:Annotations" minOccurs="0"/>
          <xs:element ref="common:Name" maxOccurs="unbounded"/>
          <xs:element ref="common:Description" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element name="Source" type="common:OrganisationSchemeReferenceType"/>
          <xs:element name="Target" type="common:OrganisationSchemeReferenceType"/>
          <xs:sequence maxOccurs="unbounded">
            <xs:element ref="OrganisationMap"/>
          </xs:sequence>
        </xs:sequence>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:element name="OrganisationMap" type="OrganisationMapType" substitutionGroup="ItemAssociation">
    <xs:annotation>
      <xs:documentation>OrganisationMap relates a source organisation to a target organisation.</xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:complexType name="OrganisationMapType">
    <xs:annotation>
      <xs:documentation>OrganisationMapType defines the structure for mapping two organisations. A local reference is provided both the source and target organisation.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="ItemAssociationType">
        <xs:sequence>
          <xs:element ref="common:Annotations" minOccurs="0"/>
          <xs:element name="Source" type="common:LocalOrganisationReferenceType"/>
          <xs:element name="Target" type="common:LocalOrganisationReferenceType"/>
        </xs:sequence>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="CategorySchemeMapType">
    <xs:annotation>
      <xs:documentation>CategorySchemeMapType defines the structure of a map which identifies relationships between categories in different category schemes.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="ItemSchemeMapType">
        <xs:sequence>
          <xs:element ref="common:Annotations" minOccurs="0"/>
          <xs:element ref="common:Name" maxOccurs="unbounded"/>
          <xs:element ref="common:Description" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element name="Source" type="common:CategorySchemeReferenceType"/>
          <xs:element name="Target" type="common:CategorySchemeReferenceType"/>
          <xs:sequence maxOccurs="unbounded">
            <xs:element ref="CategoryMap"/>
          </xs:sequence>
        </xs:sequence>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:element name="CategoryMap" type="CategoryMapType" substitutionGroup="ItemAssociation">
    <xs:annotation>
      <xs:documentation>CategoryMap defines the structure of a map which identifies relationships between categories in different category schemes.</xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:complexType name="CategoryMapType">
    <xs:annotation>
      <xs:documentation>CategoryMapType defines the structure for mapping two categories. A local reference is provided both the source and target category.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="ItemAssociationType">
        <xs:sequence>
          <xs:element ref="common:Annotations" minOccurs="0"/>
          <xs:element name="Source" type="common:LocalCategoryReferenceType"/>
          <xs:element name="Target" type="common:LocalCategoryReferenceType"/>
        </xs:sequence>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="CodelistMapType">
    <xs:annotation>
      <xs:documentation>CodelistMapType defines the structure of a map which identifies relationships between codes in different codelists.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="ItemSchemeMapType">
        <xs:sequence>
          <xs:element ref="common:Annotations" minOccurs="0"/>
          <xs:element ref="common:Name" maxOccurs="unbounded"/>
          <xs:element ref="common:Description" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element name="Source" type="common:CodelistReferenceType"/>
          <xs:element name="Target" type="common:CodelistReferenceType"/>
          <xs:sequence maxOccurs="unbounded">
            <xs:element ref="CodeMap"/>
          </xs:sequence>
        </xs:sequence>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:element name="CodeMap" type="CodeMapType" substitutionGroup="ItemAssociation">
    <xs:annotation>
      <xs:documentation>CodeMap defines the structure of a map which identifies relationships between codes in different codelists.</xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:complexType name="CodeMapType">
    <xs:annotation>
      <xs:documentation>CodeMapType defines the structure for mapping two codes. A local reference is provided both the source and target code.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="ItemAssociationType">
        <xs:sequence>
          <xs:element ref="common:Annotations" minOccurs="0"/>
          <xs:element name="Source" type="common:LocalCodeReferenceType"/>
          <xs:element name="Target" type="common:LocalCodeReferenceType"/>
        </xs:sequence>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="ConceptSchemeMapType">
    <xs:annotation>
      <xs:documentation>ConceptSchemeMapType defines the structure of a map which identifies relationships between concepts in different concept schemes.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="ItemSchemeMapType">
        <xs:sequence>
          <xs:element ref="common:Annotations" minOccurs="0"/>
          <xs:element ref="common:Name" maxOccurs="unbounded"/>
          <xs:element ref="common:Description" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element name="Source" type="common:ConceptSchemeReferenceType"/>
          <xs:element name="Target" type="common:ConceptSchemeReferenceType"/>
          <xs:sequence maxOccurs="unbounded">
            <xs:element ref="ConceptMap"/>
          </xs:sequence>
        </xs:sequence>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:element name="ConceptMap" type="ConceptMapType" substitutionGroup="ItemAssociation">
    <xs:annotation>
      <xs:documentation>ConceptMap defines the structure of a map which identifies relationships between concepts in different concept schemes.</xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:complexType name="ConceptMapType">
    <xs:annotation>
      <xs:documentation>ConceptMapType defines the structure for mapping two concepts. A local reference is provided both the source and target concept.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="ItemAssociationType">
        <xs:sequence>
          <xs:element ref="common:Annotations" minOccurs="0"/>
          <xs:element name="Source" type="common:LocalConceptReferenceType"/>
          <xs:element name="Target" type="common:LocalConceptReferenceType"/>
        </xs:sequence>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="ReportingTaxonomyMapType">
    <xs:annotation>
      <xs:documentation>ReportingTaxonomyMapType defines the structure of a map which identifies relationships between reporting categories in different reporting taxonomies.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="ItemSchemeMapType">
        <xs:sequence>
          <xs:element ref="common:Annotations" minOccurs="0"/>
          <xs:element ref="common:Name" maxOccurs="unbounded"/>
          <xs:element ref="common:Description" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element name="Source" type="common:ReportingTaxonomyReferenceType"/>
          <xs:element name="Target" type="common:ReportingTaxonomyReferenceType"/>
          <xs:sequence maxOccurs="unbounded">
            <xs:element ref="ReportingCategoryMap"/>
          </xs:sequence>
        </xs:sequence>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:element name="ReportingCategoryMap" type="ReportingCategoryMapType" substitutionGroup="ItemAssociation">
    <xs:annotation>
      <xs:documentation>ReportingCategoryMap defines the structure of a map which identifies relationships between reporting categories in different reporting taxonomies.</xs:documentation>
    </xs:annotation>
  </xs:element>

  <xs:complexType name="ReportingCategoryMapType">
    <xs:annotation>
      <xs:documentation>ReportingCategoryMapType defines the structure for mapping two reporting categories. A local reference is provided both the source and target category.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="ItemAssociationType">
        <xs:sequence>
          <xs:element ref="common:Annotations" minOccurs="0"/>
          <xs:element name="Source" type="common:LocalReportingCategoryReferenceType"/>
          <xs:element name="Target" type="common:LocalReportingCategoryReferenceType"/>
        </xs:sequence>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="HybridCodelistMapBaseType" abstract="true">
    <xs:annotation>
      <xs:documentation>HybridCodelistMapBaseType is an abstract base type which forms the basis for the HybridCodelistMapType.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="NameableType">
        <xs:sequence>
          <xs:element ref="common:Annotations" minOccurs="0"/>
          <xs:element ref="common:Name" maxOccurs="unbounded"/>
          <xs:element ref="common:Description" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
        <xs:attribute name="id" type="common:IDType" use="required"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="HybridCodelistMapType">
    <xs:annotation>
      <xs:documentation>HybridCodelistMapType defines the structure of a map which relates codes (possibly hierarchical) from different code lists.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="HybridCodelistMapBaseType">
        <xs:sequence>
          <xs:element name="Source" type="common:AnyCodelistReferenceType">
            <xs:annotation>
              <xs:documentation>Source provides a reference to either a codelist or a hierarchical codelist, from which the codes are to be mapped.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="Target" type="common:AnyCodelistReferenceType">
            <xs:annotation>
              <xs:documentation>Target provides a reference to either a codelist or a hierarchical codelist, to which the source codes are to be mapped.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="HybridCodeMap" type="HybridCodeMapType" maxOccurs="unbounded">
            <xs:annotation>
              <xs:documentation>HybridCodeMap defines the relationship of a code in the source list to code in the target list.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="HybridCodeMapType">
    <xs:annotation>
      <xs:documentation>CodeMapType defines the structure for associating a code from a source codelist to a code in a target codelist. Note that either of these may come from a hierarchical codelist.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="common:AnnotableType">
        <xs:sequence>
          <xs:element name="Source" type="common:AnyLocalCodeReferenceType">
            <xs:annotation>
              <xs:documentation>Source provides a local reference to the code which is to be mapped. If this code is from a hierarchical codelist, a reference to the hierarchy in which it is defined must also be provided.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="Target" type="common:AnyLocalCodeReferenceType">
            <xs:annotation>
              <xs:documentation>Target provides a local reference to the code to which the source code is mapped. If this code is from a hierarchical codelist, a reference to the hierarchy in which it is defined must also be provided.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="StructureMapBaseType" abstract="true">
    <xs:annotation>
      <xs:documentation>StructureMapBaseType is an abstract base type which forms the basis for the StructureMapType.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:restriction base="NameableType">
        <xs:sequence>
          <xs:element ref="common:Annotations" minOccurs="0"/>
          <xs:element ref="common:Name" maxOccurs="unbounded"/>
          <xs:element ref="common:Description" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
        <xs:attribute name="id" type="common:IDType" use="required"/>
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="StructureMapType">
    <xs:annotation>
      <xs:documentation>StructureMapType defines the structure for mapping components of one structure to components of another structure. A structure may be referenced directly meaning the map applies wherever the structure is used, or it may be a reference via a structure usage meaning the map only applies within the context of that usage. Using the related structures, one can make extrapolations between maps. For example, if key families, A, B, and C, are all grouped in a related structures container, then a map from key family A to C and a map from key family B to C could be used to infer a relation between key family A to C.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="StructureMapBaseType">
        <xs:sequence>
          <xs:element name="Source" type="common:StructureOrUsageReferenceType">
            <xs:annotation>
              <xs:documentation>Source provides a reference to a structure (data or metadata) or a structure usage (dataflow or metadataflow) from which components defined by the actual structure are to mapped.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="Target" type="common:StructureOrUsageReferenceType">
            <xs:annotation>
              <xs:documentation>Target provides a reference to a structure (data or metadata) or a structure usage (dataflow or metadataflow) to which components from the source are to mapped.</xs:documentation>
            </xs:annotation>
          </xs:element>
          <xs:element name="ComponentMap" type="ComponentMapType">
            <xs:annotation>
              <xs:documentation>ComponentMap defines the relationship between the components of the source and target structures, including information on how the value from the source component relates to values in the target component.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
        <xs:attribute name="isExtension" type="xs:boolean" use="optional" default="false">
          <xs:annotation>
            <xs:documentation>The isExtension attribute, when true, indicates that the target structure definition inherits all properties of the referenced structure definition, and may have additional components. Note that this attribute may only be set to true if the structure map has a source structure and a target structure of either two key families or two metadata structure definitions. It is not possible inherit the underlying concepts of components between the two type of structures using this mechanism.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="ComponentMapType">
    <xs:annotation>
      <xs:documentation>ComponentMapType defines the structure for relating a component in a source structure to a component in a target structure.</xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="common:AnnotableType">
        <xs:sequence>
          <xs:element name="Source" type="common:LocalComponentListComponentReferenceType"/>
          <xs:element name="Target" type="common:LocalComponentListComponentReferenceType"/>
          <xs:element name="RepresentationMapping" type="RepresentationMapType" minOccurs="0">
            <xs:annotation>
              <xs:documentation>RepresentationMapping describes the mapping rules to map the value of the source component to the target component. Note that is a representation mapping is not supplied, then the value of the source component is mapped directly to the value of the target component without any manipulation.</xs:documentation>
            </xs:annotation>
          </xs:element>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="RepresentationMapType">
    <xs:annotation>
      <xs:documentation>RepresentationMapType describes the structure of the mapping of the value of a source to component to a target component. Either a reference to another map defined within the containing structure set or a description of the source and target text formats must be provided. Note that for key family components, only a reference to a codelist map is relevant, since that is the only type of coded representation allowed in a key family.</xs:documentation>
    </xs:annotation>
    <xs:choice>
      <xs:element name="CodelistMap" type="common:LocalCodelistMapReferenceType">
        <xs:annotation>
          <xs:documentation>CodelistMap references a codelist map defined in the same structure set which maps the enumeration of the representation of the source component to the enumeration of the representation of the target component.</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:sequence>
        <xs:element name="ToTextFormat" type="TextFormatType">
          <xs:annotation>
            <xs:documentation>ToTextFormat describes the un-coded representation of the target to which the value of the referenced component should be transformed.</xs:documentation>
          </xs:annotation>
        </xs:element>
        <xs:element name="ToValueType" type="ToValueTypeType">
          <xs:annotation>
            <xs:documentation>ToValueType notes whether the value, name, or description of the source value should be used in the target value.</xs:documentation>
          </xs:annotation>
        </xs:element>
      </xs:sequence>
      <xs:element name="ValueMap" type="ValueMapType">
        <xs:annotation>
          <xs:documentation>ValueMap provides for a simple mapping of a source value to a target value without having to define a codelist map. This is available to allow mappings in situations such as the source or target is not being formally coded, or the source and/or target being a measure dimension in which case its representation is not mappable from a codelist map.</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:choice>
  </xs:complexType>

  <xs:complexType name="ValueMapType">
    <xs:annotation>
      <xs:documentation>ValueMapType contains a collection of value mappings, which give a source and target value.</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="ValueMapping" type="ValueMappingType" maxOccurs="unbounded">
        <xs:annotation>
          <xs:documentation>ValueMapping provides a source and target value for the purpose of mapping.</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="ValueMappingType">
    <xs:annotation>
      <xs:documentation>ValueMappingType specifies the relationship between two values as a source and target.</xs:documentation>
    </xs:annotation>
    <xs:attribute name="source" type="xs:string" use="required"/>
    <xs:attribute name="target" type="xs:string" use="required"/>
  </xs:complexType>

  <xs:simpleType name="ToValueTypeType">
    <xs:annotation>
      <xs:documentation>ToValueTypeType provides an enumeration of available text-equivalents for translation of coded values into textual formats.</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:NMTOKEN">
      <xs:enumeration value="Value">
        <xs:annotation>
          <xs:documentation>Code or other tokenized value, as provided in the representation scheme.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="Name">
        <xs:annotation>
          <xs:documentation>The human-readable name of the Value, as provided in the representation scheme.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="Description">
        <xs:annotation>
          <xs:documentation>The human-readable description of the Value, as provided in the representation scheme.</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>

</xs:schema>